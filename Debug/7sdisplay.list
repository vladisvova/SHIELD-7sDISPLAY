
7sdisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08007e20  08007e20  00017e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008140  08008140  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008140  08008140  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008140  08008140  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008140  08008140  00018140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008144  08008144  00018144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  200001e0  08008328  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08008328  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000baab  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023d7  00000000  00000000  0002bcbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007e0  00000000  00000000  0002e098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006d8  00000000  00000000  0002e878  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001793a  00000000  00000000  0002ef50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008004  00000000  00000000  0004688a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075aed  00000000  00000000  0004e88e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c437b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b68  00000000  00000000  000c43f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e04 	.word	0x08007e04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08007e04 	.word	0x08007e04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	619a      	str	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <setDigitOne>:
#include "digits.h"
#include "main.h"

//TODO: dopln do lavicy funkcie

void setDigitOne(void){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

	//LL_GPIO_ResetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
	LL_GPIO_ResetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
 8000c84:	2110      	movs	r1, #16
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f7ff ffeb 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
 8000c8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c96:	f7ff ffe5 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit_3_GPIO_Port , digit_3_Pin);
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca0:	f7ff ffe0 	bl	8000c64 <LL_GPIO_ResetOutputPin>

	LL_GPIO_SetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <setDigitOne+0x30>)
 8000ca8:	f7ff ffce 	bl	8000c48 <LL_GPIO_SetOutputPin>
	//LL_GPIO_SetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
	//LL_GPIO_SetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
	//LL_GPIO_SetOutputPin(digit_3_GPIO_Port , digit_3_Pin);


}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	48000400 	.word	0x48000400

08000cb4 <setDigitTwo>:

void setDigitTwo(void){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
 8000cb8:	2101      	movs	r1, #1
 8000cba:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <setDigitTwo+0x30>)
 8000cbc:	f7ff ffd2 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
	LL_GPIO_ResetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
 8000cc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f7ff ffcc 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit_3_GPIO_Port , digit_3_Pin);
 8000ccc:	2104      	movs	r1, #4
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f7ff ffc7 	bl	8000c64 <LL_GPIO_ResetOutputPin>

	//LL_GPIO_SetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
	LL_GPIO_SetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
 8000cd6:	2110      	movs	r1, #16
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cdc:	f7ff ffb4 	bl	8000c48 <LL_GPIO_SetOutputPin>
	//LL_GPIO_SetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
	//LL_GPIO_SetOutputPin(digit_3_GPIO_Port , digit_3_Pin);


}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	48000400 	.word	0x48000400

08000ce8 <setDigitThree>:

void setDigitThree(void){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
 8000cec:	2101      	movs	r1, #1
 8000cee:	480a      	ldr	r0, [pc, #40]	; (8000d18 <setDigitThree+0x30>)
 8000cf0:	f7ff ffb8 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfa:	f7ff ffb3 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
	LL_GPIO_ResetOutputPin(digit_3_GPIO_Port , digit_3_Pin);
 8000cfe:	2104      	movs	r1, #4
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	f7ff ffae 	bl	8000c64 <LL_GPIO_ResetOutputPin>


	//LL_GPIO_SetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
	//LL_GPIO_SetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
	LL_GPIO_SetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
 8000d08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d10:	f7ff ff9a 	bl	8000c48 <LL_GPIO_SetOutputPin>
	//LL_GPIO_SetOutputPin(digit_3_GPIO_Port , digit_3_Pin);


}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	48000400 	.word	0x48000400

08000d1c <setDigitFour>:


void setDigitFour(void){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
 8000d20:	2101      	movs	r1, #1
 8000d22:	480a      	ldr	r0, [pc, #40]	; (8000d4c <setDigitFour+0x30>)
 8000d24:	f7ff ff9e 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
 8000d28:	2110      	movs	r1, #16
 8000d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2e:	f7ff ff99 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
 8000d32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3a:	f7ff ff93 	bl	8000c64 <LL_GPIO_ResetOutputPin>


	//LL_GPIO_SetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
	//LL_GPIO_SetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
	//LL_GPIO_SetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
	LL_GPIO_SetOutputPin(digit_3_GPIO_Port , digit_3_Pin);
 8000d3e:	2104      	movs	r1, #4
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f7ff ff80 	bl	8000c48 <LL_GPIO_SetOutputPin>


}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	48000400 	.word	0x48000400

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	4907      	ldr	r1, [pc, #28]	; (8000da4 <__NVIC_EnableIRQ+0x38>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e6e:	695a      	ldr	r2, [r3, #20]
 8000e70:	4907      	ldr	r1, [pc, #28]	; (8000e90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e7a:	695a      	ldr	r2, [r3, #20]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e82:	68fb      	ldr	r3, [r7, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	40021000 	.word	0x40021000

08000e94 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000e9e:	4a13      	ldr	r2, [pc, #76]	; (8000eec <LL_SYSCFG_SetEXTISource+0x58>)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	0c1b      	lsrs	r3, r3, #16
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	ea02 0103 	and.w	r1, r2, r3
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	0c1b      	lsrs	r3, r3, #16
 8000eb8:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	fa93 f3a3 	rbit	r3, r3
 8000ec0:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	fab3 f383 	clz	r3, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	461a      	mov	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	fa03 f202 	lsl.w	r2, r3, r2
 8000ed2:	4806      	ldr	r0, [pc, #24]	; (8000eec <LL_SYSCFG_SetEXTISource+0x58>)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	3302      	adds	r3, #2
 8000edc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	40010000 	.word	0x40010000

08000ef0 <LL_GPIO_SetPinMode>:
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa93 f3a3 	rbit	r3, r3
 8000f0a:	613b      	str	r3, [r7, #16]
  return result;
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	fab3 f383 	clz	r3, r3
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2103      	movs	r1, #3
 8000f18:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	401a      	ands	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	fa93 f3a3 	rbit	r3, r3
 8000f2a:	61bb      	str	r3, [r7, #24]
  return result;
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	fab3 f383 	clz	r3, r3
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	601a      	str	r2, [r3, #0]
}
 8000f42:	bf00      	nop
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <LL_GPIO_SetPinPull>:
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b089      	sub	sp, #36	; 0x24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	fa93 f3a3 	rbit	r3, r3
 8000f68:	613b      	str	r3, [r7, #16]
  return result;
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	fab3 f383 	clz	r3, r3
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2103      	movs	r1, #3
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	401a      	ands	r2, r3
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa93 f3a3 	rbit	r3, r3
 8000f88:	61bb      	str	r3, [r7, #24]
  return result;
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	fab3 f383 	clz	r3, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	60da      	str	r2, [r3, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3724      	adds	r7, #36	; 0x24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <LL_GPIO_ResetOutputPin>:
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000fea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000fee:	f7ff ff39 	bl	8000e64 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000ff2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ff6:	f7ff ff35 	bl	8000e64 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segment_B_Pin|segment_A_Pin|digit_3_Pin|segment_F_Pin
 8000ffa:	f641 119f 	movw	r1, #6559	; 0x199f
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001002:	f7ff ffd3 	bl	8000fac <LL_GPIO_ResetOutputPin>
                          |digit_1_Pin|digit_time_Pin|segment_C_Pin|segment_E_Pin
                          |digit_2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, digit_0_Pin|segment_DP_Pin|segment_G_Pin|segment_D_Pin);
 8001006:	2133      	movs	r1, #51	; 0x33
 8001008:	482b      	ldr	r0, [pc, #172]	; (80010b8 <MX_GPIO_Init+0xf0>)
 800100a:	f7ff ffcf 	bl	8000fac <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segment_B_Pin|segment_A_Pin|digit_3_Pin|segment_F_Pin
 800100e:	f641 139f 	movw	r3, #6559	; 0x199f
 8001012:	607b      	str	r3, [r7, #4]
                          |digit_1_Pin|digit_time_Pin|segment_C_Pin|segment_E_Pin
                          |digit_2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001014:	2301      	movs	r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	4619      	mov	r1, r3
 8001028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102c:	f001 f907 	bl	800223e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = digit_0_Pin|segment_DP_Pin|segment_G_Pin|segment_D_Pin;
 8001030:	2333      	movs	r3, #51	; 0x33
 8001032:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001034:	2301      	movs	r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4619      	mov	r1, r3
 8001048:	481b      	ldr	r0, [pc, #108]	; (80010b8 <MX_GPIO_Init+0xf0>)
 800104a:	f001 f8f8 	bl	800223e <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 800104e:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff ff1e 	bl	8000e94 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(button_GPIO_Port, button_Pin, LL_GPIO_PULL_NO);
 8001058:	2200      	movs	r2, #0
 800105a:	2108      	movs	r1, #8
 800105c:	4816      	ldr	r0, [pc, #88]	; (80010b8 <MX_GPIO_Init+0xf0>)
 800105e:	f7ff ff76 	bl	8000f4e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(button_GPIO_Port, button_Pin, LL_GPIO_MODE_INPUT);
 8001062:	2200      	movs	r2, #0
 8001064:	2108      	movs	r1, #8
 8001066:	4814      	ldr	r0, [pc, #80]	; (80010b8 <MX_GPIO_Init+0xf0>)
 8001068:	f7ff ff42 	bl	8000ef0 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 800106c:	2308      	movs	r3, #8
 800106e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001074:	2301      	movs	r3, #1
 8001076:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800107a:	2300      	movs	r3, #0
 800107c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001080:	2301      	movs	r3, #1
 8001082:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4618      	mov	r0, r3
 800108c:	f000 feea 	bl	8001e64 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001090:	f7ff fe5e 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8001094:	4603      	mov	r3, r0
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff feae 	bl	8000dfc <NVIC_EncodePriority>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4619      	mov	r1, r3
 80010a4:	2009      	movs	r0, #9
 80010a6:	f7ff fe7f 	bl	8000da8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 80010aa:	2009      	movs	r0, #9
 80010ac:	f7ff fe5e 	bl	8000d6c <__NVIC_EnableIRQ>

}
 80010b0:	bf00      	nop
 80010b2:	3728      	adds	r7, #40	; 0x28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	48000400 	.word	0x48000400

080010bc <__NVIC_GetPriorityGrouping>:
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_EnableIRQ>:
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db0b      	blt.n	8001102 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4907      	ldr	r1, [pc, #28]	; (8001110 <__NVIC_EnableIRQ+0x38>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f043 0201 	orr.w	r2, r3, #1
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	601a      	str	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	601a      	str	r2, [r3, #0]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 800122e:	b480      	push	{r7}
 8001230:	b085      	sub	sp, #20
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001242:	f023 0306 	bic.w	r3, r3, #6
 8001246:	68b9      	ldr	r1, [r7, #8]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	430a      	orrs	r2, r1
 800124c:	431a      	orrs	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	60da      	str	r2, [r3, #12]
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60da      	str	r2, [r3, #12]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f043 0204 	orr.w	r2, r3, #4
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	601a      	str	r2, [r3, #0]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f023 0204 	bic.w	r2, r3, #4
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	601a      	str	r2, [r3, #0]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d101      	bne.n	80012d6 <LL_I2C_IsActiveFlag_TXIS+0x18>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d101      	bne.n	80012fc <LL_I2C_IsActiveFlag_RXNE+0x18>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <LL_I2C_IsActiveFlag_RXNE+0x1a>
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f003 0320 	and.w	r3, r3, #32
 800131a:	2b20      	cmp	r3, #32
 800131c:	d101      	bne.n	8001322 <LL_I2C_IsActiveFlag_STOP+0x18>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	f043 0220 	orr.w	r2, r3, #32
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	61da      	str	r2, [r3, #28]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	605a      	str	r2, [r3, #4]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	0d5b      	lsrs	r3, r3, #21
 8001386:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <LL_I2C_HandleTransfer+0x48>)
 800138c:	430b      	orrs	r3, r1
 800138e:	43db      	mvns	r3, r3
 8001390:	401a      	ands	r2, r3
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4319      	orrs	r1, r3
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	041b      	lsls	r3, r3, #16
 800139c:	4319      	orrs	r1, r3
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	4319      	orrs	r1, r3
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	430b      	orrs	r3, r1
 80013a6:	431a      	orrs	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	03ff7bff 	.word	0x03ff7bff

080013bc <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	b2db      	uxtb	r3, r3
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80013e2:	78fa      	ldrb	r2, [r7, #3]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_AHB1_GRP1_EnableClock>:
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013fe:	695a      	ldr	r2, [r3, #20]
 8001400:	4907      	ldr	r1, [pc, #28]	; (8001420 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4313      	orrs	r3, r2
 8001406:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800140a:	695a      	ldr	r2, [r3, #20]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4013      	ands	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40021000 	.word	0x40021000

08001424 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <LL_APB1_GRP1_EnableClock+0x2c>)
 800142e:	69da      	ldr	r2, [r3, #28]
 8001430:	4907      	ldr	r1, [pc, #28]	; (8001450 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4313      	orrs	r3, r2
 8001436:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <LL_APB1_GRP1_EnableClock+0x2c>)
 800143a:	69da      	ldr	r2, [r3, #28]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4013      	ands	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40021000 	.word	0x40021000

08001454 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08e      	sub	sp, #56	; 0x38
 8001458:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]
 800146a:	615a      	str	r2, [r3, #20]
 800146c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
 800147c:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800147e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001482:	f7ff ffb7 	bl	80013f4 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001486:	23c0      	movs	r3, #192	; 0xc0
 8001488:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800148a:	2302      	movs	r3, #2
 800148c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001492:	2301      	movs	r3, #1
 8001494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001496:	2301      	movs	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800149a:	2304      	movs	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4821      	ldr	r0, [pc, #132]	; (8001528 <MX_I2C1_Init+0xd4>)
 80014a4:	f000 fecb 	bl	800223e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80014a8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80014ac:	f7ff ffba 	bl	8001424 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014b0:	f7ff fe04 	bl	80010bc <__NVIC_GetPriorityGrouping>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fe54 	bl	8001168 <NVIC_EncodePriority>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4619      	mov	r1, r3
 80014c4:	201f      	movs	r0, #31
 80014c6:	f7ff fe25 	bl	8001114 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014ca:	201f      	movs	r0, #31
 80014cc:	f7ff fe04 	bl	80010d8 <__NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80014d0:	4816      	ldr	r0, [pc, #88]	; (800152c <MX_I2C1_Init+0xd8>)
 80014d2:	f7ff ff3d 	bl	8001350 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80014d6:	4815      	ldr	r0, [pc, #84]	; (800152c <MX_I2C1_Init+0xd8>)
 80014d8:	f7ff fec1 	bl	800125e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80014dc:	4813      	ldr	r0, [pc, #76]	; (800152c <MX_I2C1_Init+0xd8>)
 80014de:	f7ff fe96 	bl	800120e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80014e2:	4812      	ldr	r0, [pc, #72]	; (800152c <MX_I2C1_Init+0xd8>)
 80014e4:	f7ff fe83 	bl	80011ee <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <MX_I2C1_Init+0xdc>)
 80014ee:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001500:	2300      	movs	r3, #0
 8001502:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	4619      	mov	r1, r3
 800150a:	4808      	ldr	r0, [pc, #32]	; (800152c <MX_I2C1_Init+0xd8>)
 800150c:	f000 ffaa 	bl	8002464 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_I2C1_Init+0xd8>)
 8001516:	f7ff fe8a 	bl	800122e <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 800151a:	4804      	ldr	r0, [pc, #16]	; (800152c <MX_I2C1_Init+0xd8>)
 800151c:	f7ff fe57 	bl	80011ce <LL_I2C_Enable>
}
 8001520:	bf00      	nop
 8001522:	3738      	adds	r7, #56	; 0x38
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	48000400 	.word	0x48000400
 800152c:	40005400 	.word	0x40005400
 8001530:	2000090e 	.word	0x2000090e

08001534 <i2c_master_write>:


void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b085      	sub	sp, #20
 8001538:	af02      	add	r7, sp, #8
 800153a:	4604      	mov	r4, r0
 800153c:	4608      	mov	r0, r1
 800153e:	4611      	mov	r1, r2
 8001540:	461a      	mov	r2, r3
 8001542:	4623      	mov	r3, r4
 8001544:	71fb      	strb	r3, [r7, #7]
 8001546:	4603      	mov	r3, r0
 8001548:	71bb      	strb	r3, [r7, #6]
 800154a:	460b      	mov	r3, r1
 800154c:	717b      	strb	r3, [r7, #5]
 800154e:	4613      	mov	r3, r2
 8001550:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8001552:	793b      	ldrb	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800155e:	71bb      	strb	r3, [r7, #6]
	}
//startovacia podmienka:
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001560:	7979      	ldrb	r1, [r7, #5]
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <i2c_master_write+0x80>)
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2302      	movs	r3, #2
 800156e:	2200      	movs	r2, #0
 8001570:	4811      	ldr	r0, [pc, #68]	; (80015b8 <i2c_master_write+0x84>)
 8001572:	f7ff fefd 	bl	8001370 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8001576:	79bb      	ldrb	r3, [r7, #6]
 8001578:	4619      	mov	r1, r3
 800157a:	480f      	ldr	r0, [pc, #60]	; (80015b8 <i2c_master_write+0x84>)
 800157c:	f7ff ff2b 	bl	80013d6 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001580:	e00a      	b.n	8001598 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001582:	480d      	ldr	r0, [pc, #52]	; (80015b8 <i2c_master_write+0x84>)
 8001584:	f7ff fe9b 	bl	80012be <LL_I2C_IsActiveFlag_TXIS>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d004      	beq.n	8001598 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	4619      	mov	r1, r3
 8001592:	4809      	ldr	r0, [pc, #36]	; (80015b8 <i2c_master_write+0x84>)
 8001594:	f7ff ff1f 	bl	80013d6 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001598:	4807      	ldr	r0, [pc, #28]	; (80015b8 <i2c_master_write+0x84>)
 800159a:	f7ff feb6 	bl	800130a <LL_I2C_IsActiveFlag_STOP>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0ee      	beq.n	8001582 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <i2c_master_write+0x84>)
 80015a6:	f7ff fec3 	bl	8001330 <LL_I2C_ClearFlag_STOP>
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}
 80015b2:	bf00      	nop
 80015b4:	80002000 	.word	0x80002000
 80015b8:	40005400 	.word	0x40005400

080015bc <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	4608      	mov	r0, r1
 80015c6:	4611      	mov	r1, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	70fb      	strb	r3, [r7, #3]
 80015ce:	460b      	mov	r3, r1
 80015d0:	70bb      	strb	r3, [r7, #2]
 80015d2:	4613      	mov	r3, r2
 80015d4:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 80015d6:	4a31      	ldr	r2, [pc, #196]	; (800169c <i2c_master_read+0xe0>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6013      	str	r3, [r2, #0]

	if(read_flag)
 80015dc:	7c3b      	ldrb	r3, [r7, #16]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 80015e2:	78bb      	ldrb	r3, [r7, #2]
 80015e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015e8:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 80015ea:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <i2c_master_read+0xe4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 80015f0:	482c      	ldr	r0, [pc, #176]	; (80016a4 <i2c_master_read+0xe8>)
 80015f2:	f7ff fe44 	bl	800127e <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80015f6:	7879      	ldrb	r1, [r7, #1]
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <i2c_master_read+0xec>)
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2301      	movs	r3, #1
 8001604:	2200      	movs	r2, #0
 8001606:	4827      	ldr	r0, [pc, #156]	; (80016a4 <i2c_master_read+0xe8>)
 8001608:	f7ff feb2 	bl	8001370 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800160c:	e00a      	b.n	8001624 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800160e:	4825      	ldr	r0, [pc, #148]	; (80016a4 <i2c_master_read+0xe8>)
 8001610:	f7ff fe55 	bl	80012be <LL_I2C_IsActiveFlag_TXIS>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d004      	beq.n	8001624 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 800161a:	78bb      	ldrb	r3, [r7, #2]
 800161c:	4619      	mov	r1, r3
 800161e:	4821      	ldr	r0, [pc, #132]	; (80016a4 <i2c_master_read+0xe8>)
 8001620:	f7ff fed9 	bl	80013d6 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001624:	481f      	ldr	r0, [pc, #124]	; (80016a4 <i2c_master_read+0xe8>)
 8001626:	f7ff fe70 	bl	800130a <LL_I2C_IsActiveFlag_STOP>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0ee      	beq.n	800160e <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001630:	481c      	ldr	r0, [pc, #112]	; (80016a4 <i2c_master_read+0xe8>)
 8001632:	f7ff fe7d 	bl	8001330 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8001636:	bf00      	nop
 8001638:	481a      	ldr	r0, [pc, #104]	; (80016a4 <i2c_master_read+0xe8>)
 800163a:	f7ff fe66 	bl	800130a <LL_I2C_IsActiveFlag_STOP>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f9      	bne.n	8001638 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001644:	7879      	ldrb	r1, [r7, #1]
 8001646:	78fa      	ldrb	r2, [r7, #3]
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <i2c_master_read+0xf0>)
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	4613      	mov	r3, r2
 8001654:	2200      	movs	r2, #0
 8001656:	4813      	ldr	r0, [pc, #76]	; (80016a4 <i2c_master_read+0xe8>)
 8001658:	f7ff fe8a 	bl	8001370 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800165c:	bf00      	nop
 800165e:	4811      	ldr	r0, [pc, #68]	; (80016a4 <i2c_master_read+0xe8>)
 8001660:	f7ff fe53 	bl	800130a <LL_I2C_IsActiveFlag_STOP>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f9      	beq.n	800165e <i2c_master_read+0xa2>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 800166a:	480e      	ldr	r0, [pc, #56]	; (80016a4 <i2c_master_read+0xe8>)
 800166c:	f7ff fe60 	bl	8001330 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001670:	480c      	ldr	r0, [pc, #48]	; (80016a4 <i2c_master_read+0xe8>)
 8001672:	f7ff fe14 	bl	800129e <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <i2c_master_read+0xe8>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <i2c_master_read+0xe8>)
 800167c:	f043 0310 	orr.w	r3, r3, #16
 8001680:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <i2c_master_read+0xf4>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <i2c_master_read+0xe4>)
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 800168e:	4b03      	ldr	r3, [pc, #12]	; (800169c <i2c_master_read+0xe0>)
 8001690:	681b      	ldr	r3, [r3, #0]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000214 	.word	0x20000214
 80016a0:	200001fc 	.word	0x200001fc
 80016a4:	40005400 	.word	0x40005400
 80016a8:	80002000 	.word	0x80002000
 80016ac:	80002400 	.word	0x80002400
 80016b0:	200001fd 	.word	0x200001fd

080016b4 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80016b4:	b598      	push	{r3, r4, r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80016b8:	4812      	ldr	r0, [pc, #72]	; (8001704 <I2C1_EV_IRQHandler+0x50>)
 80016ba:	f7ff fe13 	bl	80012e4 <LL_I2C_IsActiveFlag_RXNE>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d01c      	beq.n	80016fe <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 80016c4:	4b10      	ldr	r3, [pc, #64]	; (8001708 <I2C1_EV_IRQHandler+0x54>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <I2C1_EV_IRQHandler+0x58>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	1c59      	adds	r1, r3, #1
 80016d0:	b2c8      	uxtb	r0, r1
 80016d2:	490e      	ldr	r1, [pc, #56]	; (800170c <I2C1_EV_IRQHandler+0x58>)
 80016d4:	7008      	strb	r0, [r1, #0]
 80016d6:	18d4      	adds	r4, r2, r3
 80016d8:	480a      	ldr	r0, [pc, #40]	; (8001704 <I2C1_EV_IRQHandler+0x50>)
 80016da:	f7ff fe6f 	bl	80013bc <LL_I2C_ReceiveData8>
 80016de:	4603      	mov	r3, r0
 80016e0:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <I2C1_EV_IRQHandler+0x58>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b13      	cmp	r3, #19
 80016ea:	d903      	bls.n	80016f4 <I2C1_EV_IRQHandler+0x40>
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <I2C1_EV_IRQHandler+0x58>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
 80016f2:	e001      	b.n	80016f8 <I2C1_EV_IRQHandler+0x44>
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <I2C1_EV_IRQHandler+0x58>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <I2C1_EV_IRQHandler+0x5c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
	}
}
 80016fe:	bf00      	nop
 8001700:	bd98      	pop	{r3, r4, r7, pc}
 8001702:	bf00      	nop
 8001704:	40005400 	.word	0x40005400
 8001708:	20000214 	.word	0x20000214
 800170c:	200001fd 	.word	0x200001fd
 8001710:	200001fc 	.word	0x200001fc

08001714 <__NVIC_SetPriorityGrouping>:
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001730:	4013      	ands	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800173c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001746:	4a04      	ldr	r2, [pc, #16]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	60d3      	str	r3, [r2, #12]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <LL_RCC_HSI_Enable+0x1c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <LL_RCC_HSI_Enable+0x1c>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6013      	str	r3, [r2, #0]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000

0800177c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <LL_RCC_HSI_IsReady+0x20>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b02      	cmp	r3, #2
 800178a:	bf0c      	ite	eq
 800178c:	2301      	moveq	r3, #1
 800178e:	2300      	movne	r3, #0
 8001790:	b2db      	uxtb	r3, r3
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40021000 	.word	0x40021000

080017a0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4904      	ldr	r1, [pc, #16]	; (80017c8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000

080017cc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <LL_RCC_SetSysClkSource+0x24>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f023 0203 	bic.w	r2, r3, #3
 80017dc:	4904      	ldr	r1, [pc, #16]	; (80017f0 <LL_RCC_SetSysClkSource+0x24>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40021000 	.word	0x40021000

080017f4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <LL_RCC_GetSysClkSource+0x18>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 030c 	and.w	r3, r3, #12
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000

08001810 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <LL_RCC_SetAHBPrescaler+0x24>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001820:	4904      	ldr	r1, [pc, #16]	; (8001834 <LL_RCC_SetAHBPrescaler+0x24>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	40021000 	.word	0x40021000

08001838 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001848:	4904      	ldr	r1, [pc, #16]	; (800185c <LL_RCC_SetAPB1Prescaler+0x24>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40021000 	.word	0x40021000

08001860 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <LL_RCC_SetAPB2Prescaler+0x24>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001870:	4904      	ldr	r1, [pc, #16]	; (8001884 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	40021000 	.word	0x40021000

08001888 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <LL_RCC_SetI2CClockSource+0x2c>)
 8001892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	0e1b      	lsrs	r3, r3, #24
 8001898:	43db      	mvns	r3, r3
 800189a:	401a      	ands	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80018a2:	4904      	ldr	r1, [pc, #16]	; (80018b4 <LL_RCC_SetI2CClockSource+0x2c>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	630b      	str	r3, [r1, #48]	; 0x30
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	40021000 	.word	0x40021000

080018b8 <LL_APB1_GRP1_EnableClock>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018c2:	69da      	ldr	r2, [r3, #28]
 80018c4:	4907      	ldr	r1, [pc, #28]	; (80018e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018ce:	69da      	ldr	r2, [r3, #28]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4013      	ands	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	40021000 	.word	0x40021000

080018e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018f2:	699a      	ldr	r2, [r3, #24]
 80018f4:	4907      	ldr	r1, [pc, #28]	; (8001914 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018fe:	699a      	ldr	r2, [r3, #24]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4013      	ands	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	40021000 	.word	0x40021000

08001918 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <LL_FLASH_SetLatency+0x24>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f023 0207 	bic.w	r2, r3, #7
 8001928:	4904      	ldr	r1, [pc, #16]	; (800193c <LL_FLASH_SetLatency+0x24>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4313      	orrs	r3, r2
 800192e:	600b      	str	r3, [r1, #0]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40022000 	.word	0x40022000

08001940 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <LL_FLASH_GetLatency+0x18>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40022000 	.word	0x40022000

0800195c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001960:	2001      	movs	r0, #1
 8001962:	f7ff ffc1 	bl	80018e8 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001966:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800196a:	f7ff ffa5 	bl	80018b8 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196e:	2003      	movs	r0, #3
 8001970:	f7ff fed0 	bl	8001714 <__NVIC_SetPriorityGrouping>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001974:	f000 f80e 	bl	8001994 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001978:	f7ff fb26 	bl	8000fc8 <MX_GPIO_Init>
	MX_I2C1_Init();
 800197c:	f7ff fd6a 	bl	8001454 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	LBS25HB_init();
 8001980:	f002 fe1c 	bl	80045bc <LBS25HB_init>
	lis3mdl_init();
 8001984:	f000 fee8 	bl	8002758 <lis3mdl_init>
	state_init();
 8001988:	f000 ff3c 	bl	8002804 <state_init>
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */

		processToDisplay();
 800198c:	f000 ff78 	bl	8002880 <processToDisplay>
 8001990:	e7fc      	b.n	800198c <main+0x30>
	...

08001994 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff ffbd 	bl	8001918 <LL_FLASH_SetLatency>
	while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800199e:	bf00      	nop
 80019a0:	f7ff ffce 	bl	8001940 <LL_FLASH_GetLatency>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1fa      	bne.n	80019a0 <SystemClock_Config+0xc>
	{
	}
	LL_RCC_HSI_Enable();
 80019aa:	f7ff fed7 	bl	800175c <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while(LL_RCC_HSI_IsReady() != 1)
 80019ae:	bf00      	nop
 80019b0:	f7ff fee4 	bl	800177c <LL_RCC_HSI_IsReady>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d1fa      	bne.n	80019b0 <SystemClock_Config+0x1c>
	{

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 80019ba:	2010      	movs	r0, #16
 80019bc:	f7ff fef0 	bl	80017a0 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80019c0:	2000      	movs	r0, #0
 80019c2:	f7ff ff25 	bl	8001810 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80019c6:	2000      	movs	r0, #0
 80019c8:	f7ff ff36 	bl	8001838 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80019cc:	2000      	movs	r0, #0
 80019ce:	f7ff ff47 	bl	8001860 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80019d2:	2000      	movs	r0, #0
 80019d4:	f7ff fefa 	bl	80017cc <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80019d8:	bf00      	nop
 80019da:	f7ff ff0b 	bl	80017f4 <LL_RCC_GetSysClkSource>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1fa      	bne.n	80019da <SystemClock_Config+0x46>
	{

	}
	LL_Init1msTick(8000000);
 80019e4:	4805      	ldr	r0, [pc, #20]	; (80019fc <SystemClock_Config+0x68>)
 80019e6:	f000 fd93 	bl	8002510 <LL_Init1msTick>
	LL_SetSystemCoreClock(8000000);
 80019ea:	4804      	ldr	r0, [pc, #16]	; (80019fc <SystemClock_Config+0x68>)
 80019ec:	f000 fdc2 	bl	8002574 <LL_SetSystemCoreClock>
	LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80019f0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80019f4:	f7ff ff48 	bl	8001888 <LL_RCC_SetI2CClockSource>
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	007a1200 	.word	0x007a1200

08001a00 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	bf0c      	ite	eq
 8001a16:	2301      	moveq	r3, #1
 8001a18:	2300      	movne	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	40010400 	.word	0x40010400

08001a2c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6153      	str	r3, [r2, #20]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40010400 	.word	0x40010400

08001a4c <LL_GPIO_IsInputPinSet>:
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691a      	ldr	r2, [r3, #16]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	bf0c      	ite	eq
 8001a64:	2301      	moveq	r3, #1
 8001a66:	2300      	movne	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  break;
 8001a88:	bf00      	nop
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <MemManage_Handler+0x4>

08001a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <BusFault_Handler+0x4>

08001aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <UsageFault_Handler+0x4>

08001aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	LL_mDelay(1);
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f000 fd21 	bl	800252c <LL_mDelay>
	if(LL_GPIO_IsInputPinSet(button_GPIO_Port, button_Pin)){
 8001aea:	2108      	movs	r1, #8
 8001aec:	480a      	ldr	r0, [pc, #40]	; (8001b18 <EXTI3_IRQHandler+0x38>)
 8001aee:	f7ff ffad 	bl	8001a4c <LL_GPIO_IsInputPinSet>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <EXTI3_IRQHandler+0x22>
		change_state();
 8001af8:	f000 fe92 	bl	8002820 <change_state>
		state_changed = true;
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <EXTI3_IRQHandler+0x3c>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8001b02:	2008      	movs	r0, #8
 8001b04:	f7ff ff7c 	bl	8001a00 <LL_EXTI_IsActiveFlag_0_31>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <EXTI3_IRQHandler+0x34>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8001b0e:	2008      	movs	r0, #8
 8001b10:	f7ff ff8c 	bl	8001a2c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	48000400 	.word	0x48000400
 8001b1c:	20000204 	.word	0x20000204

08001b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b28:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <_sbrk+0x5c>)
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <_sbrk+0x60>)
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d102      	bne.n	8001b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <_sbrk+0x64>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <_sbrk+0x68>)
 8001b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d207      	bcs.n	8001b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b50:	f002 fdd4 	bl	80046fc <__errno>
 8001b54:	4602      	mov	r2, r0
 8001b56:	230c      	movs	r3, #12
 8001b58:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	e009      	b.n	8001b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <_sbrk+0x64>)
 8001b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b72:	68fb      	ldr	r3, [r7, #12]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20003000 	.word	0x20003000
 8001b80:	00000400 	.word	0x00000400
 8001b84:	20000200 	.word	0x20000200
 8001b88:	20000220 	.word	0x20000220

08001b8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <SystemInit+0x20>)
 8001b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <SystemInit+0x20>)
 8001b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb4:	480d      	ldr	r0, [pc, #52]	; (8001bec <LoopForever+0x6>)
  ldr r1, =_edata
 8001bb6:	490e      	ldr	r1, [pc, #56]	; (8001bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bb8:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <LoopForever+0xe>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bbc:	e002      	b.n	8001bc4 <LoopCopyDataInit>

08001bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc2:	3304      	adds	r3, #4

08001bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc8:	d3f9      	bcc.n	8001bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bca:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bcc:	4c0b      	ldr	r4, [pc, #44]	; (8001bfc <LoopForever+0x16>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd0:	e001      	b.n	8001bd6 <LoopFillZerobss>

08001bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd4:	3204      	adds	r2, #4

08001bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd8:	d3fb      	bcc.n	8001bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bda:	f7ff ffd7 	bl	8001b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bde:	f002 fd93 	bl	8004708 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001be2:	f7ff febb 	bl	800195c <main>

08001be6 <LoopForever>:

LoopForever:
    b LoopForever
 8001be6:	e7fe      	b.n	8001be6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001be8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001bf4:	08008148 	.word	0x08008148
  ldr r2, =_sbss
 8001bf8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001bfc:	20000220 	.word	0x20000220

08001c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c00:	e7fe      	b.n	8001c00 <ADC1_2_IRQHandler>
	...

08001c04 <LL_EXTI_EnableIT_0_31>:
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <LL_EXTI_EnableIT_0_31+0x20>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4904      	ldr	r1, [pc, #16]	; (8001c24 <LL_EXTI_EnableIT_0_31+0x20>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	40010400 	.word	0x40010400

08001c28 <LL_EXTI_EnableIT_32_63>:
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <LL_EXTI_EnableIT_32_63+0x20>)
 8001c32:	6a1a      	ldr	r2, [r3, #32]
 8001c34:	4904      	ldr	r1, [pc, #16]	; (8001c48 <LL_EXTI_EnableIT_32_63+0x20>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	620b      	str	r3, [r1, #32]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40010400 	.word	0x40010400

08001c4c <LL_EXTI_DisableIT_0_31>:
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <LL_EXTI_DisableIT_0_31+0x24>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	4904      	ldr	r1, [pc, #16]	; (8001c70 <LL_EXTI_DisableIT_0_31+0x24>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40010400 	.word	0x40010400

08001c74 <LL_EXTI_DisableIT_32_63>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <LL_EXTI_DisableIT_32_63+0x24>)
 8001c7e:	6a1a      	ldr	r2, [r3, #32]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	4904      	ldr	r1, [pc, #16]	; (8001c98 <LL_EXTI_DisableIT_32_63+0x24>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	620b      	str	r3, [r1, #32]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40010400 	.word	0x40010400

08001c9c <LL_EXTI_EnableEvent_0_31>:
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <LL_EXTI_EnableEvent_0_31+0x20>)
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4904      	ldr	r1, [pc, #16]	; (8001cbc <LL_EXTI_EnableEvent_0_31+0x20>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	40010400 	.word	0x40010400

08001cc0 <LL_EXTI_EnableEvent_32_63>:
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ccc:	4904      	ldr	r1, [pc, #16]	; (8001ce0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	40010400 	.word	0x40010400

08001ce4 <LL_EXTI_DisableEvent_0_31>:
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	4904      	ldr	r1, [pc, #16]	; (8001d08 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40010400 	.word	0x40010400

08001d0c <LL_EXTI_DisableEvent_32_63>:
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001d16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	4904      	ldr	r1, [pc, #16]	; (8001d30 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40010400 	.word	0x40010400

08001d34 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	4904      	ldr	r1, [pc, #16]	; (8001d54 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40010400 	.word	0x40010400

08001d58 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001d62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d64:	4904      	ldr	r1, [pc, #16]	; (8001d78 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	40010400 	.word	0x40010400

08001d7c <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	4904      	ldr	r1, [pc, #16]	; (8001da0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40010400 	.word	0x40010400

08001da4 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001dae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	4904      	ldr	r1, [pc, #16]	; (8001dc8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40010400 	.word	0x40010400

08001dcc <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	4904      	ldr	r1, [pc, #16]	; (8001dec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	60cb      	str	r3, [r1, #12]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40010400 	.word	0x40010400

08001df0 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dfc:	4904      	ldr	r1, [pc, #16]	; (8001e10 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	40010400 	.word	0x40010400

08001e14 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	4904      	ldr	r1, [pc, #16]	; (8001e38 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	60cb      	str	r3, [r1, #12]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40010400 	.word	0x40010400

08001e3c <LL_EXTI_DisableFallingTrig_32_63>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	4904      	ldr	r1, [pc, #16]	; (8001e60 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40010400 	.word	0x40010400

08001e64 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	7a1b      	ldrb	r3, [r3, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80c2 	beq.w	8001ffe <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d05b      	beq.n	8001f3a <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7a5b      	ldrb	r3, [r3, #9]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d00e      	beq.n	8001ea8 <LL_EXTI_Init+0x44>
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d017      	beq.n	8001ebe <LL_EXTI_Init+0x5a>
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d120      	bne.n	8001ed4 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ff24 	bl	8001ce4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff feaf 	bl	8001c04 <LL_EXTI_EnableIT_0_31>
          break;
 8001ea6:	e018      	b.n	8001eda <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fecd 	bl	8001c4c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fef0 	bl	8001c9c <LL_EXTI_EnableEvent_0_31>
          break;
 8001ebc:	e00d      	b.n	8001eda <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fe9e 	bl	8001c04 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fee5 	bl	8001c9c <LL_EXTI_EnableEvent_0_31>
          break;
 8001ed2:	e002      	b.n	8001eda <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
          break;
 8001ed8:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7a9b      	ldrb	r3, [r3, #10]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d02b      	beq.n	8001f3a <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7a9b      	ldrb	r3, [r3, #10]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d00e      	beq.n	8001f08 <LL_EXTI_Init+0xa4>
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d017      	beq.n	8001f1e <LL_EXTI_Init+0xba>
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d120      	bne.n	8001f34 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ff8c 	bl	8001e14 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff17 	bl	8001d34 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001f06:	e019      	b.n	8001f3c <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff35 	bl	8001d7c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff58 	bl	8001dcc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001f1c:	e00e      	b.n	8001f3c <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ff06 	bl	8001d34 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff4d 	bl	8001dcc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001f32:	e003      	b.n	8001f3c <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
            break;
 8001f38:	e000      	b.n	8001f3c <LL_EXTI_Init+0xd8>
        }
      }
 8001f3a:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d071      	beq.n	8002028 <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7a5b      	ldrb	r3, [r3, #9]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d00e      	beq.n	8001f6a <LL_EXTI_Init+0x106>
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d017      	beq.n	8001f80 <LL_EXTI_Init+0x11c>
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d120      	bne.n	8001f96 <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fed7 	bl	8001d0c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fe60 	bl	8001c28 <LL_EXTI_EnableIT_32_63>
          break;
 8001f68:	e018      	b.n	8001f9c <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fe80 	bl	8001c74 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fea1 	bl	8001cc0 <LL_EXTI_EnableEvent_32_63>
          break;
 8001f7e:	e00d      	b.n	8001f9c <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fe4f 	bl	8001c28 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fe96 	bl	8001cc0 <LL_EXTI_EnableEvent_32_63>
          break;
 8001f94:	e002      	b.n	8001f9c <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
          break;
 8001f9a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7a9b      	ldrb	r3, [r3, #10]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d041      	beq.n	8002028 <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	7a9b      	ldrb	r3, [r3, #10]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d00e      	beq.n	8001fca <LL_EXTI_Init+0x166>
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d017      	beq.n	8001fe0 <LL_EXTI_Init+0x17c>
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d120      	bne.n	8001ff6 <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff3f 	bl	8001e3c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fec8 	bl	8001d58 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001fc8:	e02f      	b.n	800202a <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fee8 	bl	8001da4 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff09 	bl	8001df0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001fde:	e024      	b.n	800202a <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff feb7 	bl	8001d58 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fefe 	bl	8001df0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001ff4:	e019      	b.n	800202a <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	73fb      	strb	r3, [r7, #15]
            break;
 8001ffa:	bf00      	nop
 8001ffc:	e015      	b.n	800202a <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fe22 	bl	8001c4c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fe69 	bl	8001ce4 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fe2c 	bl	8001c74 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fe73 	bl	8001d0c <LL_EXTI_DisableEvent_32_63>
 8002026:	e000      	b.n	800202a <LL_EXTI_Init+0x1c6>
      }
 8002028:	bf00      	nop
#endif
  }
  return status;
 800202a:	7bfb      	ldrb	r3, [r7, #15]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <LL_GPIO_SetPinMode>:
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	613b      	str	r3, [r7, #16]
  return result;
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2103      	movs	r1, #3
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	401a      	ands	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	61bb      	str	r3, [r7, #24]
  return result;
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	431a      	orrs	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	601a      	str	r2, [r3, #0]
}
 8002086:	bf00      	nop
 8002088:	3724      	adds	r7, #36	; 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_GPIO_SetPinOutputType>:
{
 8002092:	b480      	push	{r7}
 8002094:	b085      	sub	sp, #20
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	401a      	ands	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	fb01 f303 	mul.w	r3, r1, r3
 80020b0:	431a      	orrs	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	605a      	str	r2, [r3, #4]
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <LL_GPIO_SetPinSpeed>:
{
 80020c2:	b480      	push	{r7}
 80020c4:	b089      	sub	sp, #36	; 0x24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	613b      	str	r3, [r7, #16]
  return result;
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2103      	movs	r1, #3
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	401a      	ands	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	61bb      	str	r3, [r7, #24]
  return result;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	431a      	orrs	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	609a      	str	r2, [r3, #8]
}
 8002114:	bf00      	nop
 8002116:	3724      	adds	r7, #36	; 0x24
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_GPIO_SetPinPull>:
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	613b      	str	r3, [r7, #16]
  return result;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2103      	movs	r1, #3
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	401a      	ands	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	61bb      	str	r3, [r7, #24]
  return result;
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	431a      	orrs	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	60da      	str	r2, [r3, #12]
}
 8002172:	bf00      	nop
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_GPIO_SetAFPin_0_7>:
{
 800217e:	b480      	push	{r7}
 8002180:	b089      	sub	sp, #36	; 0x24
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a1a      	ldr	r2, [r3, #32]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	613b      	str	r3, [r7, #16]
  return result;
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	210f      	movs	r1, #15
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	401a      	ands	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	61bb      	str	r3, [r7, #24]
  return result;
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ca:	431a      	orrs	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	621a      	str	r2, [r3, #32]
}
 80021d0:	bf00      	nop
 80021d2:	3724      	adds	r7, #36	; 0x24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_GPIO_SetAFPin_8_15>:
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	613b      	str	r3, [r7, #16]
  return result;
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	b2db      	uxtb	r3, r3
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	210f      	movs	r1, #15
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	401a      	ands	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	61bb      	str	r3, [r7, #24]
  return result;
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	431a      	orrs	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002232:	bf00      	nop
 8002234:	3724      	adds	r7, #36	; 0x24
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b088      	sub	sp, #32
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	613b      	str	r3, [r7, #16]
  return result;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002260:	e051      	b.n	8002306 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	2101      	movs	r1, #1
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d043      	beq.n	8002300 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d003      	beq.n	8002288 <LL_GPIO_Init+0x4a>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d10e      	bne.n	80022a6 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	461a      	mov	r2, r3
 800228e:	69b9      	ldr	r1, [r7, #24]
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ff16 	bl	80020c2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6819      	ldr	r1, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	461a      	mov	r2, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff fef6 	bl	8002092 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	461a      	mov	r2, r3
 80022ac:	69b9      	ldr	r1, [r7, #24]
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ff36 	bl	8002120 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d11a      	bne.n	80022f2 <LL_GPIO_Init+0xb4>
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	60bb      	str	r3, [r7, #8]
  return result;
 80022c8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b07      	cmp	r3, #7
 80022d2:	d807      	bhi.n	80022e4 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	461a      	mov	r2, r3
 80022da:	69b9      	ldr	r1, [r7, #24]
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff4e 	bl	800217e <LL_GPIO_SetAFPin_0_7>
 80022e2:	e006      	b.n	80022f2 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	461a      	mov	r2, r3
 80022ea:	69b9      	ldr	r1, [r7, #24]
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff75 	bl	80021dc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	461a      	mov	r2, r3
 80022f8:	69b9      	ldr	r1, [r7, #24]
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fe9a 	bl	8002034 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	3301      	adds	r3, #1
 8002304:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa22 f303 	lsr.w	r3, r2, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1a6      	bne.n	8002262 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3720      	adds	r7, #32
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <LL_I2C_Enable>:
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f043 0201 	orr.w	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	601a      	str	r2, [r3, #0]
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <LL_I2C_Disable>:
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 0201 	bic.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	601a      	str	r2, [r3, #0]
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <LL_I2C_ConfigFilters>:
{
 800235e:	b480      	push	{r7}
 8002360:	b085      	sub	sp, #20
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	0219      	lsls	r1, r3, #8
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	430b      	orrs	r3, r1
 800237a:	431a      	orrs	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	601a      	str	r2, [r3, #0]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_I2C_SetOwnAddress1>:
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80023a0:	f023 0307 	bic.w	r3, r3, #7
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	431a      	orrs	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	609a      	str	r2, [r3, #8]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_I2C_EnableOwnAddress1>:
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	609a      	str	r2, [r3, #8]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_I2C_DisableOwnAddress1>:
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	609a      	str	r2, [r3, #8]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_I2C_SetTiming>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	611a      	str	r2, [r3, #16]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_I2C_SetMode>:
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	601a      	str	r2, [r3, #0]
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_I2C_AcknowledgeNextData>:
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	605a      	str	r2, [r3, #4]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ff65 	bl	800233e <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6899      	ldr	r1, [r3, #8]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	461a      	mov	r2, r3
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ff6d 	bl	800235e <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffb6 	bl	80023fc <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff ff44 	bl	800231e <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffa0 	bl	80023dc <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	6919      	ldr	r1, [r3, #16]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	461a      	mov	r2, r3
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ff70 	bl	800238c <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ff81 	bl	80023bc <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4619      	mov	r1, r3
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ffa9 	bl	8002418 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	4619      	mov	r1, r3
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ffb6 	bl	800243e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <LL_InitTick+0x30>)
 80024f0:	3b01      	subs	r3, #1
 80024f2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <LL_InitTick+0x30>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024fa:	4b04      	ldr	r3, [pc, #16]	; (800250c <LL_InitTick+0x30>)
 80024fc:	2205      	movs	r2, #5
 80024fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000e010 	.word	0xe000e010

08002510 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002518:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ffdd 	bl	80024dc <LL_InitTick>
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002534:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <LL_mDelay+0x44>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800253a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002542:	d00c      	beq.n	800255e <LL_mDelay+0x32>
  {
    Delay++;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3301      	adds	r3, #1
 8002548:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800254a:	e008      	b.n	800255e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800254c:	4b08      	ldr	r3, [pc, #32]	; (8002570 <LL_mDelay+0x44>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <LL_mDelay+0x32>
    {
      Delay--;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f3      	bne.n	800254c <LL_mDelay+0x20>
    }
  }
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000e010 	.word	0xe000e010

08002574 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800257c:	4a04      	ldr	r2, [pc, #16]	; (8002590 <LL_SetSystemCoreClock+0x1c>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6013      	str	r3, [r2, #0]
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000000 	.word	0x20000000

08002594 <lis3mdl_read_byte>:
static uint8_t sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS;

uint64_t lastMovementTick = 0;

uint8_t lis3mdl_read_byte(uint8_t reg_addr)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af02      	add	r7, sp, #8
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, sLIS3MDLI2Caddress, 0));
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <lis3mdl_read_byte+0x30>)
 80025a4:	7819      	ldrb	r1, [r3, #0]
 80025a6:	79fa      	ldrb	r2, [r7, #7]
 80025a8:	f107 000f 	add.w	r0, r7, #15
 80025ac:	2300      	movs	r3, #0
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	460b      	mov	r3, r1
 80025b2:	2101      	movs	r1, #1
 80025b4:	f7ff f802 	bl	80015bc <i2c_master_read>
 80025b8:	4603      	mov	r3, r0
 80025ba:	781b      	ldrb	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000004 	.word	0x20000004

080025c8 <lis3mdl_write_byte>:

void lis3mdl_write_byte(uint8_t reg_addr, uint8_t value)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	460a      	mov	r2, r1
 80025d2:	71fb      	strb	r3, [r7, #7]
 80025d4:	4613      	mov	r3, r2
 80025d6:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, sLIS3MDLI2Caddress, 0);
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <lis3mdl_write_byte+0x28>)
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	79f9      	ldrb	r1, [r7, #7]
 80025de:	79b8      	ldrb	r0, [r7, #6]
 80025e0:	2300      	movs	r3, #0
 80025e2:	f7fe ffa7 	bl	8001534 <i2c_master_write>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000004 	.word	0x20000004

080025f4 <lis3mdl_readArray>:

void lis3mdl_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	70fb      	strb	r3, [r7, #3]
 8002600:	4613      	mov	r3, r2
 8002602:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, sLIS3MDLI2Caddress, 1);
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <lis3mdl_readArray+0x2c>)
 8002606:	7818      	ldrb	r0, [r3, #0]
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	78b9      	ldrb	r1, [r7, #2]
 800260c:	2301      	movs	r3, #1
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	4603      	mov	r3, r0
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7fe ffd2 	bl	80015bc <i2c_master_read>
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000004 	.word	0x20000004

08002624 <lis3mdl_get_mag>:

	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}

void lis3mdl_get_mag(float* x, float* y, float* z)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
	int16_t xx, yy, zz;

	uint8_t temp;

	//get current scale and use it for final calculation
    temp = lis3mdl_read_byte(LIS3MDL_ADDRESS_CTRL3);
 8002630:	2022      	movs	r0, #34	; 0x22
 8002632:	f7ff ffaf 	bl	8002594 <lis3mdl_read_byte>
 8002636:	4603      	mov	r3, r0
 8002638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	temp = temp >> 5;
 800263c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    temp &= 0x03;			//full scale bits exctracted
 8002646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	lis3mdl_readArray(data, LIS3MDL_ADDRESS_XL, 6);
 8002652:	f107 0314 	add.w	r3, r7, #20
 8002656:	2206      	movs	r2, #6
 8002658:	2128      	movs	r1, #40	; 0x28
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff ffca 	bl	80025f4 <lis3mdl_readArray>

	xx = ((uint16_t)data[1]) << 8 | data[0];
 8002660:	7d7b      	ldrb	r3, [r7, #21]
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	b21a      	sxth	r2, r3
 8002666:	7d3b      	ldrb	r3, [r7, #20]
 8002668:	b21b      	sxth	r3, r3
 800266a:	4313      	orrs	r3, r2
 800266c:	84bb      	strh	r3, [r7, #36]	; 0x24
	yy = ((uint16_t)data[3]) << 8 | data[2];
 800266e:	7dfb      	ldrb	r3, [r7, #23]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	b21a      	sxth	r2, r3
 8002674:	7dbb      	ldrb	r3, [r7, #22]
 8002676:	b21b      	sxth	r3, r3
 8002678:	4313      	orrs	r3, r2
 800267a:	847b      	strh	r3, [r7, #34]	; 0x22
	zz = ((uint16_t)data[5]) << 8 | data[4];
 800267c:	7e7b      	ldrb	r3, [r7, #25]
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	b21a      	sxth	r2, r3
 8002682:	7e3b      	ldrb	r3, [r7, #24]
 8002684:	b21b      	sxth	r3, r3
 8002686:	4313      	orrs	r3, r2
 8002688:	843b      	strh	r3, [r7, #32]

    const float range_scale = 6842.0f; //range +-4gaus
 800268a:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <lis3mdl_get_mag+0xc0>)
 800268c:	61fb      	str	r3, [r7, #28]

	*x = (float)(xx/range_scale);
 800268e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002692:	ee07 3a90 	vmov	s15, r3
 8002696:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800269a:	ed97 7a07 	vldr	s14, [r7, #28]
 800269e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)(yy/range_scale);
 80026a8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80026ac:	ee07 3a90 	vmov	s15, r3
 80026b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80026b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)(zz/range_scale);
 80026c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80026d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	edc3 7a00 	vstr	s15, [r3]
}
 80026dc:	bf00      	nop
 80026de:	3728      	adds	r7, #40	; 0x28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	45d5d000 	.word	0x45d5d000

080026e8 <lis3mdl_get_azimut>:

float  lis3mdl_get_azimut(){
 80026e8:	b5b0      	push	{r4, r5, r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0

	float mag[3];

	lis3mdl_get_mag(mag,mag+1,mag+2);
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	3304      	adds	r3, #4
 80026f2:	1d3a      	adds	r2, r7, #4
 80026f4:	3208      	adds	r2, #8
 80026f6:	1d38      	adds	r0, r7, #4
 80026f8:	4619      	mov	r1, r3
 80026fa:	f7ff ff93 	bl	8002624 <lis3mdl_get_mag>

	return atan2(mag[0],mag[1])*(180/3.14);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4618      	mov	r0, r3
 8002702:	f7fd ff21 	bl	8000548 <__aeabi_f2d>
 8002706:	4604      	mov	r4, r0
 8002708:	460d      	mov	r5, r1
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd ff1b 	bl	8000548 <__aeabi_f2d>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	ec43 2b11 	vmov	d1, r2, r3
 800271a:	ec45 4b10 	vmov	d0, r4, r5
 800271e:	f004 f897 	bl	8006850 <atan2>
 8002722:	ec51 0b10 	vmov	r0, r1, d0
 8002726:	a30a      	add	r3, pc, #40	; (adr r3, 8002750 <lis3mdl_get_azimut+0x68>)
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	f7fd ff64 	bl	80005f8 <__aeabi_dmul>
 8002730:	4603      	mov	r3, r0
 8002732:	460c      	mov	r4, r1
 8002734:	4618      	mov	r0, r3
 8002736:	4621      	mov	r1, r4
 8002738:	f7fe fa36 	bl	8000ba8 <__aeabi_d2f>
 800273c:	4603      	mov	r3, r0
 800273e:	ee07 3a90 	vmov	s15, r3
}
 8002742:	eeb0 0a67 	vmov.f32	s0, s15
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bdb0      	pop	{r4, r5, r7, pc}
 800274c:	f3af 8000 	nop.w
 8002750:	61d59ae7 	.word	0x61d59ae7
 8002754:	404ca994 	.word	0x404ca994

08002758 <lis3mdl_init>:

uint8_t lis3mdl_init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 800275e:	2301      	movs	r3, #1
 8002760:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8002762:	2064      	movs	r0, #100	; 0x64
 8002764:	f7ff fee2 	bl	800252c <LL_mDelay>

	uint8_t val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 8002768:	200f      	movs	r0, #15
 800276a:	f7ff ff13 	bl	8002594 <lis3mdl_read_byte>
 800276e:	4603      	mov	r3, r0
 8002770:	71bb      	strb	r3, [r7, #6]

	if(val == LIS3MDL_WHO_AM_I_VALUE)
 8002772:	79bb      	ldrb	r3, [r7, #6]
 8002774:	2b3d      	cmp	r3, #61	; 0x3d
 8002776:	d102      	bne.n	800277e <lis3mdl_init+0x26>
	{
		status = 1;
 8002778:	2301      	movs	r3, #1
 800277a:	71fb      	strb	r3, [r7, #7]
 800277c:	e011      	b.n	80027a2 <lis3mdl_init+0x4a>
	}
	else			//if the device is not found on one address, try another one
	{
		sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS_ALTERNATIVE;
 800277e:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <lis3mdl_init+0x8c>)
 8002780:	223c      	movs	r2, #60	; 0x3c
 8002782:	701a      	strb	r2, [r3, #0]
		val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 8002784:	200f      	movs	r0, #15
 8002786:	f7ff ff05 	bl	8002594 <lis3mdl_read_byte>
 800278a:	4603      	mov	r3, r0
 800278c:	71bb      	strb	r3, [r7, #6]
		if(val == LIS3MDL_WHO_AM_I_VALUE)
 800278e:	79bb      	ldrb	r3, [r7, #6]
 8002790:	2b3d      	cmp	r3, #61	; 0x3d
 8002792:	d102      	bne.n	800279a <lis3mdl_init+0x42>
		{
			status = 1;
 8002794:	2301      	movs	r3, #1
 8002796:	71fb      	strb	r3, [r7, #7]
 8002798:	e003      	b.n	80027a2 <lis3mdl_init+0x4a>
		}
		else
		{
			status = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	71fb      	strb	r3, [r7, #7]
			return status;
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	e01c      	b.n	80027dc <lis3mdl_init+0x84>
		}
	}

	//acc device init

	uint8_t ctrl1 = LIS3MDL_CTRL1_OM_UHP | LIS3MDL_CTRL1_DO_80HZ | (1 << 7);
 80027a2:	23fc      	movs	r3, #252	; 0xfc
 80027a4:	717b      	strb	r3, [r7, #5]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL1, ctrl1);
 80027a6:	797b      	ldrb	r3, [r7, #5]
 80027a8:	4619      	mov	r1, r3
 80027aa:	2020      	movs	r0, #32
 80027ac:	f7ff ff0c 	bl	80025c8 <lis3mdl_write_byte>

	uint8_t ctrl2 = LIS3MDL_CTRL2_FS_4GAUS;
 80027b0:	2300      	movs	r3, #0
 80027b2:	713b      	strb	r3, [r7, #4]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL2, ctrl2);
 80027b4:	793b      	ldrb	r3, [r7, #4]
 80027b6:	4619      	mov	r1, r3
 80027b8:	2021      	movs	r0, #33	; 0x21
 80027ba:	f7ff ff05 	bl	80025c8 <lis3mdl_write_byte>

	uint8_t ctrl3 = LIS3MDL_CTRL3_MD_CONTINUES;
 80027be:	2300      	movs	r3, #0
 80027c0:	70fb      	strb	r3, [r7, #3]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL3, ctrl3);
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	4619      	mov	r1, r3
 80027c6:	2022      	movs	r0, #34	; 0x22
 80027c8:	f7ff fefe 	bl	80025c8 <lis3mdl_write_byte>

	uint8_t ctrl4 = LIS3MDL_CTRL4_OMZ_UHP;
 80027cc:	230c      	movs	r3, #12
 80027ce:	70bb      	strb	r3, [r7, #2]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL4, ctrl4);
 80027d0:	78bb      	ldrb	r3, [r7, #2]
 80027d2:	4619      	mov	r1, r3
 80027d4:	2023      	movs	r0, #35	; 0x23
 80027d6:	f7ff fef7 	bl	80025c8 <lis3mdl_write_byte>

	return status;
 80027da:	79fb      	ldrb	r3, [r7, #7]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000004 	.word	0x20000004

080027e8 <LL_GPIO_SetOutputPin>:
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	619a      	str	r2, [r3, #24]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <state_init>:

enum move {LEFT,RIGHT};
enum move moving = RIGHT;


uint8_t state_init(){
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0

	button_state = MAG;
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <state_init+0x18>)
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]

	return 1;
 800280e:	2301      	movs	r3, #1
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20000210 	.word	0x20000210

08002820 <change_state>:


void change_state(void){//tuto funkciu pouzi v interapte na tlacidlo
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0


	if(button_state==MAG){
 8002824:	4b15      	ldr	r3, [pc, #84]	; (800287c <change_state+0x5c>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d103      	bne.n	8002834 <change_state+0x14>
		button_state=TEMP;
 800282c:	4b13      	ldr	r3, [pc, #76]	; (800287c <change_state+0x5c>)
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
	}else if(button_state==ALT){
		button_state=MAG;
	}


}
 8002832:	e01e      	b.n	8002872 <change_state+0x52>
	}else if(button_state==TEMP){
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <change_state+0x5c>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d103      	bne.n	8002844 <change_state+0x24>
		button_state=HUM;
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <change_state+0x5c>)
 800283e:	2202      	movs	r2, #2
 8002840:	701a      	strb	r2, [r3, #0]
}
 8002842:	e016      	b.n	8002872 <change_state+0x52>
	}else if(button_state==HUM){
 8002844:	4b0d      	ldr	r3, [pc, #52]	; (800287c <change_state+0x5c>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d103      	bne.n	8002854 <change_state+0x34>
		button_state=BAR;
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <change_state+0x5c>)
 800284e:	2203      	movs	r2, #3
 8002850:	701a      	strb	r2, [r3, #0]
}
 8002852:	e00e      	b.n	8002872 <change_state+0x52>
	}else if(button_state==BAR){
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <change_state+0x5c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b03      	cmp	r3, #3
 800285a:	d103      	bne.n	8002864 <change_state+0x44>
		button_state=ALT;
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <change_state+0x5c>)
 800285e:	2204      	movs	r2, #4
 8002860:	701a      	strb	r2, [r3, #0]
}
 8002862:	e006      	b.n	8002872 <change_state+0x52>
	}else if(button_state==ALT){
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <change_state+0x5c>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b04      	cmp	r3, #4
 800286a:	d102      	bne.n	8002872 <change_state+0x52>
		button_state=MAG;
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <change_state+0x5c>)
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
}
 8002872:	bf00      	nop
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	20000210 	.word	0x20000210

08002880 <processToDisplay>:



void processToDisplay(void){
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b08d      	sub	sp, #52	; 0x34
 8002884:	af02      	add	r7, sp, #8
	static uint8_t position2 = 0;
	static uint8_t position3 = 1;
	static uint8_t position4 = 2;


	if(start){
 8002886:	4b82      	ldr	r3, [pc, #520]	; (8002a90 <processToDisplay+0x210>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d02c      	beq.n	80028e8 <processToDisplay+0x68>

		size_t needed = snprintf(NULL, 0, "MAG_%2.2f",lis3mdl_get_azimut());
 800288e:	f7ff ff2b 	bl	80026e8 <lis3mdl_get_azimut>
 8002892:	ee10 3a10 	vmov	r3, s0
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fe56 	bl	8000548 <__aeabi_f2d>
 800289c:	4603      	mov	r3, r0
 800289e:	460c      	mov	r4, r1
 80028a0:	e9cd 3400 	strd	r3, r4, [sp]
 80028a4:	4a7b      	ldr	r2, [pc, #492]	; (8002a94 <processToDisplay+0x214>)
 80028a6:	2100      	movs	r1, #0
 80028a8:	2000      	movs	r0, #0
 80028aa:	f002 fc7d 	bl	80051a8 <sniprintf>
 80028ae:	4603      	mov	r3, r0
 80028b0:	61fb      	str	r3, [r7, #28]
		text = (char*)malloc((needed+1)*sizeof(char));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3301      	adds	r3, #1
 80028b6:	4618      	mov	r0, r3
 80028b8:	f001 ff4a 	bl	8004750 <malloc>
 80028bc:	4603      	mov	r3, r0
 80028be:	461a      	mov	r2, r3
 80028c0:	4b75      	ldr	r3, [pc, #468]	; (8002a98 <processToDisplay+0x218>)
 80028c2:	601a      	str	r2, [r3, #0]
		sprintf(text, "MAG_%2.2f",lis3mdl_get_azimut());
 80028c4:	4b74      	ldr	r3, [pc, #464]	; (8002a98 <processToDisplay+0x218>)
 80028c6:	681c      	ldr	r4, [r3, #0]
 80028c8:	f7ff ff0e 	bl	80026e8 <lis3mdl_get_azimut>
 80028cc:	ee10 3a10 	vmov	r3, s0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fe39 	bl	8000548 <__aeabi_f2d>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	496e      	ldr	r1, [pc, #440]	; (8002a94 <processToDisplay+0x214>)
 80028dc:	4620      	mov	r0, r4
 80028de:	f002 fc97 	bl	8005210 <siprintf>
		len = needed+1;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3301      	adds	r3, #1
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
	}




	if(state_changed){
 80028e8:	4b6c      	ldr	r3, [pc, #432]	; (8002a9c <processToDisplay+0x21c>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8126 	beq.w	8002b3e <processToDisplay+0x2be>

		if(button_state == ALT){
 80028f2:	4b6b      	ldr	r3, [pc, #428]	; (8002aa0 <processToDisplay+0x220>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d13b      	bne.n	8002972 <processToDisplay+0xf2>

			size_t needed = snprintf(NULL, 0, "ALT_%4.2f",LBS25HB_calculate_altitude(LBS25HB_get_pres()));
 80028fa:	f001 fe91 	bl	8004620 <LBS25HB_get_pres>
 80028fe:	eef0 7a40 	vmov.f32	s15, s0
 8002902:	eeb0 0a67 	vmov.f32	s0, s15
 8002906:	f001 feb3 	bl	8004670 <LBS25HB_calculate_altitude>
 800290a:	ee10 3a10 	vmov	r3, s0
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fe1a 	bl	8000548 <__aeabi_f2d>
 8002914:	4603      	mov	r3, r0
 8002916:	460c      	mov	r4, r1
 8002918:	e9cd 3400 	strd	r3, r4, [sp]
 800291c:	4a61      	ldr	r2, [pc, #388]	; (8002aa4 <processToDisplay+0x224>)
 800291e:	2100      	movs	r1, #0
 8002920:	2000      	movs	r0, #0
 8002922:	f002 fc41 	bl	80051a8 <sniprintf>
 8002926:	4603      	mov	r3, r0
 8002928:	60bb      	str	r3, [r7, #8]
			text = (char*)realloc(text,needed+1);
 800292a:	4b5b      	ldr	r3, [pc, #364]	; (8002a98 <processToDisplay+0x218>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	3301      	adds	r3, #1
 8002932:	4619      	mov	r1, r3
 8002934:	4610      	mov	r0, r2
 8002936:	f002 fc1f 	bl	8005178 <realloc>
 800293a:	4602      	mov	r2, r0
 800293c:	4b56      	ldr	r3, [pc, #344]	; (8002a98 <processToDisplay+0x218>)
 800293e:	601a      	str	r2, [r3, #0]
			sprintf(text, "ALT_%4.2f",LBS25HB_calculate_altitude(LBS25HB_get_pres()));
 8002940:	4b55      	ldr	r3, [pc, #340]	; (8002a98 <processToDisplay+0x218>)
 8002942:	681c      	ldr	r4, [r3, #0]
 8002944:	f001 fe6c 	bl	8004620 <LBS25HB_get_pres>
 8002948:	eef0 7a40 	vmov.f32	s15, s0
 800294c:	eeb0 0a67 	vmov.f32	s0, s15
 8002950:	f001 fe8e 	bl	8004670 <LBS25HB_calculate_altitude>
 8002954:	ee10 3a10 	vmov	r3, s0
 8002958:	4618      	mov	r0, r3
 800295a:	f7fd fdf5 	bl	8000548 <__aeabi_f2d>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4950      	ldr	r1, [pc, #320]	; (8002aa4 <processToDisplay+0x224>)
 8002964:	4620      	mov	r0, r4
 8002966:	f002 fc53 	bl	8005210 <siprintf>
			len = needed+1;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	3301      	adds	r3, #1
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
 8002970:	e0d3      	b.n	8002b1a <processToDisplay+0x29a>

		} else if(button_state == BAR){
 8002972:	4b4b      	ldr	r3, [pc, #300]	; (8002aa0 <processToDisplay+0x220>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b03      	cmp	r3, #3
 8002978:	d12f      	bne.n	80029da <processToDisplay+0x15a>

			size_t needed = snprintf(NULL, 0, "BAR_%4.2f",LBS25HB_get_pres());
 800297a:	f001 fe51 	bl	8004620 <LBS25HB_get_pres>
 800297e:	ee10 3a10 	vmov	r3, s0
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fde0 	bl	8000548 <__aeabi_f2d>
 8002988:	4603      	mov	r3, r0
 800298a:	460c      	mov	r4, r1
 800298c:	e9cd 3400 	strd	r3, r4, [sp]
 8002990:	4a45      	ldr	r2, [pc, #276]	; (8002aa8 <processToDisplay+0x228>)
 8002992:	2100      	movs	r1, #0
 8002994:	2000      	movs	r0, #0
 8002996:	f002 fc07 	bl	80051a8 <sniprintf>
 800299a:	4603      	mov	r3, r0
 800299c:	60fb      	str	r3, [r7, #12]
			text = (char*)realloc(text,needed+1);
 800299e:	4b3e      	ldr	r3, [pc, #248]	; (8002a98 <processToDisplay+0x218>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3301      	adds	r3, #1
 80029a6:	4619      	mov	r1, r3
 80029a8:	4610      	mov	r0, r2
 80029aa:	f002 fbe5 	bl	8005178 <realloc>
 80029ae:	4602      	mov	r2, r0
 80029b0:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <processToDisplay+0x218>)
 80029b2:	601a      	str	r2, [r3, #0]
			sprintf(text, "BAR_%4.2f",LBS25HB_get_pres());
 80029b4:	4b38      	ldr	r3, [pc, #224]	; (8002a98 <processToDisplay+0x218>)
 80029b6:	681c      	ldr	r4, [r3, #0]
 80029b8:	f001 fe32 	bl	8004620 <LBS25HB_get_pres>
 80029bc:	ee10 3a10 	vmov	r3, s0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fdc1 	bl	8000548 <__aeabi_f2d>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4937      	ldr	r1, [pc, #220]	; (8002aa8 <processToDisplay+0x228>)
 80029cc:	4620      	mov	r0, r4
 80029ce:	f002 fc1f 	bl	8005210 <siprintf>
			len = needed+1;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	3301      	adds	r3, #1
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
 80029d8:	e09f      	b.n	8002b1a <processToDisplay+0x29a>

		} else if(button_state == TEMP){
 80029da:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <processToDisplay+0x220>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d12f      	bne.n	8002a42 <processToDisplay+0x1c2>


			size_t needed = snprintf(NULL, 0, "TEMP_%2.1f",HTS221_get_temp());
 80029e2:	f001 fc61 	bl	80042a8 <HTS221_get_temp>
 80029e6:	ee10 3a10 	vmov	r3, s0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fd fdac 	bl	8000548 <__aeabi_f2d>
 80029f0:	4603      	mov	r3, r0
 80029f2:	460c      	mov	r4, r1
 80029f4:	e9cd 3400 	strd	r3, r4, [sp]
 80029f8:	4a2c      	ldr	r2, [pc, #176]	; (8002aac <processToDisplay+0x22c>)
 80029fa:	2100      	movs	r1, #0
 80029fc:	2000      	movs	r0, #0
 80029fe:	f002 fbd3 	bl	80051a8 <sniprintf>
 8002a02:	4603      	mov	r3, r0
 8002a04:	613b      	str	r3, [r7, #16]
			text = (char*)realloc(text,needed+1);
 8002a06:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <processToDisplay+0x218>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4610      	mov	r0, r2
 8002a12:	f002 fbb1 	bl	8005178 <realloc>
 8002a16:	4602      	mov	r2, r0
 8002a18:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <processToDisplay+0x218>)
 8002a1a:	601a      	str	r2, [r3, #0]
			sprintf(text, "TEMP_%2.1f",HTS221_get_temp());
 8002a1c:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <processToDisplay+0x218>)
 8002a1e:	681c      	ldr	r4, [r3, #0]
 8002a20:	f001 fc42 	bl	80042a8 <HTS221_get_temp>
 8002a24:	ee10 3a10 	vmov	r3, s0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fd8d 	bl	8000548 <__aeabi_f2d>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	491e      	ldr	r1, [pc, #120]	; (8002aac <processToDisplay+0x22c>)
 8002a34:	4620      	mov	r0, r4
 8002a36:	f002 fbeb 	bl	8005210 <siprintf>
			len = needed+1;
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a40:	e06b      	b.n	8002b1a <processToDisplay+0x29a>

		} else if(button_state == HUM){
 8002a42:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <processToDisplay+0x220>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d134      	bne.n	8002ab4 <processToDisplay+0x234>


			size_t needed = snprintf(NULL, 0, "HUM_%2d",HTS221_get_relhum());
 8002a4a:	f001 fcf3 	bl	8004434 <HTS221_get_relhum>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <processToDisplay+0x230>)
 8002a52:	2100      	movs	r1, #0
 8002a54:	2000      	movs	r0, #0
 8002a56:	f002 fba7 	bl	80051a8 <sniprintf>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	617b      	str	r3, [r7, #20]
			text = (char*)realloc(text,needed+1);
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <processToDisplay+0x218>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	3301      	adds	r3, #1
 8002a66:	4619      	mov	r1, r3
 8002a68:	4610      	mov	r0, r2
 8002a6a:	f002 fb85 	bl	8005178 <realloc>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <processToDisplay+0x218>)
 8002a72:	601a      	str	r2, [r3, #0]
			sprintf(text, "HUM_%2d",HTS221_get_relhum());
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <processToDisplay+0x218>)
 8002a76:	681c      	ldr	r4, [r3, #0]
 8002a78:	f001 fcdc 	bl	8004434 <HTS221_get_relhum>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	490b      	ldr	r1, [pc, #44]	; (8002ab0 <processToDisplay+0x230>)
 8002a82:	4620      	mov	r0, r4
 8002a84:	f002 fbc4 	bl	8005210 <siprintf>
			len = needed+1;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8e:	e044      	b.n	8002b1a <processToDisplay+0x29a>
 8002a90:	20000006 	.word	0x20000006
 8002a94:	08007e20 	.word	0x08007e20
 8002a98:	20000218 	.word	0x20000218
 8002a9c:	20000204 	.word	0x20000204
 8002aa0:	20000210 	.word	0x20000210
 8002aa4:	08007e2c 	.word	0x08007e2c
 8002aa8:	08007e38 	.word	0x08007e38
 8002aac:	08007e44 	.word	0x08007e44
 8002ab0:	08007e50 	.word	0x08007e50

		}else if(button_state == MAG){
 8002ab4:	4ba3      	ldr	r3, [pc, #652]	; (8002d44 <processToDisplay+0x4c4>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d12e      	bne.n	8002b1a <processToDisplay+0x29a>

			size_t needed = snprintf(NULL, 0, "MAG_%2.2f",lis3mdl_get_azimut());
 8002abc:	f7ff fe14 	bl	80026e8 <lis3mdl_get_azimut>
 8002ac0:	ee10 3a10 	vmov	r3, s0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fd3f 	bl	8000548 <__aeabi_f2d>
 8002aca:	4603      	mov	r3, r0
 8002acc:	460c      	mov	r4, r1
 8002ace:	e9cd 3400 	strd	r3, r4, [sp]
 8002ad2:	4a9d      	ldr	r2, [pc, #628]	; (8002d48 <processToDisplay+0x4c8>)
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f002 fb66 	bl	80051a8 <sniprintf>
 8002adc:	4603      	mov	r3, r0
 8002ade:	61bb      	str	r3, [r7, #24]
			text = (char*)realloc(text,needed+1);
 8002ae0:	4b9a      	ldr	r3, [pc, #616]	; (8002d4c <processToDisplay+0x4cc>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4610      	mov	r0, r2
 8002aec:	f002 fb44 	bl	8005178 <realloc>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b96      	ldr	r3, [pc, #600]	; (8002d4c <processToDisplay+0x4cc>)
 8002af4:	601a      	str	r2, [r3, #0]
			sprintf(text, "MAG_%2.2f",lis3mdl_get_azimut());
 8002af6:	4b95      	ldr	r3, [pc, #596]	; (8002d4c <processToDisplay+0x4cc>)
 8002af8:	681c      	ldr	r4, [r3, #0]
 8002afa:	f7ff fdf5 	bl	80026e8 <lis3mdl_get_azimut>
 8002afe:	ee10 3a10 	vmov	r3, s0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fd fd20 	bl	8000548 <__aeabi_f2d>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	498e      	ldr	r1, [pc, #568]	; (8002d48 <processToDisplay+0x4c8>)
 8002b0e:	4620      	mov	r0, r4
 8002b10:	f002 fb7e 	bl	8005210 <siprintf>
			len = needed+1;
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	3301      	adds	r3, #1
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24

		}

		state_changed = false;
 8002b1a:	4b8d      	ldr	r3, [pc, #564]	; (8002d50 <processToDisplay+0x4d0>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]

		position1 = -1;
 8002b20:	4b8c      	ldr	r3, [pc, #560]	; (8002d54 <processToDisplay+0x4d4>)
 8002b22:	22ff      	movs	r2, #255	; 0xff
 8002b24:	701a      	strb	r2, [r3, #0]
		position2 = 0;
 8002b26:	4b8c      	ldr	r3, [pc, #560]	; (8002d58 <processToDisplay+0x4d8>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
		position3 = 1;
 8002b2c:	4b8b      	ldr	r3, [pc, #556]	; (8002d5c <processToDisplay+0x4dc>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	701a      	strb	r2, [r3, #0]
		position4 = 2;
 8002b32:	4b8b      	ldr	r3, [pc, #556]	; (8002d60 <processToDisplay+0x4e0>)
 8002b34:	2202      	movs	r2, #2
 8002b36:	701a      	strb	r2, [r3, #0]

		moving = RIGHT;
 8002b38:	4b8a      	ldr	r3, [pc, #552]	; (8002d64 <processToDisplay+0x4e4>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]





	bool activeDP[] = {false,false,false,false};
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]

	if(moving == RIGHT && start == false){
 8002b42:	4b88      	ldr	r3, [pc, #544]	; (8002d64 <processToDisplay+0x4e4>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	f040 80af 	bne.w	8002caa <processToDisplay+0x42a>
 8002b4c:	4b86      	ldr	r3, [pc, #536]	; (8002d68 <processToDisplay+0x4e8>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	f083 0301 	eor.w	r3, r3, #1
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80a7 	beq.w	8002caa <processToDisplay+0x42a>

		position1+=1;
 8002b5c:	4b7d      	ldr	r3, [pc, #500]	; (8002d54 <processToDisplay+0x4d4>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	3301      	adds	r3, #1
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	4b7b      	ldr	r3, [pc, #492]	; (8002d54 <processToDisplay+0x4d4>)
 8002b66:	701a      	strb	r2, [r3, #0]
		position2+=1;
 8002b68:	4b7b      	ldr	r3, [pc, #492]	; (8002d58 <processToDisplay+0x4d8>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	4b79      	ldr	r3, [pc, #484]	; (8002d58 <processToDisplay+0x4d8>)
 8002b72:	701a      	strb	r2, [r3, #0]
		position3+=1;
 8002b74:	4b79      	ldr	r3, [pc, #484]	; (8002d5c <processToDisplay+0x4dc>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	4b77      	ldr	r3, [pc, #476]	; (8002d5c <processToDisplay+0x4dc>)
 8002b7e:	701a      	strb	r2, [r3, #0]
		position4+=1;
 8002b80:	4b77      	ldr	r3, [pc, #476]	; (8002d60 <processToDisplay+0x4e0>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	3301      	adds	r3, #1
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	4b75      	ldr	r3, [pc, #468]	; (8002d60 <processToDisplay+0x4e0>)
 8002b8a:	701a      	strb	r2, [r3, #0]

		if(position4 < len-1){
 8002b8c:	4b74      	ldr	r3, [pc, #464]	; (8002d60 <processToDisplay+0x4e0>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	3b01      	subs	r3, #1
 8002b96:	429a      	cmp	r2, r3
 8002b98:	da2b      	bge.n	8002bf2 <processToDisplay+0x372>

			if(text[position4+1]=='.'){
 8002b9a:	4b6c      	ldr	r3, [pc, #432]	; (8002d4c <processToDisplay+0x4cc>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4b70      	ldr	r3, [pc, #448]	; (8002d60 <processToDisplay+0x4e0>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b2e      	cmp	r3, #46	; 0x2e
 8002baa:	d101      	bne.n	8002bb0 <processToDisplay+0x330>

				activeDP[3]=true;
 8002bac:	2301      	movs	r3, #1
 8002bae:	71fb      	strb	r3, [r7, #7]
			}

			if(text[position3+1]=='.'){
 8002bb0:	4b66      	ldr	r3, [pc, #408]	; (8002d4c <processToDisplay+0x4cc>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b69      	ldr	r3, [pc, #420]	; (8002d5c <processToDisplay+0x4dc>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b2e      	cmp	r3, #46	; 0x2e
 8002bc0:	d101      	bne.n	8002bc6 <processToDisplay+0x346>

				activeDP[2]=true;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	71bb      	strb	r3, [r7, #6]

			}

			if(text[position2+1]=='.'){
 8002bc6:	4b61      	ldr	r3, [pc, #388]	; (8002d4c <processToDisplay+0x4cc>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	4b63      	ldr	r3, [pc, #396]	; (8002d58 <processToDisplay+0x4d8>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b2e      	cmp	r3, #46	; 0x2e
 8002bd6:	d101      	bne.n	8002bdc <processToDisplay+0x35c>

				activeDP[1]=true;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	717b      	strb	r3, [r7, #5]

			}

			if(text[position1+1]=='.'){
 8002bdc:	4b5b      	ldr	r3, [pc, #364]	; (8002d4c <processToDisplay+0x4cc>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b5c      	ldr	r3, [pc, #368]	; (8002d54 <processToDisplay+0x4d4>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	4413      	add	r3, r2
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b2e      	cmp	r3, #46	; 0x2e
 8002bec:	d101      	bne.n	8002bf2 <processToDisplay+0x372>

				activeDP[0]=true;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	713b      	strb	r3, [r7, #4]
		}




		if(text[position1]=='.'){
 8002bf2:	4b56      	ldr	r3, [pc, #344]	; (8002d4c <processToDisplay+0x4cc>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a57      	ldr	r2, [pc, #348]	; (8002d54 <processToDisplay+0x4d4>)
 8002bf8:	7812      	ldrb	r2, [r2, #0]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b2e      	cmp	r3, #46	; 0x2e
 8002c00:	d117      	bne.n	8002c32 <processToDisplay+0x3b2>

			position1+=1;
 8002c02:	4b54      	ldr	r3, [pc, #336]	; (8002d54 <processToDisplay+0x4d4>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	3301      	adds	r3, #1
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4b52      	ldr	r3, [pc, #328]	; (8002d54 <processToDisplay+0x4d4>)
 8002c0c:	701a      	strb	r2, [r3, #0]
			position2+=1;
 8002c0e:	4b52      	ldr	r3, [pc, #328]	; (8002d58 <processToDisplay+0x4d8>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	3301      	adds	r3, #1
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	4b50      	ldr	r3, [pc, #320]	; (8002d58 <processToDisplay+0x4d8>)
 8002c18:	701a      	strb	r2, [r3, #0]
			position3+=1;
 8002c1a:	4b50      	ldr	r3, [pc, #320]	; (8002d5c <processToDisplay+0x4dc>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4b4e      	ldr	r3, [pc, #312]	; (8002d5c <processToDisplay+0x4dc>)
 8002c24:	701a      	strb	r2, [r3, #0]
			position4+=1;
 8002c26:	4b4e      	ldr	r3, [pc, #312]	; (8002d60 <processToDisplay+0x4e0>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	4b4c      	ldr	r3, [pc, #304]	; (8002d60 <processToDisplay+0x4e0>)
 8002c30:	701a      	strb	r2, [r3, #0]

		}

		if(text[position2]=='.'){
 8002c32:	4b46      	ldr	r3, [pc, #280]	; (8002d4c <processToDisplay+0x4cc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a48      	ldr	r2, [pc, #288]	; (8002d58 <processToDisplay+0x4d8>)
 8002c38:	7812      	ldrb	r2, [r2, #0]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8002c40:	d111      	bne.n	8002c66 <processToDisplay+0x3e6>

			position2+=1;
 8002c42:	4b45      	ldr	r3, [pc, #276]	; (8002d58 <processToDisplay+0x4d8>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	3301      	adds	r3, #1
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4b43      	ldr	r3, [pc, #268]	; (8002d58 <processToDisplay+0x4d8>)
 8002c4c:	701a      	strb	r2, [r3, #0]
			position3+=1;
 8002c4e:	4b43      	ldr	r3, [pc, #268]	; (8002d5c <processToDisplay+0x4dc>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4b41      	ldr	r3, [pc, #260]	; (8002d5c <processToDisplay+0x4dc>)
 8002c58:	701a      	strb	r2, [r3, #0]
			position4+=1;
 8002c5a:	4b41      	ldr	r3, [pc, #260]	; (8002d60 <processToDisplay+0x4e0>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4b3f      	ldr	r3, [pc, #252]	; (8002d60 <processToDisplay+0x4e0>)
 8002c64:	701a      	strb	r2, [r3, #0]
		}

		if(text[position3]=='.'){
 8002c66:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <processToDisplay+0x4cc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a3c      	ldr	r2, [pc, #240]	; (8002d5c <processToDisplay+0x4dc>)
 8002c6c:	7812      	ldrb	r2, [r2, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b2e      	cmp	r3, #46	; 0x2e
 8002c74:	d10b      	bne.n	8002c8e <processToDisplay+0x40e>


			position3+=1;
 8002c76:	4b39      	ldr	r3, [pc, #228]	; (8002d5c <processToDisplay+0x4dc>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	4b37      	ldr	r3, [pc, #220]	; (8002d5c <processToDisplay+0x4dc>)
 8002c80:	701a      	strb	r2, [r3, #0]
			position4+=1;
 8002c82:	4b37      	ldr	r3, [pc, #220]	; (8002d60 <processToDisplay+0x4e0>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	3301      	adds	r3, #1
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4b35      	ldr	r3, [pc, #212]	; (8002d60 <processToDisplay+0x4e0>)
 8002c8c:	701a      	strb	r2, [r3, #0]
		}


		if(text[position4]=='.'){
 8002c8e:	4b2f      	ldr	r3, [pc, #188]	; (8002d4c <processToDisplay+0x4cc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a33      	ldr	r2, [pc, #204]	; (8002d60 <processToDisplay+0x4e0>)
 8002c94:	7812      	ldrb	r2, [r2, #0]
 8002c96:	4413      	add	r3, r2
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b2e      	cmp	r3, #46	; 0x2e
 8002c9c:	d105      	bne.n	8002caa <processToDisplay+0x42a>

			position4+=1;
 8002c9e:	4b30      	ldr	r3, [pc, #192]	; (8002d60 <processToDisplay+0x4e0>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	4b2e      	ldr	r3, [pc, #184]	; (8002d60 <processToDisplay+0x4e0>)
 8002ca8:	701a      	strb	r2, [r3, #0]
		}


	}

	if(moving == LEFT && start == false){
 8002caa:	4b2e      	ldr	r3, [pc, #184]	; (8002d64 <processToDisplay+0x4e4>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f040 80c1 	bne.w	8002e36 <processToDisplay+0x5b6>
 8002cb4:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <processToDisplay+0x4e8>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	f083 0301 	eor.w	r3, r3, #1
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 80b9 	beq.w	8002e36 <processToDisplay+0x5b6>



		if(position1 > 0){
 8002cc4:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <processToDisplay+0x4d4>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d02b      	beq.n	8002d24 <processToDisplay+0x4a4>

			if(text[position4-1]=='.'){
 8002ccc:	4b1f      	ldr	r3, [pc, #124]	; (8002d4c <processToDisplay+0x4cc>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <processToDisplay+0x4e0>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	4413      	add	r3, r2
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b2e      	cmp	r3, #46	; 0x2e
 8002cdc:	d101      	bne.n	8002ce2 <processToDisplay+0x462>

				activeDP[3]=true;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	71fb      	strb	r3, [r7, #7]
			}

			if(text[position3-1]=='.'){
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <processToDisplay+0x4cc>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <processToDisplay+0x4dc>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	4413      	add	r3, r2
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8002cf2:	d101      	bne.n	8002cf8 <processToDisplay+0x478>

				activeDP[2]=true;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	71bb      	strb	r3, [r7, #6]

			}

			if(text[position2-1]=='.'){
 8002cf8:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <processToDisplay+0x4cc>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <processToDisplay+0x4d8>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b2e      	cmp	r3, #46	; 0x2e
 8002d08:	d101      	bne.n	8002d0e <processToDisplay+0x48e>

				activeDP[1]=true;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	717b      	strb	r3, [r7, #5]

			}

			if(text[position1-1]=='.'){
 8002d0e:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <processToDisplay+0x4cc>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <processToDisplay+0x4d4>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b2e      	cmp	r3, #46	; 0x2e
 8002d1e:	d101      	bne.n	8002d24 <processToDisplay+0x4a4>

				activeDP[0]=true;
 8002d20:	2301      	movs	r3, #1
 8002d22:	713b      	strb	r3, [r7, #4]

			}

		}

		position1-=1;
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <processToDisplay+0x4d4>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <processToDisplay+0x4d4>)
 8002d2e:	701a      	strb	r2, [r3, #0]
		position2-=1;
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <processToDisplay+0x4d8>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <processToDisplay+0x4d8>)
 8002d3a:	701a      	strb	r2, [r3, #0]
		position3-=1;
 8002d3c:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <processToDisplay+0x4dc>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	e013      	b.n	8002d6c <processToDisplay+0x4ec>
 8002d44:	20000210 	.word	0x20000210
 8002d48:	08007e20 	.word	0x08007e20
 8002d4c:	20000218 	.word	0x20000218
 8002d50:	20000204 	.word	0x20000204
 8002d54:	20000007 	.word	0x20000007
 8002d58:	20000205 	.word	0x20000205
 8002d5c:	20000008 	.word	0x20000008
 8002d60:	20000009 	.word	0x20000009
 8002d64:	20000005 	.word	0x20000005
 8002d68:	20000006 	.word	0x20000006
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4b68      	ldr	r3, [pc, #416]	; (8002f10 <processToDisplay+0x690>)
 8002d70:	701a      	strb	r2, [r3, #0]
		position4-=1;
 8002d72:	4b68      	ldr	r3, [pc, #416]	; (8002f14 <processToDisplay+0x694>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4b66      	ldr	r3, [pc, #408]	; (8002f14 <processToDisplay+0x694>)
 8002d7c:	701a      	strb	r2, [r3, #0]

		if(text[position1]=='.'){
 8002d7e:	4b66      	ldr	r3, [pc, #408]	; (8002f18 <processToDisplay+0x698>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a66      	ldr	r2, [pc, #408]	; (8002f1c <processToDisplay+0x69c>)
 8002d84:	7812      	ldrb	r2, [r2, #0]
 8002d86:	4413      	add	r3, r2
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b2e      	cmp	r3, #46	; 0x2e
 8002d8c:	d117      	bne.n	8002dbe <processToDisplay+0x53e>

			position1-=1;
 8002d8e:	4b63      	ldr	r3, [pc, #396]	; (8002f1c <processToDisplay+0x69c>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4b61      	ldr	r3, [pc, #388]	; (8002f1c <processToDisplay+0x69c>)
 8002d98:	701a      	strb	r2, [r3, #0]
			position2-=1;
 8002d9a:	4b61      	ldr	r3, [pc, #388]	; (8002f20 <processToDisplay+0x6a0>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	4b5f      	ldr	r3, [pc, #380]	; (8002f20 <processToDisplay+0x6a0>)
 8002da4:	701a      	strb	r2, [r3, #0]
			position3-=1;
 8002da6:	4b5a      	ldr	r3, [pc, #360]	; (8002f10 <processToDisplay+0x690>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	4b58      	ldr	r3, [pc, #352]	; (8002f10 <processToDisplay+0x690>)
 8002db0:	701a      	strb	r2, [r3, #0]
			position4-=1;
 8002db2:	4b58      	ldr	r3, [pc, #352]	; (8002f14 <processToDisplay+0x694>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	4b56      	ldr	r3, [pc, #344]	; (8002f14 <processToDisplay+0x694>)
 8002dbc:	701a      	strb	r2, [r3, #0]

		}

		if(text[position2]=='.'){
 8002dbe:	4b56      	ldr	r3, [pc, #344]	; (8002f18 <processToDisplay+0x698>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a57      	ldr	r2, [pc, #348]	; (8002f20 <processToDisplay+0x6a0>)
 8002dc4:	7812      	ldrb	r2, [r2, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b2e      	cmp	r3, #46	; 0x2e
 8002dcc:	d111      	bne.n	8002df2 <processToDisplay+0x572>

			position2-=1;
 8002dce:	4b54      	ldr	r3, [pc, #336]	; (8002f20 <processToDisplay+0x6a0>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4b52      	ldr	r3, [pc, #328]	; (8002f20 <processToDisplay+0x6a0>)
 8002dd8:	701a      	strb	r2, [r3, #0]
			position3-=1;
 8002dda:	4b4d      	ldr	r3, [pc, #308]	; (8002f10 <processToDisplay+0x690>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4b4b      	ldr	r3, [pc, #300]	; (8002f10 <processToDisplay+0x690>)
 8002de4:	701a      	strb	r2, [r3, #0]
			position4-=1;
 8002de6:	4b4b      	ldr	r3, [pc, #300]	; (8002f14 <processToDisplay+0x694>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	4b49      	ldr	r3, [pc, #292]	; (8002f14 <processToDisplay+0x694>)
 8002df0:	701a      	strb	r2, [r3, #0]
		}

		if(text[position3]=='.'){
 8002df2:	4b49      	ldr	r3, [pc, #292]	; (8002f18 <processToDisplay+0x698>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a46      	ldr	r2, [pc, #280]	; (8002f10 <processToDisplay+0x690>)
 8002df8:	7812      	ldrb	r2, [r2, #0]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8002e00:	d10b      	bne.n	8002e1a <processToDisplay+0x59a>


			position3-=1;
 8002e02:	4b43      	ldr	r3, [pc, #268]	; (8002f10 <processToDisplay+0x690>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	4b41      	ldr	r3, [pc, #260]	; (8002f10 <processToDisplay+0x690>)
 8002e0c:	701a      	strb	r2, [r3, #0]
			position4-=1;
 8002e0e:	4b41      	ldr	r3, [pc, #260]	; (8002f14 <processToDisplay+0x694>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	4b3f      	ldr	r3, [pc, #252]	; (8002f14 <processToDisplay+0x694>)
 8002e18:	701a      	strb	r2, [r3, #0]
		}


		if(text[position4]=='.'){
 8002e1a:	4b3f      	ldr	r3, [pc, #252]	; (8002f18 <processToDisplay+0x698>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a3d      	ldr	r2, [pc, #244]	; (8002f14 <processToDisplay+0x694>)
 8002e20:	7812      	ldrb	r2, [r2, #0]
 8002e22:	4413      	add	r3, r2
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b2e      	cmp	r3, #46	; 0x2e
 8002e28:	d105      	bne.n	8002e36 <processToDisplay+0x5b6>

			position4-=1;
 8002e2a:	4b3a      	ldr	r3, [pc, #232]	; (8002f14 <processToDisplay+0x694>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4b38      	ldr	r3, [pc, #224]	; (8002f14 <processToDisplay+0x694>)
 8002e34:	701a      	strb	r2, [r3, #0]

	}



	if(position1 == 0)
 8002e36:	4b39      	ldr	r3, [pc, #228]	; (8002f1c <processToDisplay+0x69c>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d102      	bne.n	8002e44 <processToDisplay+0x5c4>
		moving = RIGHT;
 8002e3e:	4b39      	ldr	r3, [pc, #228]	; (8002f24 <processToDisplay+0x6a4>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]


	if(position4 == len-1 || position4 == len-2)
 8002e44:	4b33      	ldr	r3, [pc, #204]	; (8002f14 <processToDisplay+0x694>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d006      	beq.n	8002e60 <processToDisplay+0x5e0>
 8002e52:	4b30      	ldr	r3, [pc, #192]	; (8002f14 <processToDisplay+0x694>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	3b02      	subs	r3, #2
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d102      	bne.n	8002e66 <processToDisplay+0x5e6>
		moving = LEFT;
 8002e60:	4b30      	ldr	r3, [pc, #192]	; (8002f24 <processToDisplay+0x6a4>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	while(i<65){
 8002e6c:	e044      	b.n	8002ef8 <processToDisplay+0x678>

		setDigitOne();
 8002e6e:	f7fd ff07 	bl	8000c80 <setDigitOne>
		lightTheChar(text[position1],activeDP[0]);
 8002e72:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <processToDisplay+0x698>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a29      	ldr	r2, [pc, #164]	; (8002f1c <processToDisplay+0x69c>)
 8002e78:	7812      	ldrb	r2, [r2, #0]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	793a      	ldrb	r2, [r7, #4]
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 f852 	bl	8002f2c <lightTheChar>
		LL_mDelay(1);
 8002e88:	2001      	movs	r0, #1
 8002e8a:	f7ff fb4f 	bl	800252c <LL_mDelay>
		setDigitTwo();
 8002e8e:	f7fd ff11 	bl	8000cb4 <setDigitTwo>
		lightTheChar(text[position2],activeDP[1]);
 8002e92:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <processToDisplay+0x698>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a22      	ldr	r2, [pc, #136]	; (8002f20 <processToDisplay+0x6a0>)
 8002e98:	7812      	ldrb	r2, [r2, #0]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	797a      	ldrb	r2, [r7, #5]
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f842 	bl	8002f2c <lightTheChar>
		LL_mDelay(1);
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	f7ff fb3f 	bl	800252c <LL_mDelay>
		setDigitThree();
 8002eae:	f7fd ff1b 	bl	8000ce8 <setDigitThree>
		lightTheChar(text[position3],activeDP[2]);
 8002eb2:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <processToDisplay+0x698>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a16      	ldr	r2, [pc, #88]	; (8002f10 <processToDisplay+0x690>)
 8002eb8:	7812      	ldrb	r2, [r2, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	79ba      	ldrb	r2, [r7, #6]
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 f832 	bl	8002f2c <lightTheChar>
		LL_mDelay(1);
 8002ec8:	2001      	movs	r0, #1
 8002eca:	f7ff fb2f 	bl	800252c <LL_mDelay>
		setDigitFour();
 8002ece:	f7fd ff25 	bl	8000d1c <setDigitFour>
		lightTheChar(text[position4],activeDP[3]);
 8002ed2:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <processToDisplay+0x698>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a0f      	ldr	r2, [pc, #60]	; (8002f14 <processToDisplay+0x694>)
 8002ed8:	7812      	ldrb	r2, [r2, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	79fa      	ldrb	r2, [r7, #7]
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f822 	bl	8002f2c <lightTheChar>
		LL_mDelay(1);
 8002ee8:	2001      	movs	r0, #1
 8002eea:	f7ff fb1f 	bl	800252c <LL_mDelay>

		i++;
 8002eee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	while(i<65){
 8002ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d9b6      	bls.n	8002e6e <processToDisplay+0x5ee>





	start = false;
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <processToDisplay+0x6a8>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]

}
 8002f06:	bf00      	nop
 8002f08:	372c      	adds	r7, #44	; 0x2c
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd90      	pop	{r4, r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000008 	.word	0x20000008
 8002f14:	20000009 	.word	0x20000009
 8002f18:	20000218 	.word	0x20000218
 8002f1c:	20000007 	.word	0x20000007
 8002f20:	20000205 	.word	0x20000205
 8002f24:	20000005 	.word	0x20000005
 8002f28:	20000006 	.word	0x20000006

08002f2c <lightTheChar>:



void lightTheChar(uint8_t ch, bool active_DP){
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	460a      	mov	r2, r1
 8002f36:	71fb      	strb	r3, [r7, #7]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	71bb      	strb	r3, [r7, #6]

	LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8002f3c:	2102      	movs	r1, #2
 8002f3e:	4870      	ldr	r0, [pc, #448]	; (8003100 <lightTheChar+0x1d4>)
 8002f40:	f7ff fc52 	bl	80027e8 <LL_GPIO_SetOutputPin>

	if(ch=='V')
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	2b56      	cmp	r3, #86	; 0x56
 8002f48:	d103      	bne.n	8002f52 <lightTheChar+0x26>
		V(active_DP);
 8002f4a:	79bb      	ldrb	r3, [r7, #6]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 f8f5 	bl	800313c <V>

	if(ch=='l' || ch=='L')
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	2b6c      	cmp	r3, #108	; 0x6c
 8002f56:	d002      	beq.n	8002f5e <lightTheChar+0x32>
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	2b4c      	cmp	r3, #76	; 0x4c
 8002f5c:	d103      	bne.n	8002f66 <lightTheChar+0x3a>
		L(active_DP);
 8002f5e:	79bb      	ldrb	r3, [r7, #6]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 f933 	bl	80031cc <L>

	if(ch=='a' || ch=='A' )
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	2b61      	cmp	r3, #97	; 0x61
 8002f6a:	d002      	beq.n	8002f72 <lightTheChar+0x46>
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	2b41      	cmp	r3, #65	; 0x41
 8002f70:	d103      	bne.n	8002f7a <lightTheChar+0x4e>
		A(active_DP);
 8002f72:	79bb      	ldrb	r3, [r7, #6]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 f973 	bl	8003260 <A>

	if(ch=='d')
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	2b64      	cmp	r3, #100	; 0x64
 8002f7e:	d103      	bne.n	8002f88 <lightTheChar+0x5c>
		D(active_DP);
 8002f80:	79bb      	ldrb	r3, [r7, #6]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f9c6 	bl	8003314 <D>

	if(ch=='i')
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	2b69      	cmp	r3, #105	; 0x69
 8002f8c:	d103      	bne.n	8002f96 <lightTheChar+0x6a>
		I(active_DP);
 8002f8e:	79bb      	ldrb	r3, [r7, #6]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fa13 	bl	80033bc <I>

	if(ch=='m'|| ch=='M')
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	2b6d      	cmp	r3, #109	; 0x6d
 8002f9a:	d002      	beq.n	8002fa2 <lightTheChar+0x76>
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	2b4d      	cmp	r3, #77	; 0x4d
 8002fa0:	d103      	bne.n	8002faa <lightTheChar+0x7e>
		M(active_DP);
 8002fa2:	79bb      	ldrb	r3, [r7, #6]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fa4f 	bl	8003448 <M>

	if(ch=='r'|| ch=='R')
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	2b72      	cmp	r3, #114	; 0x72
 8002fae:	d002      	beq.n	8002fb6 <lightTheChar+0x8a>
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	2b52      	cmp	r3, #82	; 0x52
 8002fb4:	d103      	bne.n	8002fbe <lightTheChar+0x92>
		R(active_DP);
 8002fb6:	79bb      	ldrb	r3, [r7, #6]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fa93 	bl	80034e4 <R>

	if(ch=='B')
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	2b42      	cmp	r3, #66	; 0x42
 8002fc2:	d103      	bne.n	8002fcc <lightTheChar+0xa0>
		B(active_DP);
 8002fc4:	79bb      	ldrb	r3, [r7, #6]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fb40 	bl	800364c <B>

	if(ch=='e' || ch=='E')
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	2b65      	cmp	r3, #101	; 0x65
 8002fd0:	d002      	beq.n	8002fd8 <lightTheChar+0xac>
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	2b45      	cmp	r3, #69	; 0x45
 8002fd6:	d103      	bne.n	8002fe0 <lightTheChar+0xb4>
		E(active_DP);
 8002fd8:	79bb      	ldrb	r3, [r7, #6]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fb8a 	bl	80036f4 <E>

	if(ch=='n')
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	2b6e      	cmp	r3, #110	; 0x6e
 8002fe4:	d103      	bne.n	8002fee <lightTheChar+0xc2>
		N(active_DP);
 8002fe6:	79bb      	ldrb	r3, [r7, #6]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fbd5 	bl	8003798 <N>

	if(ch=='k')
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	2b6b      	cmp	r3, #107	; 0x6b
 8002ff2:	d103      	bne.n	8002ffc <lightTheChar+0xd0>
		K(active_DP);
 8002ff4:	79bb      	ldrb	r3, [r7, #6]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fc18 	bl	800382c <K>

	if(ch=='8')
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	2b38      	cmp	r3, #56	; 0x38
 8003000:	d103      	bne.n	800300a <lightTheChar+0xde>
		eight(active_DP);
 8003002:	79bb      	ldrb	r3, [r7, #6]
 8003004:	4618      	mov	r0, r3
 8003006:	f000 fe97 	bl	8003d38 <eight>

	if(ch =='6')
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	2b36      	cmp	r3, #54	; 0x36
 800300e:	d103      	bne.n	8003018 <lightTheChar+0xec>
		six(active_DP);
 8003010:	79bb      	ldrb	r3, [r7, #6]
 8003012:	4618      	mov	r0, r3
 8003014:	f000 feee 	bl	8003df4 <six>

	if(ch=='4')
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	2b34      	cmp	r3, #52	; 0x34
 800301c:	d103      	bne.n	8003026 <lightTheChar+0xfa>
		four(active_DP);
 800301e:	79bb      	ldrb	r3, [r7, #6]
 8003020:	4618      	mov	r0, r3
 8003022:	f000 ff3f 	bl	8003ea4 <four>

	if(ch =='2')
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	2b32      	cmp	r3, #50	; 0x32
 800302a:	d103      	bne.n	8003034 <lightTheChar+0x108>
		two(active_DP);
 800302c:	79bb      	ldrb	r3, [r7, #6]
 800302e:	4618      	mov	r0, r3
 8003030:	f000 ff86 	bl	8003f40 <two>

	if(ch =='_')
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	2b5f      	cmp	r3, #95	; 0x5f
 8003038:	d103      	bne.n	8003042 <lightTheChar+0x116>
		_(active_DP);
 800303a:	79bb      	ldrb	r3, [r7, #6]
 800303c:	4618      	mov	r0, r3
 800303e:	f000 fa95 	bl	800356c <_>
	///

	if(ch=='G')
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	2b47      	cmp	r3, #71	; 0x47
 8003046:	d103      	bne.n	8003050 <lightTheChar+0x124>
		G(active_DP);
 8003048:	79bb      	ldrb	r3, [r7, #6]
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fc42 	bl	80038d4 <G>

	if(ch=='T'|| ch=='t')
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	2b54      	cmp	r3, #84	; 0x54
 8003054:	d002      	beq.n	800305c <lightTheChar+0x130>
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	2b74      	cmp	r3, #116	; 0x74
 800305a:	d103      	bne.n	8003064 <lightTheChar+0x138>
		T(active_DP);
 800305c:	79bb      	ldrb	r3, [r7, #6]
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fc8c 	bl	800397c <T>

	if(ch=='P'|| ch=='p')
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	2b50      	cmp	r3, #80	; 0x50
 8003068:	d002      	beq.n	8003070 <lightTheChar+0x144>
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	2b70      	cmp	r3, #112	; 0x70
 800306e:	d103      	bne.n	8003078 <lightTheChar+0x14c>
		P(active_DP);
 8003070:	79bb      	ldrb	r3, [r7, #6]
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fcd0 	bl	8003a18 <P>

	if(ch=='H')
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	2b48      	cmp	r3, #72	; 0x48
 800307c:	d103      	bne.n	8003086 <lightTheChar+0x15a>
		H(active_DP);
 800307e:	79bb      	ldrb	r3, [r7, #6]
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fd1d 	bl	8003ac0 <H>

	if(ch =='U')
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	2b55      	cmp	r3, #85	; 0x55
 800308a:	d103      	bne.n	8003094 <lightTheChar+0x168>
		U(active_DP);
 800308c:	79bb      	ldrb	r3, [r7, #6]
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fd66 	bl	8003b60 <U>

	if(ch=='1')
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	2b31      	cmp	r3, #49	; 0x31
 8003098:	d103      	bne.n	80030a2 <lightTheChar+0x176>
		one(active_DP);
 800309a:	79bb      	ldrb	r3, [r7, #6]
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fdb3 	bl	8003c08 <one>

	if(ch =='3')
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	2b33      	cmp	r3, #51	; 0x33
 80030a6:	d103      	bne.n	80030b0 <lightTheChar+0x184>
		three(active_DP);
 80030a8:	79bb      	ldrb	r3, [r7, #6]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fdf2 	bl	8003c94 <three>

	if(ch =='-')
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	2b2d      	cmp	r3, #45	; 0x2d
 80030b4:	d103      	bne.n	80030be <lightTheChar+0x192>
		dash(active_DP);
 80030b6:	79bb      	ldrb	r3, [r7, #6]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fa95 	bl	80035e8 <dash>

	if(ch =='5')
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	2b35      	cmp	r3, #53	; 0x35
 80030c2:	d103      	bne.n	80030cc <lightTheChar+0x1a0>
		five(active_DP);
 80030c4:	79bb      	ldrb	r3, [r7, #6]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 ff8c 	bl	8003fe4 <five>

	if(ch =='7')
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	2b37      	cmp	r3, #55	; 0x37
 80030d0:	d103      	bne.n	80030da <lightTheChar+0x1ae>
		seven(active_DP);
 80030d2:	79bb      	ldrb	r3, [r7, #6]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 ffd7 	bl	8004088 <seven>

	if(ch =='9')
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	2b39      	cmp	r3, #57	; 0x39
 80030de:	d103      	bne.n	80030e8 <lightTheChar+0x1bc>
		nine(active_DP);
 80030e0:	79bb      	ldrb	r3, [r7, #6]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f001 f81a 	bl	800411c <nine>

	if(ch =='0')
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	2b30      	cmp	r3, #48	; 0x30
 80030ec:	d103      	bne.n	80030f6 <lightTheChar+0x1ca>
		zero(active_DP);
 80030ee:	79bb      	ldrb	r3, [r7, #6]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f001 f867 	bl	80041c4 <zero>


}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	48000400 	.word	0x48000400

08003104 <LL_GPIO_SetOutputPin>:
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	619a      	str	r2, [r3, #24]
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_GPIO_ResetOutputPin>:
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <V>:
#include "main.h"

//letters:


void V(bool activeDP){
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]


	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003146:	2102      	movs	r1, #2
 8003148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800314c:	f7ff ffda 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003150:	2101      	movs	r1, #1
 8003152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003156:	f7ff ffd5 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800315a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800315e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003162:	f7ff ffcf 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003166:	2120      	movs	r1, #32
 8003168:	4817      	ldr	r0, [pc, #92]	; (80031c8 <V+0x8c>)
 800316a:	f7ff ffcb 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800316e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003176:	f7ff ffc5 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800317a:	2108      	movs	r1, #8
 800317c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003180:	f7ff ffc0 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003184:	2110      	movs	r1, #16
 8003186:	4810      	ldr	r0, [pc, #64]	; (80031c8 <V+0x8c>)
 8003188:	f7ff ffbc 	bl	8003104 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 800318c:	2101      	movs	r1, #1
 800318e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003192:	f7ff ffc5 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003196:	2120      	movs	r1, #32
 8003198:	480b      	ldr	r0, [pc, #44]	; (80031c8 <V+0x8c>)
 800319a:	f7ff ffc1 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800319e:	2108      	movs	r1, #8
 80031a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031a4:	f7ff ffbc 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);

if(activeDP)
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d004      	beq.n	80031b8 <V+0x7c>
	LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80031ae:	2102      	movs	r1, #2
 80031b0:	4805      	ldr	r0, [pc, #20]	; (80031c8 <V+0x8c>)
 80031b2:	f7ff ffb5 	bl	8003120 <LL_GPIO_ResetOutputPin>
else
	LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);


}
 80031b6:	e003      	b.n	80031c0 <V+0x84>
	LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80031b8:	2102      	movs	r1, #2
 80031ba:	4803      	ldr	r0, [pc, #12]	; (80031c8 <V+0x8c>)
 80031bc:	f7ff ffa2 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	48000400 	.word	0x48000400

080031cc <L>:

void L(bool activeDP){
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80031d6:	2102      	movs	r1, #2
 80031d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031dc:	f7ff ff92 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80031e0:	2101      	movs	r1, #1
 80031e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031e6:	f7ff ff8d 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80031ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031f2:	f7ff ff87 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80031f6:	2120      	movs	r1, #32
 80031f8:	4818      	ldr	r0, [pc, #96]	; (800325c <L+0x90>)
 80031fa:	f7ff ff83 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80031fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003206:	f7ff ff7d 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800320a:	2108      	movs	r1, #8
 800320c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003210:	f7ff ff78 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003214:	2110      	movs	r1, #16
 8003216:	4811      	ldr	r0, [pc, #68]	; (800325c <L+0x90>)
 8003218:	f7ff ff74 	bl	8003104 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800321c:	2120      	movs	r1, #32
 800321e:	480f      	ldr	r0, [pc, #60]	; (800325c <L+0x90>)
 8003220:	f7ff ff7e 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003224:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800322c:	f7ff ff78 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003230:	2108      	movs	r1, #8
 8003232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003236:	f7ff ff73 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);

	if(activeDP)
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d004      	beq.n	800324a <L+0x7e>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003240:	2102      	movs	r1, #2
 8003242:	4806      	ldr	r0, [pc, #24]	; (800325c <L+0x90>)
 8003244:	f7ff ff6c 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003248:	e003      	b.n	8003252 <L+0x86>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 800324a:	2102      	movs	r1, #2
 800324c:	4803      	ldr	r0, [pc, #12]	; (800325c <L+0x90>)
 800324e:	f7ff ff59 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	48000400 	.word	0x48000400

08003260 <A>:


void A(bool activeDP){
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 800326a:	2102      	movs	r1, #2
 800326c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003270:	f7ff ff48 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003274:	2101      	movs	r1, #1
 8003276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800327a:	f7ff ff43 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800327e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003286:	f7ff ff3d 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800328a:	2120      	movs	r1, #32
 800328c:	4820      	ldr	r0, [pc, #128]	; (8003310 <A+0xb0>)
 800328e:	f7ff ff39 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003292:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800329a:	f7ff ff33 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800329e:	2108      	movs	r1, #8
 80032a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032a4:	f7ff ff2e 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80032a8:	2110      	movs	r1, #16
 80032aa:	4819      	ldr	r0, [pc, #100]	; (8003310 <A+0xb0>)
 80032ac:	f7ff ff2a 	bl	8003104 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80032b0:	2102      	movs	r1, #2
 80032b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032b6:	f7ff ff33 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80032ba:	2101      	movs	r1, #1
 80032bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032c0:	f7ff ff2e 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80032c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032cc:	f7ff ff28 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80032d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032d8:	f7ff ff22 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80032dc:	2108      	movs	r1, #8
 80032de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032e2:	f7ff ff1d 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80032e6:	2110      	movs	r1, #16
 80032e8:	4809      	ldr	r0, [pc, #36]	; (8003310 <A+0xb0>)
 80032ea:	f7ff ff19 	bl	8003120 <LL_GPIO_ResetOutputPin>

	if(activeDP)
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d004      	beq.n	80032fe <A+0x9e>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80032f4:	2102      	movs	r1, #2
 80032f6:	4806      	ldr	r0, [pc, #24]	; (8003310 <A+0xb0>)
 80032f8:	f7ff ff12 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 80032fc:	e003      	b.n	8003306 <A+0xa6>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80032fe:	2102      	movs	r1, #2
 8003300:	4803      	ldr	r0, [pc, #12]	; (8003310 <A+0xb0>)
 8003302:	f7ff feff 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	48000400 	.word	0x48000400

08003314 <D>:


void D(bool activeDP){
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 800331e:	2102      	movs	r1, #2
 8003320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003324:	f7ff feee 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003328:	2101      	movs	r1, #1
 800332a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800332e:	f7ff fee9 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800333a:	f7ff fee3 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800333e:	2120      	movs	r1, #32
 8003340:	481d      	ldr	r0, [pc, #116]	; (80033b8 <D+0xa4>)
 8003342:	f7ff fedf 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003346:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800334a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800334e:	f7ff fed9 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003352:	2108      	movs	r1, #8
 8003354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003358:	f7ff fed4 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800335c:	2110      	movs	r1, #16
 800335e:	4816      	ldr	r0, [pc, #88]	; (80033b8 <D+0xa4>)
 8003360:	f7ff fed0 	bl	8003104 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003364:	2101      	movs	r1, #1
 8003366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800336a:	f7ff fed9 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800336e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003376:	f7ff fed3 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800337a:	2120      	movs	r1, #32
 800337c:	480e      	ldr	r0, [pc, #56]	; (80033b8 <D+0xa4>)
 800337e:	f7ff fecf 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003382:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800338a:	f7ff fec9 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800338e:	2110      	movs	r1, #16
 8003390:	4809      	ldr	r0, [pc, #36]	; (80033b8 <D+0xa4>)
 8003392:	f7ff fec5 	bl	8003120 <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d004      	beq.n	80033a6 <D+0x92>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 800339c:	2102      	movs	r1, #2
 800339e:	4806      	ldr	r0, [pc, #24]	; (80033b8 <D+0xa4>)
 80033a0:	f7ff febe 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 80033a4:	e003      	b.n	80033ae <D+0x9a>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80033a6:	2102      	movs	r1, #2
 80033a8:	4803      	ldr	r0, [pc, #12]	; (80033b8 <D+0xa4>)
 80033aa:	f7ff feab 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	48000400 	.word	0x48000400

080033bc <I>:


void I(bool activeDP){
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80033c6:	2102      	movs	r1, #2
 80033c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033cc:	f7ff fe9a 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80033d0:	2101      	movs	r1, #1
 80033d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033d6:	f7ff fe95 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80033da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033e2:	f7ff fe8f 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80033e6:	2120      	movs	r1, #32
 80033e8:	4816      	ldr	r0, [pc, #88]	; (8003444 <I+0x88>)
 80033ea:	f7ff fe8b 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80033ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033f6:	f7ff fe85 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80033fa:	2108      	movs	r1, #8
 80033fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003400:	f7ff fe80 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003404:	2110      	movs	r1, #16
 8003406:	480f      	ldr	r0, [pc, #60]	; (8003444 <I+0x88>)
 8003408:	f7ff fe7c 	bl	8003104 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800340c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003414:	f7ff fe84 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003418:	2108      	movs	r1, #8
 800341a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800341e:	f7ff fe7f 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);

	if(activeDP)
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d004      	beq.n	8003432 <I+0x76>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003428:	2102      	movs	r1, #2
 800342a:	4806      	ldr	r0, [pc, #24]	; (8003444 <I+0x88>)
 800342c:	f7ff fe78 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003430:	e003      	b.n	800343a <I+0x7e>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003432:	2102      	movs	r1, #2
 8003434:	4803      	ldr	r0, [pc, #12]	; (8003444 <I+0x88>)
 8003436:	f7ff fe65 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	48000400 	.word	0x48000400

08003448 <M>:

void M(bool activeDP){
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003452:	2102      	movs	r1, #2
 8003454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003458:	f7ff fe54 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 800345c:	2101      	movs	r1, #1
 800345e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003462:	f7ff fe4f 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003466:	f44f 7180 	mov.w	r1, #256	; 0x100
 800346a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800346e:	f7ff fe49 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003472:	2120      	movs	r1, #32
 8003474:	481a      	ldr	r0, [pc, #104]	; (80034e0 <M+0x98>)
 8003476:	f7ff fe45 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800347a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800347e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003482:	f7ff fe3f 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003486:	2108      	movs	r1, #8
 8003488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800348c:	f7ff fe3a 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003490:	2110      	movs	r1, #16
 8003492:	4813      	ldr	r0, [pc, #76]	; (80034e0 <M+0x98>)
 8003494:	f7ff fe36 	bl	8003104 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003498:	2102      	movs	r1, #2
 800349a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800349e:	f7ff fe3f 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80034a2:	2101      	movs	r1, #1
 80034a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034a8:	f7ff fe3a 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80034ac:	2120      	movs	r1, #32
 80034ae:	480c      	ldr	r0, [pc, #48]	; (80034e0 <M+0x98>)
 80034b0:	f7ff fe36 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80034b4:	2108      	movs	r1, #8
 80034b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ba:	f7ff fe31 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);

	if(activeDP)
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d004      	beq.n	80034ce <M+0x86>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80034c4:	2102      	movs	r1, #2
 80034c6:	4806      	ldr	r0, [pc, #24]	; (80034e0 <M+0x98>)
 80034c8:	f7ff fe2a 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 80034cc:	e003      	b.n	80034d6 <M+0x8e>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80034ce:	2102      	movs	r1, #2
 80034d0:	4803      	ldr	r0, [pc, #12]	; (80034e0 <M+0x98>)
 80034d2:	f7ff fe17 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	48000400 	.word	0x48000400

080034e4 <R>:

void R(bool activeDP){
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80034ee:	2102      	movs	r1, #2
 80034f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034f4:	f7ff fe06 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80034f8:	2101      	movs	r1, #1
 80034fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034fe:	f7ff fe01 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003502:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800350a:	f7ff fdfb 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800350e:	2120      	movs	r1, #32
 8003510:	4815      	ldr	r0, [pc, #84]	; (8003568 <R+0x84>)
 8003512:	f7ff fdf7 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003516:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800351a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800351e:	f7ff fdf1 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003522:	2108      	movs	r1, #8
 8003524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003528:	f7ff fdec 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800352c:	2110      	movs	r1, #16
 800352e:	480e      	ldr	r0, [pc, #56]	; (8003568 <R+0x84>)
 8003530:	f7ff fde8 	bl	8003104 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003534:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800353c:	f7ff fdf0 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003540:	2110      	movs	r1, #16
 8003542:	4809      	ldr	r0, [pc, #36]	; (8003568 <R+0x84>)
 8003544:	f7ff fdec 	bl	8003120 <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d004      	beq.n	8003558 <R+0x74>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 800354e:	2102      	movs	r1, #2
 8003550:	4805      	ldr	r0, [pc, #20]	; (8003568 <R+0x84>)
 8003552:	f7ff fde5 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003556:	e003      	b.n	8003560 <R+0x7c>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003558:	2102      	movs	r1, #2
 800355a:	4803      	ldr	r0, [pc, #12]	; (8003568 <R+0x84>)
 800355c:	f7ff fdd2 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	48000400 	.word	0x48000400

0800356c <_>:



void _(bool activeDP){
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003576:	2102      	movs	r1, #2
 8003578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800357c:	f7ff fdc2 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003580:	2101      	movs	r1, #1
 8003582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003586:	f7ff fdbd 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800358a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800358e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003592:	f7ff fdb7 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003596:	2120      	movs	r1, #32
 8003598:	4812      	ldr	r0, [pc, #72]	; (80035e4 <_+0x78>)
 800359a:	f7ff fdb3 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800359e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035a6:	f7ff fdad 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80035aa:	2108      	movs	r1, #8
 80035ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035b0:	f7ff fda8 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80035b4:	2110      	movs	r1, #16
 80035b6:	480b      	ldr	r0, [pc, #44]	; (80035e4 <_+0x78>)
 80035b8:	f7ff fda4 	bl	8003104 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80035bc:	2120      	movs	r1, #32
 80035be:	4809      	ldr	r0, [pc, #36]	; (80035e4 <_+0x78>)
 80035c0:	f7ff fdae 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);

	if(activeDP)
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d004      	beq.n	80035d4 <_+0x68>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80035ca:	2102      	movs	r1, #2
 80035cc:	4805      	ldr	r0, [pc, #20]	; (80035e4 <_+0x78>)
 80035ce:	f7ff fda7 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 80035d2:	e003      	b.n	80035dc <_+0x70>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80035d4:	2102      	movs	r1, #2
 80035d6:	4803      	ldr	r0, [pc, #12]	; (80035e4 <_+0x78>)
 80035d8:	f7ff fd94 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	48000400 	.word	0x48000400

080035e8 <dash>:
///// potialto si dal actiDP
void dash(bool activeDP){
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80035f2:	2102      	movs	r1, #2
 80035f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035f8:	f7ff fd84 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80035fc:	2101      	movs	r1, #1
 80035fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003602:	f7ff fd7f 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003606:	f44f 7180 	mov.w	r1, #256	; 0x100
 800360a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800360e:	f7ff fd79 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003612:	2120      	movs	r1, #32
 8003614:	480c      	ldr	r0, [pc, #48]	; (8003648 <dash+0x60>)
 8003616:	f7ff fd75 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800361a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800361e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003622:	f7ff fd6f 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003626:	2108      	movs	r1, #8
 8003628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800362c:	f7ff fd6a 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003630:	2110      	movs	r1, #16
 8003632:	4805      	ldr	r0, [pc, #20]	; (8003648 <dash+0x60>)
 8003634:	f7ff fd66 	bl	8003104 <LL_GPIO_SetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003638:	2110      	movs	r1, #16
 800363a:	4803      	ldr	r0, [pc, #12]	; (8003648 <dash+0x60>)
 800363c:	f7ff fd70 	bl	8003120 <LL_GPIO_ResetOutputPin>



}
 8003640:	bf00      	nop
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	48000400 	.word	0x48000400

0800364c <B>:





void B(bool activeDP){
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003656:	2102      	movs	r1, #2
 8003658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800365c:	f7ff fd52 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003660:	2101      	movs	r1, #1
 8003662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003666:	f7ff fd4d 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800366a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800366e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003672:	f7ff fd47 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003676:	2120      	movs	r1, #32
 8003678:	481d      	ldr	r0, [pc, #116]	; (80036f0 <B+0xa4>)
 800367a:	f7ff fd43 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800367e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003686:	f7ff fd3d 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800368a:	2108      	movs	r1, #8
 800368c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003690:	f7ff fd38 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003694:	2110      	movs	r1, #16
 8003696:	4816      	ldr	r0, [pc, #88]	; (80036f0 <B+0xa4>)
 8003698:	f7ff fd34 	bl	8003104 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800369c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036a4:	f7ff fd3c 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80036a8:	2120      	movs	r1, #32
 80036aa:	4811      	ldr	r0, [pc, #68]	; (80036f0 <B+0xa4>)
 80036ac:	f7ff fd38 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80036b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036b8:	f7ff fd32 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80036bc:	2108      	movs	r1, #8
 80036be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036c2:	f7ff fd2d 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80036c6:	2110      	movs	r1, #16
 80036c8:	4809      	ldr	r0, [pc, #36]	; (80036f0 <B+0xa4>)
 80036ca:	f7ff fd29 	bl	8003120 <LL_GPIO_ResetOutputPin>

	if(activeDP)
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d004      	beq.n	80036de <B+0x92>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80036d4:	2102      	movs	r1, #2
 80036d6:	4806      	ldr	r0, [pc, #24]	; (80036f0 <B+0xa4>)
 80036d8:	f7ff fd22 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 80036dc:	e003      	b.n	80036e6 <B+0x9a>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80036de:	2102      	movs	r1, #2
 80036e0:	4803      	ldr	r0, [pc, #12]	; (80036f0 <B+0xa4>)
 80036e2:	f7ff fd0f 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	48000400 	.word	0x48000400

080036f4 <E>:
void E(bool activeDP){
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80036fe:	2102      	movs	r1, #2
 8003700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003704:	f7ff fcfe 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003708:	2101      	movs	r1, #1
 800370a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800370e:	f7ff fcf9 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003712:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800371a:	f7ff fcf3 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800371e:	2120      	movs	r1, #32
 8003720:	481c      	ldr	r0, [pc, #112]	; (8003794 <E+0xa0>)
 8003722:	f7ff fcef 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003726:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800372a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800372e:	f7ff fce9 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003732:	2108      	movs	r1, #8
 8003734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003738:	f7ff fce4 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800373c:	2110      	movs	r1, #16
 800373e:	4815      	ldr	r0, [pc, #84]	; (8003794 <E+0xa0>)
 8003740:	f7ff fce0 	bl	8003104 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003744:	2102      	movs	r1, #2
 8003746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800374a:	f7ff fce9 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800374e:	2120      	movs	r1, #32
 8003750:	4810      	ldr	r0, [pc, #64]	; (8003794 <E+0xa0>)
 8003752:	f7ff fce5 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003756:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800375a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800375e:	f7ff fcdf 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003762:	2108      	movs	r1, #8
 8003764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003768:	f7ff fcda 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800376c:	2110      	movs	r1, #16
 800376e:	4809      	ldr	r0, [pc, #36]	; (8003794 <E+0xa0>)
 8003770:	f7ff fcd6 	bl	8003120 <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d004      	beq.n	8003784 <E+0x90>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 800377a:	2102      	movs	r1, #2
 800377c:	4805      	ldr	r0, [pc, #20]	; (8003794 <E+0xa0>)
 800377e:	f7ff fccf 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003782:	e003      	b.n	800378c <E+0x98>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003784:	2102      	movs	r1, #2
 8003786:	4803      	ldr	r0, [pc, #12]	; (8003794 <E+0xa0>)
 8003788:	f7ff fcbc 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 800378c:	bf00      	nop
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	48000400 	.word	0x48000400

08003798 <N>:
void N(bool activeDP){
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80037a2:	2102      	movs	r1, #2
 80037a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037a8:	f7ff fcac 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80037ac:	2101      	movs	r1, #1
 80037ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037b2:	f7ff fca7 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80037b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037be:	f7ff fca1 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80037c2:	2120      	movs	r1, #32
 80037c4:	4818      	ldr	r0, [pc, #96]	; (8003828 <N+0x90>)
 80037c6:	f7ff fc9d 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80037ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037d2:	f7ff fc97 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80037d6:	2108      	movs	r1, #8
 80037d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037dc:	f7ff fc92 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80037e0:	2110      	movs	r1, #16
 80037e2:	4811      	ldr	r0, [pc, #68]	; (8003828 <N+0x90>)
 80037e4:	f7ff fc8e 	bl	8003104 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80037e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037f0:	f7ff fc96 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80037f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037fc:	f7ff fc90 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003800:	2110      	movs	r1, #16
 8003802:	4809      	ldr	r0, [pc, #36]	; (8003828 <N+0x90>)
 8003804:	f7ff fc8c 	bl	8003120 <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d004      	beq.n	8003818 <N+0x80>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 800380e:	2102      	movs	r1, #2
 8003810:	4805      	ldr	r0, [pc, #20]	; (8003828 <N+0x90>)
 8003812:	f7ff fc85 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003816:	e003      	b.n	8003820 <N+0x88>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003818:	2102      	movs	r1, #2
 800381a:	4803      	ldr	r0, [pc, #12]	; (8003828 <N+0x90>)
 800381c:	f7ff fc72 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	48000400 	.word	0x48000400

0800382c <K>:
void K(bool activeDP){
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003836:	2102      	movs	r1, #2
 8003838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800383c:	f7ff fc62 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003840:	2101      	movs	r1, #1
 8003842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003846:	f7ff fc5d 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800384a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800384e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003852:	f7ff fc57 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003856:	2120      	movs	r1, #32
 8003858:	481d      	ldr	r0, [pc, #116]	; (80038d0 <K+0xa4>)
 800385a:	f7ff fc53 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800385e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003866:	f7ff fc4d 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800386a:	2108      	movs	r1, #8
 800386c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003870:	f7ff fc48 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003874:	2110      	movs	r1, #16
 8003876:	4816      	ldr	r0, [pc, #88]	; (80038d0 <K+0xa4>)
 8003878:	f7ff fc44 	bl	8003104 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 800387c:	2102      	movs	r1, #2
 800387e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003882:	f7ff fc4d 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003886:	f44f 7180 	mov.w	r1, #256	; 0x100
 800388a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800388e:	f7ff fc47 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003892:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800389a:	f7ff fc41 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800389e:	2108      	movs	r1, #8
 80038a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038a4:	f7ff fc3c 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80038a8:	2110      	movs	r1, #16
 80038aa:	4809      	ldr	r0, [pc, #36]	; (80038d0 <K+0xa4>)
 80038ac:	f7ff fc38 	bl	8003120 <LL_GPIO_ResetOutputPin>

	if(activeDP)
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d004      	beq.n	80038c0 <K+0x94>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80038b6:	2102      	movs	r1, #2
 80038b8:	4805      	ldr	r0, [pc, #20]	; (80038d0 <K+0xa4>)
 80038ba:	f7ff fc31 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 80038be:	e003      	b.n	80038c8 <K+0x9c>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80038c0:	2102      	movs	r1, #2
 80038c2:	4803      	ldr	r0, [pc, #12]	; (80038d0 <K+0xa4>)
 80038c4:	f7ff fc1e 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	48000400 	.word	0x48000400

080038d4 <G>:


void G(bool activeDP){
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80038de:	2102      	movs	r1, #2
 80038e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038e4:	f7ff fc0e 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80038e8:	2101      	movs	r1, #1
 80038ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038ee:	f7ff fc09 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80038f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038fa:	f7ff fc03 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80038fe:	2120      	movs	r1, #32
 8003900:	481d      	ldr	r0, [pc, #116]	; (8003978 <G+0xa4>)
 8003902:	f7ff fbff 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003906:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800390a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800390e:	f7ff fbf9 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003912:	2108      	movs	r1, #8
 8003914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003918:	f7ff fbf4 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800391c:	2110      	movs	r1, #16
 800391e:	4816      	ldr	r0, [pc, #88]	; (8003978 <G+0xa4>)
 8003920:	f7ff fbf0 	bl	8003104 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003924:	2102      	movs	r1, #2
 8003926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800392a:	f7ff fbf9 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800392e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003936:	f7ff fbf3 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800393a:	2120      	movs	r1, #32
 800393c:	480e      	ldr	r0, [pc, #56]	; (8003978 <G+0xa4>)
 800393e:	f7ff fbef 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003942:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800394a:	f7ff fbe9 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800394e:	2108      	movs	r1, #8
 8003950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003954:	f7ff fbe4 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);

	if(activeDP)
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d004      	beq.n	8003968 <G+0x94>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 800395e:	2102      	movs	r1, #2
 8003960:	4805      	ldr	r0, [pc, #20]	; (8003978 <G+0xa4>)
 8003962:	f7ff fbdd 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003966:	e003      	b.n	8003970 <G+0x9c>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003968:	2102      	movs	r1, #2
 800396a:	4803      	ldr	r0, [pc, #12]	; (8003978 <G+0xa4>)
 800396c:	f7ff fbca 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	48000400 	.word	0x48000400

0800397c <T>:


void T(bool activeDP){
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003986:	2102      	movs	r1, #2
 8003988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800398c:	f7ff fbba 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003990:	2101      	movs	r1, #1
 8003992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003996:	f7ff fbb5 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800399a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800399e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039a2:	f7ff fbaf 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80039a6:	2120      	movs	r1, #32
 80039a8:	481a      	ldr	r0, [pc, #104]	; (8003a14 <T+0x98>)
 80039aa:	f7ff fbab 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80039ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80039b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039b6:	f7ff fba5 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80039ba:	2108      	movs	r1, #8
 80039bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039c0:	f7ff fba0 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80039c4:	2110      	movs	r1, #16
 80039c6:	4813      	ldr	r0, [pc, #76]	; (8003a14 <T+0x98>)
 80039c8:	f7ff fb9c 	bl	8003104 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80039cc:	2120      	movs	r1, #32
 80039ce:	4811      	ldr	r0, [pc, #68]	; (8003a14 <T+0x98>)
 80039d0:	f7ff fba6 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80039d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80039d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039dc:	f7ff fba0 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80039e0:	2108      	movs	r1, #8
 80039e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039e6:	f7ff fb9b 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80039ea:	2110      	movs	r1, #16
 80039ec:	4809      	ldr	r0, [pc, #36]	; (8003a14 <T+0x98>)
 80039ee:	f7ff fb97 	bl	8003120 <LL_GPIO_ResetOutputPin>

	if(activeDP)
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d004      	beq.n	8003a02 <T+0x86>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80039f8:	2102      	movs	r1, #2
 80039fa:	4806      	ldr	r0, [pc, #24]	; (8003a14 <T+0x98>)
 80039fc:	f7ff fb90 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003a00:	e003      	b.n	8003a0a <T+0x8e>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003a02:	2102      	movs	r1, #2
 8003a04:	4803      	ldr	r0, [pc, #12]	; (8003a14 <T+0x98>)
 8003a06:	f7ff fb7d 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	48000400 	.word	0x48000400

08003a18 <P>:


void P(bool activeDP){
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003a22:	2102      	movs	r1, #2
 8003a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a28:	f7ff fb6c 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a32:	f7ff fb67 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a3e:	f7ff fb61 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003a42:	2120      	movs	r1, #32
 8003a44:	481d      	ldr	r0, [pc, #116]	; (8003abc <P+0xa4>)
 8003a46:	f7ff fb5d 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003a4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a52:	f7ff fb57 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003a56:	2108      	movs	r1, #8
 8003a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a5c:	f7ff fb52 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003a60:	2110      	movs	r1, #16
 8003a62:	4816      	ldr	r0, [pc, #88]	; (8003abc <P+0xa4>)
 8003a64:	f7ff fb4e 	bl	8003104 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003a68:	2102      	movs	r1, #2
 8003a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a6e:	f7ff fb57 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003a72:	2101      	movs	r1, #1
 8003a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a78:	f7ff fb52 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003a7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a84:	f7ff fb4c 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003a88:	2108      	movs	r1, #8
 8003a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a8e:	f7ff fb47 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003a92:	2110      	movs	r1, #16
 8003a94:	4809      	ldr	r0, [pc, #36]	; (8003abc <P+0xa4>)
 8003a96:	f7ff fb43 	bl	8003120 <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d004      	beq.n	8003aaa <P+0x92>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003aa0:	2102      	movs	r1, #2
 8003aa2:	4806      	ldr	r0, [pc, #24]	; (8003abc <P+0xa4>)
 8003aa4:	f7ff fb3c 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003aa8:	e003      	b.n	8003ab2 <P+0x9a>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003aaa:	2102      	movs	r1, #2
 8003aac:	4803      	ldr	r0, [pc, #12]	; (8003abc <P+0xa4>)
 8003aae:	f7ff fb29 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	48000400 	.word	0x48000400

08003ac0 <H>:



void H(bool activeDP){
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003aca:	2102      	movs	r1, #2
 8003acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ad0:	f7ff fb18 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ada:	f7ff fb13 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003ade:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ae6:	f7ff fb0d 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003aea:	2120      	movs	r1, #32
 8003aec:	481b      	ldr	r0, [pc, #108]	; (8003b5c <H+0x9c>)
 8003aee:	f7ff fb09 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003af2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003afa:	f7ff fb03 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003afe:	2108      	movs	r1, #8
 8003b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b04:	f7ff fafe 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003b08:	2110      	movs	r1, #16
 8003b0a:	4814      	ldr	r0, [pc, #80]	; (8003b5c <H+0x9c>)
 8003b0c:	f7ff fafa 	bl	8003104 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003b10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b18:	f7ff fb02 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003b1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b24:	f7ff fafc 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003b28:	2108      	movs	r1, #8
 8003b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b2e:	f7ff faf7 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003b32:	2110      	movs	r1, #16
 8003b34:	4809      	ldr	r0, [pc, #36]	; (8003b5c <H+0x9c>)
 8003b36:	f7ff faf3 	bl	8003120 <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d004      	beq.n	8003b4a <H+0x8a>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003b40:	2102      	movs	r1, #2
 8003b42:	4806      	ldr	r0, [pc, #24]	; (8003b5c <H+0x9c>)
 8003b44:	f7ff faec 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003b48:	e003      	b.n	8003b52 <H+0x92>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	4803      	ldr	r0, [pc, #12]	; (8003b5c <H+0x9c>)
 8003b4e:	f7ff fad9 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	48000400 	.word	0x48000400

08003b60 <U>:


void U(bool activeDP){
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b70:	f7ff fac8 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003b74:	2101      	movs	r1, #1
 8003b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b7a:	f7ff fac3 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003b7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b86:	f7ff fabd 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003b8a:	2120      	movs	r1, #32
 8003b8c:	481d      	ldr	r0, [pc, #116]	; (8003c04 <U+0xa4>)
 8003b8e:	f7ff fab9 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003b92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b9a:	f7ff fab3 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003b9e:	2108      	movs	r1, #8
 8003ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ba4:	f7ff faae 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003ba8:	2110      	movs	r1, #16
 8003baa:	4816      	ldr	r0, [pc, #88]	; (8003c04 <U+0xa4>)
 8003bac:	f7ff faaa 	bl	8003104 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bb6:	f7ff fab3 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003bba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bc2:	f7ff faad 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003bc6:	2120      	movs	r1, #32
 8003bc8:	480e      	ldr	r0, [pc, #56]	; (8003c04 <U+0xa4>)
 8003bca:	f7ff faa9 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003bce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bd6:	f7ff faa3 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003bda:	2108      	movs	r1, #8
 8003bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003be0:	f7ff fa9e 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);

	if(activeDP)
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d004      	beq.n	8003bf4 <U+0x94>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003bea:	2102      	movs	r1, #2
 8003bec:	4805      	ldr	r0, [pc, #20]	; (8003c04 <U+0xa4>)
 8003bee:	f7ff fa97 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003bf2:	e003      	b.n	8003bfc <U+0x9c>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003bf4:	2102      	movs	r1, #2
 8003bf6:	4803      	ldr	r0, [pc, #12]	; (8003c04 <U+0xa4>)
 8003bf8:	f7ff fa84 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	48000400 	.word	0x48000400

08003c08 <one>:
//numbers:




void one(bool activeDP){
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003c12:	2102      	movs	r1, #2
 8003c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c18:	f7ff fa74 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c22:	f7ff fa6f 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003c26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c2e:	f7ff fa69 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003c32:	2120      	movs	r1, #32
 8003c34:	4816      	ldr	r0, [pc, #88]	; (8003c90 <one+0x88>)
 8003c36:	f7ff fa65 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003c3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c42:	f7ff fa5f 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003c46:	2108      	movs	r1, #8
 8003c48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c4c:	f7ff fa5a 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003c50:	2110      	movs	r1, #16
 8003c52:	480f      	ldr	r0, [pc, #60]	; (8003c90 <one+0x88>)
 8003c54:	f7ff fa56 	bl	8003104 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003c58:	2101      	movs	r1, #1
 8003c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c5e:	f7ff fa5f 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003c62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c6a:	f7ff fa59 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);

	if(activeDP)
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d004      	beq.n	8003c7e <one+0x76>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003c74:	2102      	movs	r1, #2
 8003c76:	4806      	ldr	r0, [pc, #24]	; (8003c90 <one+0x88>)
 8003c78:	f7ff fa52 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003c7c:	e003      	b.n	8003c86 <one+0x7e>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003c7e:	2102      	movs	r1, #2
 8003c80:	4803      	ldr	r0, [pc, #12]	; (8003c90 <one+0x88>)
 8003c82:	f7ff fa3f 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	48000400 	.word	0x48000400

08003c94 <three>:

void three(bool activeDP){
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ca4:	f7ff fa2e 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003ca8:	2101      	movs	r1, #1
 8003caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cae:	f7ff fa29 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003cb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cba:	f7ff fa23 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003cbe:	2120      	movs	r1, #32
 8003cc0:	481c      	ldr	r0, [pc, #112]	; (8003d34 <three+0xa0>)
 8003cc2:	f7ff fa1f 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003cc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cce:	f7ff fa19 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003cd2:	2108      	movs	r1, #8
 8003cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cd8:	f7ff fa14 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003cdc:	2110      	movs	r1, #16
 8003cde:	4815      	ldr	r0, [pc, #84]	; (8003d34 <three+0xa0>)
 8003ce0:	f7ff fa10 	bl	8003104 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003ce4:	2102      	movs	r1, #2
 8003ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cea:	f7ff fa19 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003cee:	2101      	movs	r1, #1
 8003cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cf4:	f7ff fa14 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d00:	f7ff fa0e 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003d04:	2120      	movs	r1, #32
 8003d06:	480b      	ldr	r0, [pc, #44]	; (8003d34 <three+0xa0>)
 8003d08:	f7ff fa0a 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003d0c:	2110      	movs	r1, #16
 8003d0e:	4809      	ldr	r0, [pc, #36]	; (8003d34 <three+0xa0>)
 8003d10:	f7ff fa06 	bl	8003120 <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <three+0x90>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003d1a:	2102      	movs	r1, #2
 8003d1c:	4805      	ldr	r0, [pc, #20]	; (8003d34 <three+0xa0>)
 8003d1e:	f7ff f9ff 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003d22:	e003      	b.n	8003d2c <three+0x98>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003d24:	2102      	movs	r1, #2
 8003d26:	4803      	ldr	r0, [pc, #12]	; (8003d34 <three+0xa0>)
 8003d28:	f7ff f9ec 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	48000400 	.word	0x48000400

08003d38 <eight>:

void eight(bool activeDP){
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003d42:	2102      	movs	r1, #2
 8003d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d48:	f7ff f9dc 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d52:	f7ff f9d7 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003d56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d5e:	f7ff f9d1 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003d62:	2120      	movs	r1, #32
 8003d64:	4822      	ldr	r0, [pc, #136]	; (8003df0 <eight+0xb8>)
 8003d66:	f7ff f9cd 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003d6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d72:	f7ff f9c7 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003d76:	2108      	movs	r1, #8
 8003d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d7c:	f7ff f9c2 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003d80:	2110      	movs	r1, #16
 8003d82:	481b      	ldr	r0, [pc, #108]	; (8003df0 <eight+0xb8>)
 8003d84:	f7ff f9be 	bl	8003104 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003d88:	2102      	movs	r1, #2
 8003d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d8e:	f7ff f9c7 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003d92:	2101      	movs	r1, #1
 8003d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d98:	f7ff f9c2 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003d9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003da4:	f7ff f9bc 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003da8:	2120      	movs	r1, #32
 8003daa:	4811      	ldr	r0, [pc, #68]	; (8003df0 <eight+0xb8>)
 8003dac:	f7ff f9b8 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003db8:	f7ff f9b2 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003dbc:	2108      	movs	r1, #8
 8003dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dc2:	f7ff f9ad 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003dc6:	2110      	movs	r1, #16
 8003dc8:	4809      	ldr	r0, [pc, #36]	; (8003df0 <eight+0xb8>)
 8003dca:	f7ff f9a9 	bl	8003120 <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d004      	beq.n	8003dde <eight+0xa6>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003dd4:	2102      	movs	r1, #2
 8003dd6:	4806      	ldr	r0, [pc, #24]	; (8003df0 <eight+0xb8>)
 8003dd8:	f7ff f9a2 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003ddc:	e003      	b.n	8003de6 <eight+0xae>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003dde:	2102      	movs	r1, #2
 8003de0:	4803      	ldr	r0, [pc, #12]	; (8003df0 <eight+0xb8>)
 8003de2:	f7ff f98f 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	48000400 	.word	0x48000400

08003df4 <six>:
void six(bool activeDP){
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003dfe:	2102      	movs	r1, #2
 8003e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e04:	f7ff f97e 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003e08:	2101      	movs	r1, #1
 8003e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e0e:	f7ff f979 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e1a:	f7ff f973 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003e1e:	2120      	movs	r1, #32
 8003e20:	481f      	ldr	r0, [pc, #124]	; (8003ea0 <six+0xac>)
 8003e22:	f7ff f96f 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003e26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e2e:	f7ff f969 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003e32:	2108      	movs	r1, #8
 8003e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e38:	f7ff f964 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003e3c:	2110      	movs	r1, #16
 8003e3e:	4818      	ldr	r0, [pc, #96]	; (8003ea0 <six+0xac>)
 8003e40:	f7ff f960 	bl	8003104 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003e44:	2102      	movs	r1, #2
 8003e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e4a:	f7ff f969 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003e4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e56:	f7ff f963 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003e5a:	2120      	movs	r1, #32
 8003e5c:	4810      	ldr	r0, [pc, #64]	; (8003ea0 <six+0xac>)
 8003e5e:	f7ff f95f 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003e62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e6a:	f7ff f959 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003e6e:	2108      	movs	r1, #8
 8003e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e74:	f7ff f954 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003e78:	2110      	movs	r1, #16
 8003e7a:	4809      	ldr	r0, [pc, #36]	; (8003ea0 <six+0xac>)
 8003e7c:	f7ff f950 	bl	8003120 <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d004      	beq.n	8003e90 <six+0x9c>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003e86:	2102      	movs	r1, #2
 8003e88:	4805      	ldr	r0, [pc, #20]	; (8003ea0 <six+0xac>)
 8003e8a:	f7ff f949 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003e8e:	e003      	b.n	8003e98 <six+0xa4>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003e90:	2102      	movs	r1, #2
 8003e92:	4803      	ldr	r0, [pc, #12]	; (8003ea0 <six+0xac>)
 8003e94:	f7ff f936 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 8003e98:	bf00      	nop
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	48000400 	.word	0x48000400

08003ea4 <four>:


void four(bool activeDP){
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003eae:	2102      	movs	r1, #2
 8003eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eb4:	f7ff f926 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003eb8:	2101      	movs	r1, #1
 8003eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ebe:	f7ff f921 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003ec2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eca:	f7ff f91b 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003ece:	2120      	movs	r1, #32
 8003ed0:	481a      	ldr	r0, [pc, #104]	; (8003f3c <four+0x98>)
 8003ed2:	f7ff f917 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003ed6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ede:	f7ff f911 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003ee2:	2108      	movs	r1, #8
 8003ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ee8:	f7ff f90c 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003eec:	2110      	movs	r1, #16
 8003eee:	4813      	ldr	r0, [pc, #76]	; (8003f3c <four+0x98>)
 8003ef0:	f7ff f908 	bl	8003104 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003efa:	f7ff f911 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003efe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f06:	f7ff f90b 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003f0a:	2108      	movs	r1, #8
 8003f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f10:	f7ff f906 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003f14:	2110      	movs	r1, #16
 8003f16:	4809      	ldr	r0, [pc, #36]	; (8003f3c <four+0x98>)
 8003f18:	f7ff f902 	bl	8003120 <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d004      	beq.n	8003f2c <four+0x88>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003f22:	2102      	movs	r1, #2
 8003f24:	4805      	ldr	r0, [pc, #20]	; (8003f3c <four+0x98>)
 8003f26:	f7ff f8fb 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003f2a:	e003      	b.n	8003f34 <four+0x90>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003f2c:	2102      	movs	r1, #2
 8003f2e:	4803      	ldr	r0, [pc, #12]	; (8003f3c <four+0x98>)
 8003f30:	f7ff f8e8 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 8003f34:	bf00      	nop
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	48000400 	.word	0x48000400

08003f40 <two>:

void two(bool activeDP){
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003f4a:	2102      	movs	r1, #2
 8003f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f50:	f7ff f8d8 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003f54:	2101      	movs	r1, #1
 8003f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f5a:	f7ff f8d3 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003f5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f66:	f7ff f8cd 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003f6a:	2120      	movs	r1, #32
 8003f6c:	481c      	ldr	r0, [pc, #112]	; (8003fe0 <two+0xa0>)
 8003f6e:	f7ff f8c9 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003f72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f7a:	f7ff f8c3 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003f7e:	2108      	movs	r1, #8
 8003f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f84:	f7ff f8be 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003f88:	2110      	movs	r1, #16
 8003f8a:	4815      	ldr	r0, [pc, #84]	; (8003fe0 <two+0xa0>)
 8003f8c:	f7ff f8ba 	bl	8003104 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003f90:	2102      	movs	r1, #2
 8003f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f96:	f7ff f8c3 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fa0:	f7ff f8be 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003fa4:	2120      	movs	r1, #32
 8003fa6:	480e      	ldr	r0, [pc, #56]	; (8003fe0 <two+0xa0>)
 8003fa8:	f7ff f8ba 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fb4:	f7ff f8b4 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003fb8:	2110      	movs	r1, #16
 8003fba:	4809      	ldr	r0, [pc, #36]	; (8003fe0 <two+0xa0>)
 8003fbc:	f7ff f8b0 	bl	8003120 <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d004      	beq.n	8003fd0 <two+0x90>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	4805      	ldr	r0, [pc, #20]	; (8003fe0 <two+0xa0>)
 8003fca:	f7ff f8a9 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003fce:	e003      	b.n	8003fd8 <two+0x98>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	4803      	ldr	r0, [pc, #12]	; (8003fe0 <two+0xa0>)
 8003fd4:	f7ff f896 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	48000400 	.word	0x48000400

08003fe4 <five>:

void five(bool activeDP){
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003fee:	2102      	movs	r1, #2
 8003ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ff4:	f7ff f886 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ffe:	f7ff f881 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8004002:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800400a:	f7ff f87b 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800400e:	2120      	movs	r1, #32
 8004010:	481c      	ldr	r0, [pc, #112]	; (8004084 <five+0xa0>)
 8004012:	f7ff f877 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8004016:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800401a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800401e:	f7ff f871 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8004022:	2108      	movs	r1, #8
 8004024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004028:	f7ff f86c 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800402c:	2110      	movs	r1, #16
 800402e:	4815      	ldr	r0, [pc, #84]	; (8004084 <five+0xa0>)
 8004030:	f7ff f868 	bl	8003104 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8004034:	2102      	movs	r1, #2
 8004036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800403a:	f7ff f871 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800403e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004046:	f7ff f86b 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800404a:	2120      	movs	r1, #32
 800404c:	480d      	ldr	r0, [pc, #52]	; (8004084 <five+0xa0>)
 800404e:	f7ff f867 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8004052:	2108      	movs	r1, #8
 8004054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004058:	f7ff f862 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800405c:	2110      	movs	r1, #16
 800405e:	4809      	ldr	r0, [pc, #36]	; (8004084 <five+0xa0>)
 8004060:	f7ff f85e 	bl	8003120 <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d004      	beq.n	8004074 <five+0x90>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 800406a:	2102      	movs	r1, #2
 800406c:	4805      	ldr	r0, [pc, #20]	; (8004084 <five+0xa0>)
 800406e:	f7ff f857 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8004072:	e003      	b.n	800407c <five+0x98>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8004074:	2102      	movs	r1, #2
 8004076:	4803      	ldr	r0, [pc, #12]	; (8004084 <five+0xa0>)
 8004078:	f7ff f844 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 800407c:	bf00      	nop
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	48000400 	.word	0x48000400

08004088 <seven>:


void seven(bool activeDP){
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8004092:	2102      	movs	r1, #2
 8004094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004098:	f7ff f834 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 800409c:	2101      	movs	r1, #1
 800409e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040a2:	f7ff f82f 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80040a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040ae:	f7ff f829 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80040b2:	2120      	movs	r1, #32
 80040b4:	4818      	ldr	r0, [pc, #96]	; (8004118 <seven+0x90>)
 80040b6:	f7ff f825 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80040ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80040be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040c2:	f7ff f81f 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80040c6:	2108      	movs	r1, #8
 80040c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040cc:	f7ff f81a 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80040d0:	2110      	movs	r1, #16
 80040d2:	4811      	ldr	r0, [pc, #68]	; (8004118 <seven+0x90>)
 80040d4:	f7ff f816 	bl	8003104 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80040d8:	2102      	movs	r1, #2
 80040da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040de:	f7ff f81f 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80040e2:	2101      	movs	r1, #1
 80040e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040e8:	f7ff f81a 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80040ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040f4:	f7ff f814 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);

	if(activeDP)
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d004      	beq.n	8004108 <seven+0x80>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80040fe:	2102      	movs	r1, #2
 8004100:	4805      	ldr	r0, [pc, #20]	; (8004118 <seven+0x90>)
 8004102:	f7ff f80d 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8004106:	e003      	b.n	8004110 <seven+0x88>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8004108:	2102      	movs	r1, #2
 800410a:	4803      	ldr	r0, [pc, #12]	; (8004118 <seven+0x90>)
 800410c:	f7fe fffa 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 8004110:	bf00      	nop
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	48000400 	.word	0x48000400

0800411c <nine>:



void nine(bool activeDP){
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8004126:	2102      	movs	r1, #2
 8004128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800412c:	f7fe ffea 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8004130:	2101      	movs	r1, #1
 8004132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004136:	f7fe ffe5 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800413a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800413e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004142:	f7fe ffdf 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8004146:	2120      	movs	r1, #32
 8004148:	481d      	ldr	r0, [pc, #116]	; (80041c0 <nine+0xa4>)
 800414a:	f7fe ffdb 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800414e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004156:	f7fe ffd5 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800415a:	2108      	movs	r1, #8
 800415c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004160:	f7fe ffd0 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8004164:	2110      	movs	r1, #16
 8004166:	4816      	ldr	r0, [pc, #88]	; (80041c0 <nine+0xa4>)
 8004168:	f7fe ffcc 	bl	8003104 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 800416c:	2102      	movs	r1, #2
 800416e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004172:	f7fe ffd5 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8004176:	2101      	movs	r1, #1
 8004178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800417c:	f7fe ffd0 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8004180:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004188:	f7fe ffca 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800418c:	2108      	movs	r1, #8
 800418e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004192:	f7fe ffc5 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8004196:	2110      	movs	r1, #16
 8004198:	4809      	ldr	r0, [pc, #36]	; (80041c0 <nine+0xa4>)
 800419a:	f7fe ffc1 	bl	8003120 <LL_GPIO_ResetOutputPin>

	if(activeDP)
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d004      	beq.n	80041ae <nine+0x92>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80041a4:	2102      	movs	r1, #2
 80041a6:	4806      	ldr	r0, [pc, #24]	; (80041c0 <nine+0xa4>)
 80041a8:	f7fe ffba 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 80041ac:	e003      	b.n	80041b6 <nine+0x9a>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80041ae:	2102      	movs	r1, #2
 80041b0:	4803      	ldr	r0, [pc, #12]	; (80041c0 <nine+0xa4>)
 80041b2:	f7fe ffa7 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	48000400 	.word	0x48000400

080041c4 <zero>:


void zero(bool activeDP){
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80041ce:	2102      	movs	r1, #2
 80041d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041d4:	f7fe ff96 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80041d8:	2101      	movs	r1, #1
 80041da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041de:	f7fe ff91 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80041e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041ea:	f7fe ff8b 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80041ee:	2120      	movs	r1, #32
 80041f0:	4820      	ldr	r0, [pc, #128]	; (8004274 <zero+0xb0>)
 80041f2:	f7fe ff87 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80041f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041fe:	f7fe ff81 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8004202:	2108      	movs	r1, #8
 8004204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004208:	f7fe ff7c 	bl	8003104 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800420c:	2110      	movs	r1, #16
 800420e:	4819      	ldr	r0, [pc, #100]	; (8004274 <zero+0xb0>)
 8004210:	f7fe ff78 	bl	8003104 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8004214:	2102      	movs	r1, #2
 8004216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800421a:	f7fe ff81 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 800421e:	2101      	movs	r1, #1
 8004220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004224:	f7fe ff7c 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8004228:	f44f 7180 	mov.w	r1, #256	; 0x100
 800422c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004230:	f7fe ff76 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8004234:	2120      	movs	r1, #32
 8004236:	480f      	ldr	r0, [pc, #60]	; (8004274 <zero+0xb0>)
 8004238:	f7fe ff72 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800423c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004244:	f7fe ff6c 	bl	8003120 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8004248:	2108      	movs	r1, #8
 800424a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800424e:	f7fe ff67 	bl	8003120 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);

	if(activeDP)
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d004      	beq.n	8004262 <zero+0x9e>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8004258:	2102      	movs	r1, #2
 800425a:	4806      	ldr	r0, [pc, #24]	; (8004274 <zero+0xb0>)
 800425c:	f7fe ff60 	bl	8003120 <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8004260:	e003      	b.n	800426a <zero+0xa6>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8004262:	2102      	movs	r1, #2
 8004264:	4803      	ldr	r0, [pc, #12]	; (8004274 <zero+0xb0>)
 8004266:	f7fe ff4d 	bl	8003104 <LL_GPIO_SetOutputPin>
}
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	48000400 	.word	0x48000400

08004278 <HTS221_readArray>:
	i2c_master_write(value, reg_addr, addres_hts221, 0);
}


void HTS221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af02      	add	r7, sp, #8
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	70fb      	strb	r3, [r7, #3]
 8004284:	4613      	mov	r3, r2
 8004286:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres_hts221, 1);
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <HTS221_readArray+0x2c>)
 800428a:	7818      	ldrb	r0, [r3, #0]
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	78b9      	ldrb	r1, [r7, #2]
 8004290:	2301      	movs	r3, #1
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	4603      	mov	r3, r0
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fd f990 	bl	80015bc <i2c_master_read>
}
 800429c:	bf00      	nop
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	2000000a 	.word	0x2000000a

080042a8 <HTS221_get_temp>:


float HTS221_get_temp()
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0
	int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
	int16_t T0_degC, T1_degC;
	uint8_t data[4], tmp;
	int32_t tmp1;

	HTS221_readArray(data, 0x32, 2);
 80042ae:	f107 0308 	add.w	r3, r7, #8
 80042b2:	2202      	movs	r2, #2
 80042b4:	2132      	movs	r1, #50	; 0x32
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff ffde 	bl	8004278 <HTS221_readArray>
    HTS221_readArray(&tmp, 0x35, 1);
 80042bc:	1dfb      	adds	r3, r7, #7
 80042be:	2201      	movs	r2, #1
 80042c0:	2135      	movs	r1, #53	; 0x35
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff ffd8 	bl	8004278 <HTS221_readArray>

    T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)data[0]);
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	b21b      	sxth	r3, r3
 80042ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d2:	b21a      	sxth	r2, r3
 80042d4:	7a3b      	ldrb	r3, [r7, #8]
 80042d6:	b21b      	sxth	r3, r3
 80042d8:	4313      	orrs	r3, r2
 80042da:	83fb      	strh	r3, [r7, #30]
    T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)data[1]);
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	019b      	lsls	r3, r3, #6
 80042e0:	b21b      	sxth	r3, r3
 80042e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e6:	b21a      	sxth	r2, r3
 80042e8:	7a7b      	ldrb	r3, [r7, #9]
 80042ea:	b21b      	sxth	r3, r3
 80042ec:	4313      	orrs	r3, r2
 80042ee:	83bb      	strh	r3, [r7, #28]
    T0_degC = T0_degC_x8_u16>>3;
 80042f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80042f4:	10db      	asrs	r3, r3, #3
 80042f6:	837b      	strh	r3, [r7, #26]
    T1_degC = T1_degC_x8_u16>>3;
 80042f8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80042fc:	10db      	asrs	r3, r3, #3
 80042fe:	833b      	strh	r3, [r7, #24]


    HTS221_readArray(data, 0x3C, 4);
 8004300:	f107 0308 	add.w	r3, r7, #8
 8004304:	2204      	movs	r2, #4
 8004306:	213c      	movs	r1, #60	; 0x3c
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff ffb5 	bl	8004278 <HTS221_readArray>

    T0_out = (((uint16_t)data[1])<<8) | (uint16_t)data[0];
 800430e:	7a7b      	ldrb	r3, [r7, #9]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	b21a      	sxth	r2, r3
 8004314:	7a3b      	ldrb	r3, [r7, #8]
 8004316:	b21b      	sxth	r3, r3
 8004318:	4313      	orrs	r3, r2
 800431a:	82fb      	strh	r3, [r7, #22]
    T1_out = (((uint16_t)data[3])<<8) | (uint16_t)data[2];
 800431c:	7afb      	ldrb	r3, [r7, #11]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	b21a      	sxth	r2, r3
 8004322:	7abb      	ldrb	r3, [r7, #10]
 8004324:	b21b      	sxth	r3, r3
 8004326:	4313      	orrs	r3, r2
 8004328:	82bb      	strh	r3, [r7, #20]

    HTS221_readArray(data, 0x2A, 2);
 800432a:	f107 0308 	add.w	r3, r7, #8
 800432e:	2202      	movs	r2, #2
 8004330:	212a      	movs	r1, #42	; 0x2a
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ffa0 	bl	8004278 <HTS221_readArray>

    T_out = (((uint16_t)data[1])<<8) | (uint16_t)data[0];
 8004338:	7a7b      	ldrb	r3, [r7, #9]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	b21a      	sxth	r2, r3
 800433e:	7a3b      	ldrb	r3, [r7, #8]
 8004340:	b21b      	sxth	r3, r3
 8004342:	4313      	orrs	r3, r2
 8004344:	827b      	strh	r3, [r7, #18]


    tmp1 = ((T_out - T0_out)) * ((int32_t)(T1_degC - T0_degC)*10);
 8004346:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800434a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800434e:	1ad1      	subs	r1, r2, r3
 8004350:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004354:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004358:	1ad2      	subs	r2, r2, r3
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	fb03 f301 	mul.w	r3, r3, r1
 8004366:	60fb      	str	r3, [r7, #12]


    if(((tmp1 /(T1_out - T0_out) + T0_degC*10) / 10.0f) >= 100)
 8004368:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800436c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	fb92 f1f3 	sdiv	r1, r2, r3
 8004378:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800437c:	4613      	mov	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	440b      	add	r3, r1
 8004386:	ee07 3a90 	vmov	s15, r3
 800438a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800438e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004392:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004396:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004424 <HTS221_get_temp+0x17c>
 800439a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a2:	db02      	blt.n	80043aa <HTS221_get_temp+0x102>
		return 99.9;
 80043a4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8004428 <HTS221_get_temp+0x180>
 80043a8:	e037      	b.n	800441a <HTS221_get_temp+0x172>


	if(((tmp1 /(T1_out - T0_out) + T0_degC*10) / 10.0f) <= -100)
 80043aa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80043ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	fb92 f1f3 	sdiv	r1, r2, r3
 80043ba:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	440b      	add	r3, r1
 80043c8:	ee07 3a90 	vmov	s15, r3
 80043cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043d0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80043d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043d8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800442c <HTS221_get_temp+0x184>
 80043dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e4:	d802      	bhi.n	80043ec <HTS221_get_temp+0x144>
		return -99.9;
 80043e6:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004430 <HTS221_get_temp+0x188>
 80043ea:	e016      	b.n	800441a <HTS221_get_temp+0x172>


	return (tmp1 /(T1_out - T0_out) + T0_degC*10) / 10.0f;
 80043ec:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80043f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	fb92 f1f3 	sdiv	r1, r2, r3
 80043fc:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	440b      	add	r3, r1
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004412:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004416:	eec7 7a26 	vdiv.f32	s15, s14, s13

}
 800441a:	eeb0 0a67 	vmov.f32	s0, s15
 800441e:	3720      	adds	r7, #32
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	42c80000 	.word	0x42c80000
 8004428:	42c7cccd 	.word	0x42c7cccd
 800442c:	c2c80000 	.word	0xc2c80000
 8004430:	c2c7cccd 	.word	0xc2c7cccd

08004434 <HTS221_get_relhum>:


int HTS221_get_relhum()
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
	uint8_t data[2];
	int32_t tmp;
	float value;


	HTS221_readArray(data, 0x30, 2);
 800443a:	463b      	mov	r3, r7
 800443c:	2202      	movs	r2, #2
 800443e:	2130      	movs	r1, #48	; 0x30
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff ff19 	bl	8004278 <HTS221_readArray>
	H0_rh = data[0]>>1;
 8004446:	783b      	ldrb	r3, [r7, #0]
 8004448:	085b      	lsrs	r3, r3, #1
 800444a:	b2db      	uxtb	r3, r3
 800444c:	827b      	strh	r3, [r7, #18]
	H1_rh = data[1]>>1;
 800444e:	787b      	ldrb	r3, [r7, #1]
 8004450:	085b      	lsrs	r3, r3, #1
 8004452:	b2db      	uxtb	r3, r3
 8004454:	823b      	strh	r3, [r7, #16]


	HTS221_readArray(data, 0x36, 2);
 8004456:	463b      	mov	r3, r7
 8004458:	2202      	movs	r2, #2
 800445a:	2136      	movs	r1, #54	; 0x36
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff ff0b 	bl	8004278 <HTS221_readArray>
	H0_T0_out = (((uint16_t)data[1])<<8) | (uint16_t)data[0];
 8004462:	787b      	ldrb	r3, [r7, #1]
 8004464:	021b      	lsls	r3, r3, #8
 8004466:	b21a      	sxth	r2, r3
 8004468:	783b      	ldrb	r3, [r7, #0]
 800446a:	b21b      	sxth	r3, r3
 800446c:	4313      	orrs	r3, r2
 800446e:	81fb      	strh	r3, [r7, #14]

	HTS221_readArray(data, 0x3A, 2);
 8004470:	463b      	mov	r3, r7
 8004472:	2202      	movs	r2, #2
 8004474:	213a      	movs	r1, #58	; 0x3a
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff fefe 	bl	8004278 <HTS221_readArray>
	H1_T0_out = (((uint16_t)data[1])<<8) | (uint16_t)data[0];
 800447c:	787b      	ldrb	r3, [r7, #1]
 800447e:	021b      	lsls	r3, r3, #8
 8004480:	b21a      	sxth	r2, r3
 8004482:	783b      	ldrb	r3, [r7, #0]
 8004484:	b21b      	sxth	r3, r3
 8004486:	4313      	orrs	r3, r2
 8004488:	81bb      	strh	r3, [r7, #12]


	HTS221_readArray(data, 0x28, 2);
 800448a:	463b      	mov	r3, r7
 800448c:	2202      	movs	r2, #2
 800448e:	2128      	movs	r1, #40	; 0x28
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff fef1 	bl	8004278 <HTS221_readArray>
	H_T_out = (((uint16_t)data[1])<<8) | (uint16_t)data[0];
 8004496:	787b      	ldrb	r3, [r7, #1]
 8004498:	021b      	lsls	r3, r3, #8
 800449a:	b21a      	sxth	r2, r3
 800449c:	783b      	ldrb	r3, [r7, #0]
 800449e:	b21b      	sxth	r3, r3
 80044a0:	4313      	orrs	r3, r2
 80044a2:	817b      	strh	r3, [r7, #10]



	tmp = ((int32_t)(H_T_out - H0_T0_out)) * ((int32_t)(H1_rh - H0_rh)*10);
 80044a4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80044a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044ac:	1ad1      	subs	r1, r2, r3
 80044ae:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80044b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80044b6:	1ad2      	subs	r2, r2, r3
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	fb03 f301 	mul.w	r3, r3, r1
 80044c4:	607b      	str	r3, [r7, #4]
	value = (tmp/(H1_T0_out - H0_T0_out) + H0_rh*10);
 80044c6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80044ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	fb92 f1f3 	sdiv	r1, r2, r3
 80044d6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	440b      	add	r3, r1
 80044e4:	ee07 3a90 	vmov	s15, r3
 80044e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044ec:	edc7 7a05 	vstr	s15, [r7, #20]


	 if(value>1000)
 80044f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80044f4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8004524 <HTS221_get_relhum+0xf0>
 80044f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004500:	dd01      	ble.n	8004506 <HTS221_get_relhum+0xd2>
		 value = 1000;
 8004502:	4b09      	ldr	r3, [pc, #36]	; (8004528 <HTS221_get_relhum+0xf4>)
 8004504:	617b      	str	r3, [r7, #20]


	return (int)(value/10);
 8004506:	ed97 7a05 	vldr	s14, [r7, #20]
 800450a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800450e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004516:	ee17 3a90 	vmov	r3, s15


}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	447a0000 	.word	0x447a0000
 8004528:	447a0000 	.word	0x447a0000

0800452c <LBS25HB_read_byte>:
uint8_t addres1 = LBS25HB_DEVICE_ADDRESS_0;



uint8_t LBS25HB_read_byte(uint8_t reg_addr)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af02      	add	r7, sp, #8
 8004532:	4603      	mov	r3, r0
 8004534:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8004536:	2300      	movs	r3, #0
 8004538:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres1, 0));
 800453a:	4b08      	ldr	r3, [pc, #32]	; (800455c <LBS25HB_read_byte+0x30>)
 800453c:	7819      	ldrb	r1, [r3, #0]
 800453e:	79fa      	ldrb	r2, [r7, #7]
 8004540:	f107 000f 	add.w	r0, r7, #15
 8004544:	2300      	movs	r3, #0
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	460b      	mov	r3, r1
 800454a:	2101      	movs	r1, #1
 800454c:	f7fd f836 	bl	80015bc <i2c_master_read>
 8004550:	4603      	mov	r3, r0
 8004552:	781b      	ldrb	r3, [r3, #0]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	2000000b 	.word	0x2000000b

08004560 <LBS25HB_write_byte>:


void LBS25HB_write_byte(uint8_t reg_addr, uint8_t value)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	460a      	mov	r2, r1
 800456a:	71fb      	strb	r3, [r7, #7]
 800456c:	4613      	mov	r3, r2
 800456e:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres1, 0);
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <LBS25HB_write_byte+0x28>)
 8004572:	781a      	ldrb	r2, [r3, #0]
 8004574:	79f9      	ldrb	r1, [r7, #7]
 8004576:	79b8      	ldrb	r0, [r7, #6]
 8004578:	2300      	movs	r3, #0
 800457a:	f7fc ffdb 	bl	8001534 <i2c_master_write>
}
 800457e:	bf00      	nop
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	2000000b 	.word	0x2000000b

0800458c <LBS25HB_readArray>:


void LBS25HB_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af02      	add	r7, sp, #8
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	70fb      	strb	r3, [r7, #3]
 8004598:	4613      	mov	r3, r2
 800459a:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres1, 1);
 800459c:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <LBS25HB_readArray+0x2c>)
 800459e:	7818      	ldrb	r0, [r3, #0]
 80045a0:	78fa      	ldrb	r2, [r7, #3]
 80045a2:	78b9      	ldrb	r1, [r7, #2]
 80045a4:	2301      	movs	r3, #1
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	4603      	mov	r3, r0
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fd f806 	bl	80015bc <i2c_master_read>
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	2000000b 	.word	0x2000000b

080045bc <LBS25HB_init>:


uint8_t LBS25HB_init(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 80045c2:	2301      	movs	r3, #1
 80045c4:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 80045c6:	2064      	movs	r0, #100	; 0x64
 80045c8:	f7fd ffb0 	bl	800252c <LL_mDelay>

	uint8_t val = LBS25HB_read_byte(LBS25HB_WHO_AM_I_ADDRES);
 80045cc:	200f      	movs	r0, #15
 80045ce:	f7ff ffad 	bl	800452c <LBS25HB_read_byte>
 80045d2:	4603      	mov	r3, r0
 80045d4:	71bb      	strb	r3, [r7, #6]

	if(val == LBS25HB_WHO_AM_I_VALUE)
 80045d6:	79bb      	ldrb	r3, [r7, #6]
 80045d8:	2bbd      	cmp	r3, #189	; 0xbd
 80045da:	d102      	bne.n	80045e2 <LBS25HB_init+0x26>
	{
		status = 1;
 80045dc:	2301      	movs	r3, #1
 80045de:	71fb      	strb	r3, [r7, #7]
 80045e0:	e00f      	b.n	8004602 <LBS25HB_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres1 = LBS25HB_DEVICE_ADDRESS_1;
 80045e2:	4b0e      	ldr	r3, [pc, #56]	; (800461c <LBS25HB_init+0x60>)
 80045e4:	22b8      	movs	r2, #184	; 0xb8
 80045e6:	701a      	strb	r2, [r3, #0]
		val = LBS25HB_read_byte(LBS25HB_WHO_AM_I_ADDRES);
 80045e8:	200f      	movs	r0, #15
 80045ea:	f7ff ff9f 	bl	800452c <LBS25HB_read_byte>
 80045ee:	4603      	mov	r3, r0
 80045f0:	71bb      	strb	r3, [r7, #6]
		if(val == LBS25HB_WHO_AM_I_VALUE)
 80045f2:	79bb      	ldrb	r3, [r7, #6]
 80045f4:	2bbd      	cmp	r3, #189	; 0xbd
 80045f6:	d102      	bne.n	80045fe <LBS25HB_init+0x42>
		{
			status = 1;
 80045f8:	2301      	movs	r3, #1
 80045fa:	71fb      	strb	r3, [r7, #7]
 80045fc:	e001      	b.n	8004602 <LBS25HB_init+0x46>
		}
		else
		{
			status = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	71fb      	strb	r3, [r7, #7]
		}
	}



	uint8_t ctrl1 = 0xC0;
 8004602:	23c0      	movs	r3, #192	; 0xc0
 8004604:	717b      	strb	r3, [r7, #5]
	LBS25HB_write_byte(LBS25HB_ADDRESS_CTRL1, ctrl1);
 8004606:	797b      	ldrb	r3, [r7, #5]
 8004608:	4619      	mov	r1, r3
 800460a:	2020      	movs	r0, #32
 800460c:	f7ff ffa8 	bl	8004560 <LBS25HB_write_byte>



	return status;
 8004610:	79fb      	ldrb	r3, [r7, #7]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	2000000b 	.word	0x2000000b

08004620 <LBS25HB_get_pres>:



float LBS25HB_get_pres(){
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0


	uint8_t press[3];
	float pressure;

	LBS25HB_readArray( press, LBS25HB_ADDRESS_PRES_XL, 3);
 8004626:	463b      	mov	r3, r7
 8004628:	2203      	movs	r2, #3
 800462a:	2128      	movs	r1, #40	; 0x28
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff ffad 	bl	800458c <LBS25HB_readArray>

	pressure = ((uint32_t)press[2]) << 16 | ((uint16_t)press[1]) << 8 | press[0];
 8004632:	78bb      	ldrb	r3, [r7, #2]
 8004634:	041b      	lsls	r3, r3, #16
 8004636:	787a      	ldrb	r2, [r7, #1]
 8004638:	0212      	lsls	r2, r2, #8
 800463a:	4313      	orrs	r3, r2
 800463c:	783a      	ldrb	r2, [r7, #0]
 800463e:	4313      	orrs	r3, r2
 8004640:	ee07 3a90 	vmov	s15, r3
 8004644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004648:	edc7 7a01 	vstr	s15, [r7, #4]
	pressure/=4096;
 800464c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004650:	eddf 6a06 	vldr	s13, [pc, #24]	; 800466c <LBS25HB_get_pres+0x4c>
 8004654:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004658:	edc7 7a01 	vstr	s15, [r7, #4]



	return pressure*1.00;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	ee07 3a90 	vmov	s15, r3


}
 8004662:	eeb0 0a67 	vmov.f32	s0, s15
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	45800000 	.word	0x45800000

08004670 <LBS25HB_calculate_altitude>:


float LBS25HB_calculate_altitude(float pressure)
{
 8004670:	b590      	push	{r4, r7, lr}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	ed87 0a01 	vstr	s0, [r7, #4]
	return (pow((pressure/1013.25), 1.0/5.2559)-1)/(-0.0000225577);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fb ff64 	bl	8000548 <__aeabi_f2d>
 8004680:	a31c      	add	r3, pc, #112	; (adr r3, 80046f4 <LBS25HB_calculate_altitude+0x84>)
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	f7fc f8e1 	bl	800084c <__aeabi_ddiv>
 800468a:	4603      	mov	r3, r0
 800468c:	460c      	mov	r4, r1
 800468e:	ec44 3b17 	vmov	d7, r3, r4
 8004692:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80046e0 <LBS25HB_calculate_altitude+0x70>
 8004696:	eeb0 0a47 	vmov.f32	s0, s14
 800469a:	eef0 0a67 	vmov.f32	s1, s15
 800469e:	f002 f8d9 	bl	8006854 <pow>
 80046a2:	ec51 0b10 	vmov	r0, r1, d0
 80046a6:	f04f 0200 	mov.w	r2, #0
 80046aa:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <LBS25HB_calculate_altitude+0x80>)
 80046ac:	f7fb fdec 	bl	8000288 <__aeabi_dsub>
 80046b0:	4603      	mov	r3, r0
 80046b2:	460c      	mov	r4, r1
 80046b4:	4618      	mov	r0, r3
 80046b6:	4621      	mov	r1, r4
 80046b8:	a30b      	add	r3, pc, #44	; (adr r3, 80046e8 <LBS25HB_calculate_altitude+0x78>)
 80046ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046be:	f7fc f8c5 	bl	800084c <__aeabi_ddiv>
 80046c2:	4603      	mov	r3, r0
 80046c4:	460c      	mov	r4, r1
 80046c6:	4618      	mov	r0, r3
 80046c8:	4621      	mov	r1, r4
 80046ca:	f7fc fa6d 	bl	8000ba8 <__aeabi_d2f>
 80046ce:	4603      	mov	r3, r0
 80046d0:	ee07 3a90 	vmov	s15, r3
}
 80046d4:	eeb0 0a67 	vmov.f32	s0, s15
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd90      	pop	{r4, r7, pc}
 80046de:	bf00      	nop
 80046e0:	744b1147 	.word	0x744b1147
 80046e4:	3fc85a84 	.word	0x3fc85a84
 80046e8:	572255df 	.word	0x572255df
 80046ec:	bef7a749 	.word	0xbef7a749
 80046f0:	3ff00000 	.word	0x3ff00000
 80046f4:	00000000 	.word	0x00000000
 80046f8:	408faa00 	.word	0x408faa00

080046fc <__errno>:
 80046fc:	4b01      	ldr	r3, [pc, #4]	; (8004704 <__errno+0x8>)
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	2000000c 	.word	0x2000000c

08004708 <__libc_init_array>:
 8004708:	b570      	push	{r4, r5, r6, lr}
 800470a:	4e0d      	ldr	r6, [pc, #52]	; (8004740 <__libc_init_array+0x38>)
 800470c:	4c0d      	ldr	r4, [pc, #52]	; (8004744 <__libc_init_array+0x3c>)
 800470e:	1ba4      	subs	r4, r4, r6
 8004710:	10a4      	asrs	r4, r4, #2
 8004712:	2500      	movs	r5, #0
 8004714:	42a5      	cmp	r5, r4
 8004716:	d109      	bne.n	800472c <__libc_init_array+0x24>
 8004718:	4e0b      	ldr	r6, [pc, #44]	; (8004748 <__libc_init_array+0x40>)
 800471a:	4c0c      	ldr	r4, [pc, #48]	; (800474c <__libc_init_array+0x44>)
 800471c:	f003 fb72 	bl	8007e04 <_init>
 8004720:	1ba4      	subs	r4, r4, r6
 8004722:	10a4      	asrs	r4, r4, #2
 8004724:	2500      	movs	r5, #0
 8004726:	42a5      	cmp	r5, r4
 8004728:	d105      	bne.n	8004736 <__libc_init_array+0x2e>
 800472a:	bd70      	pop	{r4, r5, r6, pc}
 800472c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004730:	4798      	blx	r3
 8004732:	3501      	adds	r5, #1
 8004734:	e7ee      	b.n	8004714 <__libc_init_array+0xc>
 8004736:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800473a:	4798      	blx	r3
 800473c:	3501      	adds	r5, #1
 800473e:	e7f2      	b.n	8004726 <__libc_init_array+0x1e>
 8004740:	08008140 	.word	0x08008140
 8004744:	08008140 	.word	0x08008140
 8004748:	08008140 	.word	0x08008140
 800474c:	08008144 	.word	0x08008144

08004750 <malloc>:
 8004750:	4b02      	ldr	r3, [pc, #8]	; (800475c <malloc+0xc>)
 8004752:	4601      	mov	r1, r0
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	f000 b859 	b.w	800480c <_malloc_r>
 800475a:	bf00      	nop
 800475c:	2000000c 	.word	0x2000000c

08004760 <memset>:
 8004760:	4402      	add	r2, r0
 8004762:	4603      	mov	r3, r0
 8004764:	4293      	cmp	r3, r2
 8004766:	d100      	bne.n	800476a <memset+0xa>
 8004768:	4770      	bx	lr
 800476a:	f803 1b01 	strb.w	r1, [r3], #1
 800476e:	e7f9      	b.n	8004764 <memset+0x4>

08004770 <_free_r>:
 8004770:	b538      	push	{r3, r4, r5, lr}
 8004772:	4605      	mov	r5, r0
 8004774:	2900      	cmp	r1, #0
 8004776:	d045      	beq.n	8004804 <_free_r+0x94>
 8004778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800477c:	1f0c      	subs	r4, r1, #4
 800477e:	2b00      	cmp	r3, #0
 8004780:	bfb8      	it	lt
 8004782:	18e4      	addlt	r4, r4, r3
 8004784:	f001 fbc1 	bl	8005f0a <__malloc_lock>
 8004788:	4a1f      	ldr	r2, [pc, #124]	; (8004808 <_free_r+0x98>)
 800478a:	6813      	ldr	r3, [r2, #0]
 800478c:	4610      	mov	r0, r2
 800478e:	b933      	cbnz	r3, 800479e <_free_r+0x2e>
 8004790:	6063      	str	r3, [r4, #4]
 8004792:	6014      	str	r4, [r2, #0]
 8004794:	4628      	mov	r0, r5
 8004796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800479a:	f001 bbb7 	b.w	8005f0c <__malloc_unlock>
 800479e:	42a3      	cmp	r3, r4
 80047a0:	d90c      	bls.n	80047bc <_free_r+0x4c>
 80047a2:	6821      	ldr	r1, [r4, #0]
 80047a4:	1862      	adds	r2, r4, r1
 80047a6:	4293      	cmp	r3, r2
 80047a8:	bf04      	itt	eq
 80047aa:	681a      	ldreq	r2, [r3, #0]
 80047ac:	685b      	ldreq	r3, [r3, #4]
 80047ae:	6063      	str	r3, [r4, #4]
 80047b0:	bf04      	itt	eq
 80047b2:	1852      	addeq	r2, r2, r1
 80047b4:	6022      	streq	r2, [r4, #0]
 80047b6:	6004      	str	r4, [r0, #0]
 80047b8:	e7ec      	b.n	8004794 <_free_r+0x24>
 80047ba:	4613      	mov	r3, r2
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	b10a      	cbz	r2, 80047c4 <_free_r+0x54>
 80047c0:	42a2      	cmp	r2, r4
 80047c2:	d9fa      	bls.n	80047ba <_free_r+0x4a>
 80047c4:	6819      	ldr	r1, [r3, #0]
 80047c6:	1858      	adds	r0, r3, r1
 80047c8:	42a0      	cmp	r0, r4
 80047ca:	d10b      	bne.n	80047e4 <_free_r+0x74>
 80047cc:	6820      	ldr	r0, [r4, #0]
 80047ce:	4401      	add	r1, r0
 80047d0:	1858      	adds	r0, r3, r1
 80047d2:	4282      	cmp	r2, r0
 80047d4:	6019      	str	r1, [r3, #0]
 80047d6:	d1dd      	bne.n	8004794 <_free_r+0x24>
 80047d8:	6810      	ldr	r0, [r2, #0]
 80047da:	6852      	ldr	r2, [r2, #4]
 80047dc:	605a      	str	r2, [r3, #4]
 80047de:	4401      	add	r1, r0
 80047e0:	6019      	str	r1, [r3, #0]
 80047e2:	e7d7      	b.n	8004794 <_free_r+0x24>
 80047e4:	d902      	bls.n	80047ec <_free_r+0x7c>
 80047e6:	230c      	movs	r3, #12
 80047e8:	602b      	str	r3, [r5, #0]
 80047ea:	e7d3      	b.n	8004794 <_free_r+0x24>
 80047ec:	6820      	ldr	r0, [r4, #0]
 80047ee:	1821      	adds	r1, r4, r0
 80047f0:	428a      	cmp	r2, r1
 80047f2:	bf04      	itt	eq
 80047f4:	6811      	ldreq	r1, [r2, #0]
 80047f6:	6852      	ldreq	r2, [r2, #4]
 80047f8:	6062      	str	r2, [r4, #4]
 80047fa:	bf04      	itt	eq
 80047fc:	1809      	addeq	r1, r1, r0
 80047fe:	6021      	streq	r1, [r4, #0]
 8004800:	605c      	str	r4, [r3, #4]
 8004802:	e7c7      	b.n	8004794 <_free_r+0x24>
 8004804:	bd38      	pop	{r3, r4, r5, pc}
 8004806:	bf00      	nop
 8004808:	20000208 	.word	0x20000208

0800480c <_malloc_r>:
 800480c:	b570      	push	{r4, r5, r6, lr}
 800480e:	1ccd      	adds	r5, r1, #3
 8004810:	f025 0503 	bic.w	r5, r5, #3
 8004814:	3508      	adds	r5, #8
 8004816:	2d0c      	cmp	r5, #12
 8004818:	bf38      	it	cc
 800481a:	250c      	movcc	r5, #12
 800481c:	2d00      	cmp	r5, #0
 800481e:	4606      	mov	r6, r0
 8004820:	db01      	blt.n	8004826 <_malloc_r+0x1a>
 8004822:	42a9      	cmp	r1, r5
 8004824:	d903      	bls.n	800482e <_malloc_r+0x22>
 8004826:	230c      	movs	r3, #12
 8004828:	6033      	str	r3, [r6, #0]
 800482a:	2000      	movs	r0, #0
 800482c:	bd70      	pop	{r4, r5, r6, pc}
 800482e:	f001 fb6c 	bl	8005f0a <__malloc_lock>
 8004832:	4a21      	ldr	r2, [pc, #132]	; (80048b8 <_malloc_r+0xac>)
 8004834:	6814      	ldr	r4, [r2, #0]
 8004836:	4621      	mov	r1, r4
 8004838:	b991      	cbnz	r1, 8004860 <_malloc_r+0x54>
 800483a:	4c20      	ldr	r4, [pc, #128]	; (80048bc <_malloc_r+0xb0>)
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	b91b      	cbnz	r3, 8004848 <_malloc_r+0x3c>
 8004840:	4630      	mov	r0, r6
 8004842:	f000 fca1 	bl	8005188 <_sbrk_r>
 8004846:	6020      	str	r0, [r4, #0]
 8004848:	4629      	mov	r1, r5
 800484a:	4630      	mov	r0, r6
 800484c:	f000 fc9c 	bl	8005188 <_sbrk_r>
 8004850:	1c43      	adds	r3, r0, #1
 8004852:	d124      	bne.n	800489e <_malloc_r+0x92>
 8004854:	230c      	movs	r3, #12
 8004856:	6033      	str	r3, [r6, #0]
 8004858:	4630      	mov	r0, r6
 800485a:	f001 fb57 	bl	8005f0c <__malloc_unlock>
 800485e:	e7e4      	b.n	800482a <_malloc_r+0x1e>
 8004860:	680b      	ldr	r3, [r1, #0]
 8004862:	1b5b      	subs	r3, r3, r5
 8004864:	d418      	bmi.n	8004898 <_malloc_r+0x8c>
 8004866:	2b0b      	cmp	r3, #11
 8004868:	d90f      	bls.n	800488a <_malloc_r+0x7e>
 800486a:	600b      	str	r3, [r1, #0]
 800486c:	50cd      	str	r5, [r1, r3]
 800486e:	18cc      	adds	r4, r1, r3
 8004870:	4630      	mov	r0, r6
 8004872:	f001 fb4b 	bl	8005f0c <__malloc_unlock>
 8004876:	f104 000b 	add.w	r0, r4, #11
 800487a:	1d23      	adds	r3, r4, #4
 800487c:	f020 0007 	bic.w	r0, r0, #7
 8004880:	1ac3      	subs	r3, r0, r3
 8004882:	d0d3      	beq.n	800482c <_malloc_r+0x20>
 8004884:	425a      	negs	r2, r3
 8004886:	50e2      	str	r2, [r4, r3]
 8004888:	e7d0      	b.n	800482c <_malloc_r+0x20>
 800488a:	428c      	cmp	r4, r1
 800488c:	684b      	ldr	r3, [r1, #4]
 800488e:	bf16      	itet	ne
 8004890:	6063      	strne	r3, [r4, #4]
 8004892:	6013      	streq	r3, [r2, #0]
 8004894:	460c      	movne	r4, r1
 8004896:	e7eb      	b.n	8004870 <_malloc_r+0x64>
 8004898:	460c      	mov	r4, r1
 800489a:	6849      	ldr	r1, [r1, #4]
 800489c:	e7cc      	b.n	8004838 <_malloc_r+0x2c>
 800489e:	1cc4      	adds	r4, r0, #3
 80048a0:	f024 0403 	bic.w	r4, r4, #3
 80048a4:	42a0      	cmp	r0, r4
 80048a6:	d005      	beq.n	80048b4 <_malloc_r+0xa8>
 80048a8:	1a21      	subs	r1, r4, r0
 80048aa:	4630      	mov	r0, r6
 80048ac:	f000 fc6c 	bl	8005188 <_sbrk_r>
 80048b0:	3001      	adds	r0, #1
 80048b2:	d0cf      	beq.n	8004854 <_malloc_r+0x48>
 80048b4:	6025      	str	r5, [r4, #0]
 80048b6:	e7db      	b.n	8004870 <_malloc_r+0x64>
 80048b8:	20000208 	.word	0x20000208
 80048bc:	2000020c 	.word	0x2000020c

080048c0 <__cvt>:
 80048c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048c4:	ec55 4b10 	vmov	r4, r5, d0
 80048c8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80048ca:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80048ce:	2d00      	cmp	r5, #0
 80048d0:	460e      	mov	r6, r1
 80048d2:	4691      	mov	r9, r2
 80048d4:	4619      	mov	r1, r3
 80048d6:	bfb8      	it	lt
 80048d8:	4622      	movlt	r2, r4
 80048da:	462b      	mov	r3, r5
 80048dc:	f027 0720 	bic.w	r7, r7, #32
 80048e0:	bfbb      	ittet	lt
 80048e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80048e6:	461d      	movlt	r5, r3
 80048e8:	2300      	movge	r3, #0
 80048ea:	232d      	movlt	r3, #45	; 0x2d
 80048ec:	bfb8      	it	lt
 80048ee:	4614      	movlt	r4, r2
 80048f0:	2f46      	cmp	r7, #70	; 0x46
 80048f2:	700b      	strb	r3, [r1, #0]
 80048f4:	d004      	beq.n	8004900 <__cvt+0x40>
 80048f6:	2f45      	cmp	r7, #69	; 0x45
 80048f8:	d100      	bne.n	80048fc <__cvt+0x3c>
 80048fa:	3601      	adds	r6, #1
 80048fc:	2102      	movs	r1, #2
 80048fe:	e000      	b.n	8004902 <__cvt+0x42>
 8004900:	2103      	movs	r1, #3
 8004902:	ab03      	add	r3, sp, #12
 8004904:	9301      	str	r3, [sp, #4]
 8004906:	ab02      	add	r3, sp, #8
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	4632      	mov	r2, r6
 800490c:	4653      	mov	r3, sl
 800490e:	ec45 4b10 	vmov	d0, r4, r5
 8004912:	f000 fd29 	bl	8005368 <_dtoa_r>
 8004916:	2f47      	cmp	r7, #71	; 0x47
 8004918:	4680      	mov	r8, r0
 800491a:	d102      	bne.n	8004922 <__cvt+0x62>
 800491c:	f019 0f01 	tst.w	r9, #1
 8004920:	d026      	beq.n	8004970 <__cvt+0xb0>
 8004922:	2f46      	cmp	r7, #70	; 0x46
 8004924:	eb08 0906 	add.w	r9, r8, r6
 8004928:	d111      	bne.n	800494e <__cvt+0x8e>
 800492a:	f898 3000 	ldrb.w	r3, [r8]
 800492e:	2b30      	cmp	r3, #48	; 0x30
 8004930:	d10a      	bne.n	8004948 <__cvt+0x88>
 8004932:	2200      	movs	r2, #0
 8004934:	2300      	movs	r3, #0
 8004936:	4620      	mov	r0, r4
 8004938:	4629      	mov	r1, r5
 800493a:	f7fc f8c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800493e:	b918      	cbnz	r0, 8004948 <__cvt+0x88>
 8004940:	f1c6 0601 	rsb	r6, r6, #1
 8004944:	f8ca 6000 	str.w	r6, [sl]
 8004948:	f8da 3000 	ldr.w	r3, [sl]
 800494c:	4499      	add	r9, r3
 800494e:	2200      	movs	r2, #0
 8004950:	2300      	movs	r3, #0
 8004952:	4620      	mov	r0, r4
 8004954:	4629      	mov	r1, r5
 8004956:	f7fc f8b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800495a:	b938      	cbnz	r0, 800496c <__cvt+0xac>
 800495c:	2230      	movs	r2, #48	; 0x30
 800495e:	9b03      	ldr	r3, [sp, #12]
 8004960:	454b      	cmp	r3, r9
 8004962:	d205      	bcs.n	8004970 <__cvt+0xb0>
 8004964:	1c59      	adds	r1, r3, #1
 8004966:	9103      	str	r1, [sp, #12]
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	e7f8      	b.n	800495e <__cvt+0x9e>
 800496c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004970:	9b03      	ldr	r3, [sp, #12]
 8004972:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004974:	eba3 0308 	sub.w	r3, r3, r8
 8004978:	4640      	mov	r0, r8
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	b004      	add	sp, #16
 800497e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004982 <__exponent>:
 8004982:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004984:	2900      	cmp	r1, #0
 8004986:	4604      	mov	r4, r0
 8004988:	bfba      	itte	lt
 800498a:	4249      	neglt	r1, r1
 800498c:	232d      	movlt	r3, #45	; 0x2d
 800498e:	232b      	movge	r3, #43	; 0x2b
 8004990:	2909      	cmp	r1, #9
 8004992:	f804 2b02 	strb.w	r2, [r4], #2
 8004996:	7043      	strb	r3, [r0, #1]
 8004998:	dd20      	ble.n	80049dc <__exponent+0x5a>
 800499a:	f10d 0307 	add.w	r3, sp, #7
 800499e:	461f      	mov	r7, r3
 80049a0:	260a      	movs	r6, #10
 80049a2:	fb91 f5f6 	sdiv	r5, r1, r6
 80049a6:	fb06 1115 	mls	r1, r6, r5, r1
 80049aa:	3130      	adds	r1, #48	; 0x30
 80049ac:	2d09      	cmp	r5, #9
 80049ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80049b2:	f103 32ff 	add.w	r2, r3, #4294967295
 80049b6:	4629      	mov	r1, r5
 80049b8:	dc09      	bgt.n	80049ce <__exponent+0x4c>
 80049ba:	3130      	adds	r1, #48	; 0x30
 80049bc:	3b02      	subs	r3, #2
 80049be:	f802 1c01 	strb.w	r1, [r2, #-1]
 80049c2:	42bb      	cmp	r3, r7
 80049c4:	4622      	mov	r2, r4
 80049c6:	d304      	bcc.n	80049d2 <__exponent+0x50>
 80049c8:	1a10      	subs	r0, r2, r0
 80049ca:	b003      	add	sp, #12
 80049cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ce:	4613      	mov	r3, r2
 80049d0:	e7e7      	b.n	80049a2 <__exponent+0x20>
 80049d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049d6:	f804 2b01 	strb.w	r2, [r4], #1
 80049da:	e7f2      	b.n	80049c2 <__exponent+0x40>
 80049dc:	2330      	movs	r3, #48	; 0x30
 80049de:	4419      	add	r1, r3
 80049e0:	7083      	strb	r3, [r0, #2]
 80049e2:	1d02      	adds	r2, r0, #4
 80049e4:	70c1      	strb	r1, [r0, #3]
 80049e6:	e7ef      	b.n	80049c8 <__exponent+0x46>

080049e8 <_printf_float>:
 80049e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ec:	b08d      	sub	sp, #52	; 0x34
 80049ee:	460c      	mov	r4, r1
 80049f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80049f4:	4616      	mov	r6, r2
 80049f6:	461f      	mov	r7, r3
 80049f8:	4605      	mov	r5, r0
 80049fa:	f001 fa6d 	bl	8005ed8 <_localeconv_r>
 80049fe:	6803      	ldr	r3, [r0, #0]
 8004a00:	9304      	str	r3, [sp, #16]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fb fbe4 	bl	80001d0 <strlen>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8004a0c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a10:	9005      	str	r0, [sp, #20]
 8004a12:	3307      	adds	r3, #7
 8004a14:	f023 0307 	bic.w	r3, r3, #7
 8004a18:	f103 0208 	add.w	r2, r3, #8
 8004a1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a20:	f8d4 b000 	ldr.w	fp, [r4]
 8004a24:	f8c8 2000 	str.w	r2, [r8]
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a30:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a34:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a38:	9307      	str	r3, [sp, #28]
 8004a3a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a42:	4ba7      	ldr	r3, [pc, #668]	; (8004ce0 <_printf_float+0x2f8>)
 8004a44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a48:	f7fc f870 	bl	8000b2c <__aeabi_dcmpun>
 8004a4c:	bb70      	cbnz	r0, 8004aac <_printf_float+0xc4>
 8004a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a52:	4ba3      	ldr	r3, [pc, #652]	; (8004ce0 <_printf_float+0x2f8>)
 8004a54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a58:	f7fc f84a 	bl	8000af0 <__aeabi_dcmple>
 8004a5c:	bb30      	cbnz	r0, 8004aac <_printf_float+0xc4>
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2300      	movs	r3, #0
 8004a62:	4640      	mov	r0, r8
 8004a64:	4649      	mov	r1, r9
 8004a66:	f7fc f839 	bl	8000adc <__aeabi_dcmplt>
 8004a6a:	b110      	cbz	r0, 8004a72 <_printf_float+0x8a>
 8004a6c:	232d      	movs	r3, #45	; 0x2d
 8004a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a72:	4a9c      	ldr	r2, [pc, #624]	; (8004ce4 <_printf_float+0x2fc>)
 8004a74:	4b9c      	ldr	r3, [pc, #624]	; (8004ce8 <_printf_float+0x300>)
 8004a76:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004a7a:	bf8c      	ite	hi
 8004a7c:	4690      	movhi	r8, r2
 8004a7e:	4698      	movls	r8, r3
 8004a80:	2303      	movs	r3, #3
 8004a82:	f02b 0204 	bic.w	r2, fp, #4
 8004a86:	6123      	str	r3, [r4, #16]
 8004a88:	6022      	str	r2, [r4, #0]
 8004a8a:	f04f 0900 	mov.w	r9, #0
 8004a8e:	9700      	str	r7, [sp, #0]
 8004a90:	4633      	mov	r3, r6
 8004a92:	aa0b      	add	r2, sp, #44	; 0x2c
 8004a94:	4621      	mov	r1, r4
 8004a96:	4628      	mov	r0, r5
 8004a98:	f000 f9e6 	bl	8004e68 <_printf_common>
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	f040 808d 	bne.w	8004bbc <_printf_float+0x1d4>
 8004aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa6:	b00d      	add	sp, #52	; 0x34
 8004aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aac:	4642      	mov	r2, r8
 8004aae:	464b      	mov	r3, r9
 8004ab0:	4640      	mov	r0, r8
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	f7fc f83a 	bl	8000b2c <__aeabi_dcmpun>
 8004ab8:	b110      	cbz	r0, 8004ac0 <_printf_float+0xd8>
 8004aba:	4a8c      	ldr	r2, [pc, #560]	; (8004cec <_printf_float+0x304>)
 8004abc:	4b8c      	ldr	r3, [pc, #560]	; (8004cf0 <_printf_float+0x308>)
 8004abe:	e7da      	b.n	8004a76 <_printf_float+0x8e>
 8004ac0:	6861      	ldr	r1, [r4, #4]
 8004ac2:	1c4b      	adds	r3, r1, #1
 8004ac4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004ac8:	a80a      	add	r0, sp, #40	; 0x28
 8004aca:	d13e      	bne.n	8004b4a <_printf_float+0x162>
 8004acc:	2306      	movs	r3, #6
 8004ace:	6063      	str	r3, [r4, #4]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004ad6:	ab09      	add	r3, sp, #36	; 0x24
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	ec49 8b10 	vmov	d0, r8, r9
 8004ade:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ae2:	6022      	str	r2, [r4, #0]
 8004ae4:	f8cd a004 	str.w	sl, [sp, #4]
 8004ae8:	6861      	ldr	r1, [r4, #4]
 8004aea:	4628      	mov	r0, r5
 8004aec:	f7ff fee8 	bl	80048c0 <__cvt>
 8004af0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004af4:	2b47      	cmp	r3, #71	; 0x47
 8004af6:	4680      	mov	r8, r0
 8004af8:	d109      	bne.n	8004b0e <_printf_float+0x126>
 8004afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004afc:	1cd8      	adds	r0, r3, #3
 8004afe:	db02      	blt.n	8004b06 <_printf_float+0x11e>
 8004b00:	6862      	ldr	r2, [r4, #4]
 8004b02:	4293      	cmp	r3, r2
 8004b04:	dd47      	ble.n	8004b96 <_printf_float+0x1ae>
 8004b06:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b0a:	fa5f fa8a 	uxtb.w	sl, sl
 8004b0e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004b12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b14:	d824      	bhi.n	8004b60 <_printf_float+0x178>
 8004b16:	3901      	subs	r1, #1
 8004b18:	4652      	mov	r2, sl
 8004b1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b1e:	9109      	str	r1, [sp, #36]	; 0x24
 8004b20:	f7ff ff2f 	bl	8004982 <__exponent>
 8004b24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b26:	1813      	adds	r3, r2, r0
 8004b28:	2a01      	cmp	r2, #1
 8004b2a:	4681      	mov	r9, r0
 8004b2c:	6123      	str	r3, [r4, #16]
 8004b2e:	dc02      	bgt.n	8004b36 <_printf_float+0x14e>
 8004b30:	6822      	ldr	r2, [r4, #0]
 8004b32:	07d1      	lsls	r1, r2, #31
 8004b34:	d501      	bpl.n	8004b3a <_printf_float+0x152>
 8004b36:	3301      	adds	r3, #1
 8004b38:	6123      	str	r3, [r4, #16]
 8004b3a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0a5      	beq.n	8004a8e <_printf_float+0xa6>
 8004b42:	232d      	movs	r3, #45	; 0x2d
 8004b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b48:	e7a1      	b.n	8004a8e <_printf_float+0xa6>
 8004b4a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004b4e:	f000 8177 	beq.w	8004e40 <_printf_float+0x458>
 8004b52:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004b56:	d1bb      	bne.n	8004ad0 <_printf_float+0xe8>
 8004b58:	2900      	cmp	r1, #0
 8004b5a:	d1b9      	bne.n	8004ad0 <_printf_float+0xe8>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e7b6      	b.n	8004ace <_printf_float+0xe6>
 8004b60:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004b64:	d119      	bne.n	8004b9a <_printf_float+0x1b2>
 8004b66:	2900      	cmp	r1, #0
 8004b68:	6863      	ldr	r3, [r4, #4]
 8004b6a:	dd0c      	ble.n	8004b86 <_printf_float+0x19e>
 8004b6c:	6121      	str	r1, [r4, #16]
 8004b6e:	b913      	cbnz	r3, 8004b76 <_printf_float+0x18e>
 8004b70:	6822      	ldr	r2, [r4, #0]
 8004b72:	07d2      	lsls	r2, r2, #31
 8004b74:	d502      	bpl.n	8004b7c <_printf_float+0x194>
 8004b76:	3301      	adds	r3, #1
 8004b78:	440b      	add	r3, r1
 8004b7a:	6123      	str	r3, [r4, #16]
 8004b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b7e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004b80:	f04f 0900 	mov.w	r9, #0
 8004b84:	e7d9      	b.n	8004b3a <_printf_float+0x152>
 8004b86:	b913      	cbnz	r3, 8004b8e <_printf_float+0x1a6>
 8004b88:	6822      	ldr	r2, [r4, #0]
 8004b8a:	07d0      	lsls	r0, r2, #31
 8004b8c:	d501      	bpl.n	8004b92 <_printf_float+0x1aa>
 8004b8e:	3302      	adds	r3, #2
 8004b90:	e7f3      	b.n	8004b7a <_printf_float+0x192>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e7f1      	b.n	8004b7a <_printf_float+0x192>
 8004b96:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004b9a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	db05      	blt.n	8004bae <_printf_float+0x1c6>
 8004ba2:	6822      	ldr	r2, [r4, #0]
 8004ba4:	6123      	str	r3, [r4, #16]
 8004ba6:	07d1      	lsls	r1, r2, #31
 8004ba8:	d5e8      	bpl.n	8004b7c <_printf_float+0x194>
 8004baa:	3301      	adds	r3, #1
 8004bac:	e7e5      	b.n	8004b7a <_printf_float+0x192>
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	bfd4      	ite	le
 8004bb2:	f1c3 0302 	rsble	r3, r3, #2
 8004bb6:	2301      	movgt	r3, #1
 8004bb8:	4413      	add	r3, r2
 8004bba:	e7de      	b.n	8004b7a <_printf_float+0x192>
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	055a      	lsls	r2, r3, #21
 8004bc0:	d407      	bmi.n	8004bd2 <_printf_float+0x1ea>
 8004bc2:	6923      	ldr	r3, [r4, #16]
 8004bc4:	4642      	mov	r2, r8
 8004bc6:	4631      	mov	r1, r6
 8004bc8:	4628      	mov	r0, r5
 8004bca:	47b8      	blx	r7
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d12b      	bne.n	8004c28 <_printf_float+0x240>
 8004bd0:	e767      	b.n	8004aa2 <_printf_float+0xba>
 8004bd2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004bd6:	f240 80dc 	bls.w	8004d92 <_printf_float+0x3aa>
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004be2:	f7fb ff71 	bl	8000ac8 <__aeabi_dcmpeq>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	d033      	beq.n	8004c52 <_printf_float+0x26a>
 8004bea:	2301      	movs	r3, #1
 8004bec:	4a41      	ldr	r2, [pc, #260]	; (8004cf4 <_printf_float+0x30c>)
 8004bee:	4631      	mov	r1, r6
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	47b8      	blx	r7
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	f43f af54 	beq.w	8004aa2 <_printf_float+0xba>
 8004bfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	db02      	blt.n	8004c08 <_printf_float+0x220>
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	07d8      	lsls	r0, r3, #31
 8004c06:	d50f      	bpl.n	8004c28 <_printf_float+0x240>
 8004c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c0c:	4631      	mov	r1, r6
 8004c0e:	4628      	mov	r0, r5
 8004c10:	47b8      	blx	r7
 8004c12:	3001      	adds	r0, #1
 8004c14:	f43f af45 	beq.w	8004aa2 <_printf_float+0xba>
 8004c18:	f04f 0800 	mov.w	r8, #0
 8004c1c:	f104 091a 	add.w	r9, r4, #26
 8004c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c22:	3b01      	subs	r3, #1
 8004c24:	4543      	cmp	r3, r8
 8004c26:	dc09      	bgt.n	8004c3c <_printf_float+0x254>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	079b      	lsls	r3, r3, #30
 8004c2c:	f100 8103 	bmi.w	8004e36 <_printf_float+0x44e>
 8004c30:	68e0      	ldr	r0, [r4, #12]
 8004c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c34:	4298      	cmp	r0, r3
 8004c36:	bfb8      	it	lt
 8004c38:	4618      	movlt	r0, r3
 8004c3a:	e734      	b.n	8004aa6 <_printf_float+0xbe>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	464a      	mov	r2, r9
 8004c40:	4631      	mov	r1, r6
 8004c42:	4628      	mov	r0, r5
 8004c44:	47b8      	blx	r7
 8004c46:	3001      	adds	r0, #1
 8004c48:	f43f af2b 	beq.w	8004aa2 <_printf_float+0xba>
 8004c4c:	f108 0801 	add.w	r8, r8, #1
 8004c50:	e7e6      	b.n	8004c20 <_printf_float+0x238>
 8004c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	dc2b      	bgt.n	8004cb0 <_printf_float+0x2c8>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	4a26      	ldr	r2, [pc, #152]	; (8004cf4 <_printf_float+0x30c>)
 8004c5c:	4631      	mov	r1, r6
 8004c5e:	4628      	mov	r0, r5
 8004c60:	47b8      	blx	r7
 8004c62:	3001      	adds	r0, #1
 8004c64:	f43f af1d 	beq.w	8004aa2 <_printf_float+0xba>
 8004c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c6a:	b923      	cbnz	r3, 8004c76 <_printf_float+0x28e>
 8004c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c6e:	b913      	cbnz	r3, 8004c76 <_printf_float+0x28e>
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	07d9      	lsls	r1, r3, #31
 8004c74:	d5d8      	bpl.n	8004c28 <_printf_float+0x240>
 8004c76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c7a:	4631      	mov	r1, r6
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	47b8      	blx	r7
 8004c80:	3001      	adds	r0, #1
 8004c82:	f43f af0e 	beq.w	8004aa2 <_printf_float+0xba>
 8004c86:	f04f 0900 	mov.w	r9, #0
 8004c8a:	f104 0a1a 	add.w	sl, r4, #26
 8004c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c90:	425b      	negs	r3, r3
 8004c92:	454b      	cmp	r3, r9
 8004c94:	dc01      	bgt.n	8004c9a <_printf_float+0x2b2>
 8004c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c98:	e794      	b.n	8004bc4 <_printf_float+0x1dc>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	4652      	mov	r2, sl
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	47b8      	blx	r7
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	f43f aefc 	beq.w	8004aa2 <_printf_float+0xba>
 8004caa:	f109 0901 	add.w	r9, r9, #1
 8004cae:	e7ee      	b.n	8004c8e <_printf_float+0x2a6>
 8004cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	bfa8      	it	ge
 8004cb8:	461a      	movge	r2, r3
 8004cba:	2a00      	cmp	r2, #0
 8004cbc:	4691      	mov	r9, r2
 8004cbe:	dd07      	ble.n	8004cd0 <_printf_float+0x2e8>
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	4631      	mov	r1, r6
 8004cc4:	4642      	mov	r2, r8
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	47b8      	blx	r7
 8004cca:	3001      	adds	r0, #1
 8004ccc:	f43f aee9 	beq.w	8004aa2 <_printf_float+0xba>
 8004cd0:	f104 031a 	add.w	r3, r4, #26
 8004cd4:	f04f 0b00 	mov.w	fp, #0
 8004cd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cdc:	9306      	str	r3, [sp, #24]
 8004cde:	e015      	b.n	8004d0c <_printf_float+0x324>
 8004ce0:	7fefffff 	.word	0x7fefffff
 8004ce4:	08007e5c 	.word	0x08007e5c
 8004ce8:	08007e58 	.word	0x08007e58
 8004cec:	08007e64 	.word	0x08007e64
 8004cf0:	08007e60 	.word	0x08007e60
 8004cf4:	08007e68 	.word	0x08007e68
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	9a06      	ldr	r2, [sp, #24]
 8004cfc:	4631      	mov	r1, r6
 8004cfe:	4628      	mov	r0, r5
 8004d00:	47b8      	blx	r7
 8004d02:	3001      	adds	r0, #1
 8004d04:	f43f aecd 	beq.w	8004aa2 <_printf_float+0xba>
 8004d08:	f10b 0b01 	add.w	fp, fp, #1
 8004d0c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d10:	ebaa 0309 	sub.w	r3, sl, r9
 8004d14:	455b      	cmp	r3, fp
 8004d16:	dcef      	bgt.n	8004cf8 <_printf_float+0x310>
 8004d18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	44d0      	add	r8, sl
 8004d20:	db15      	blt.n	8004d4e <_printf_float+0x366>
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	07da      	lsls	r2, r3, #31
 8004d26:	d412      	bmi.n	8004d4e <_printf_float+0x366>
 8004d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d2c:	eba3 020a 	sub.w	r2, r3, sl
 8004d30:	eba3 0a01 	sub.w	sl, r3, r1
 8004d34:	4592      	cmp	sl, r2
 8004d36:	bfa8      	it	ge
 8004d38:	4692      	movge	sl, r2
 8004d3a:	f1ba 0f00 	cmp.w	sl, #0
 8004d3e:	dc0e      	bgt.n	8004d5e <_printf_float+0x376>
 8004d40:	f04f 0800 	mov.w	r8, #0
 8004d44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d48:	f104 091a 	add.w	r9, r4, #26
 8004d4c:	e019      	b.n	8004d82 <_printf_float+0x39a>
 8004d4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d52:	4631      	mov	r1, r6
 8004d54:	4628      	mov	r0, r5
 8004d56:	47b8      	blx	r7
 8004d58:	3001      	adds	r0, #1
 8004d5a:	d1e5      	bne.n	8004d28 <_printf_float+0x340>
 8004d5c:	e6a1      	b.n	8004aa2 <_printf_float+0xba>
 8004d5e:	4653      	mov	r3, sl
 8004d60:	4642      	mov	r2, r8
 8004d62:	4631      	mov	r1, r6
 8004d64:	4628      	mov	r0, r5
 8004d66:	47b8      	blx	r7
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d1e9      	bne.n	8004d40 <_printf_float+0x358>
 8004d6c:	e699      	b.n	8004aa2 <_printf_float+0xba>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	464a      	mov	r2, r9
 8004d72:	4631      	mov	r1, r6
 8004d74:	4628      	mov	r0, r5
 8004d76:	47b8      	blx	r7
 8004d78:	3001      	adds	r0, #1
 8004d7a:	f43f ae92 	beq.w	8004aa2 <_printf_float+0xba>
 8004d7e:	f108 0801 	add.w	r8, r8, #1
 8004d82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	eba3 030a 	sub.w	r3, r3, sl
 8004d8c:	4543      	cmp	r3, r8
 8004d8e:	dcee      	bgt.n	8004d6e <_printf_float+0x386>
 8004d90:	e74a      	b.n	8004c28 <_printf_float+0x240>
 8004d92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d94:	2a01      	cmp	r2, #1
 8004d96:	dc01      	bgt.n	8004d9c <_printf_float+0x3b4>
 8004d98:	07db      	lsls	r3, r3, #31
 8004d9a:	d53a      	bpl.n	8004e12 <_printf_float+0x42a>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	4642      	mov	r2, r8
 8004da0:	4631      	mov	r1, r6
 8004da2:	4628      	mov	r0, r5
 8004da4:	47b8      	blx	r7
 8004da6:	3001      	adds	r0, #1
 8004da8:	f43f ae7b 	beq.w	8004aa2 <_printf_float+0xba>
 8004dac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004db0:	4631      	mov	r1, r6
 8004db2:	4628      	mov	r0, r5
 8004db4:	47b8      	blx	r7
 8004db6:	3001      	adds	r0, #1
 8004db8:	f108 0801 	add.w	r8, r8, #1
 8004dbc:	f43f ae71 	beq.w	8004aa2 <_printf_float+0xba>
 8004dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f103 3aff 	add.w	sl, r3, #4294967295
 8004dc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f7fb fe7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dd2:	b9c8      	cbnz	r0, 8004e08 <_printf_float+0x420>
 8004dd4:	4653      	mov	r3, sl
 8004dd6:	4642      	mov	r2, r8
 8004dd8:	4631      	mov	r1, r6
 8004dda:	4628      	mov	r0, r5
 8004ddc:	47b8      	blx	r7
 8004dde:	3001      	adds	r0, #1
 8004de0:	d10e      	bne.n	8004e00 <_printf_float+0x418>
 8004de2:	e65e      	b.n	8004aa2 <_printf_float+0xba>
 8004de4:	2301      	movs	r3, #1
 8004de6:	4652      	mov	r2, sl
 8004de8:	4631      	mov	r1, r6
 8004dea:	4628      	mov	r0, r5
 8004dec:	47b8      	blx	r7
 8004dee:	3001      	adds	r0, #1
 8004df0:	f43f ae57 	beq.w	8004aa2 <_printf_float+0xba>
 8004df4:	f108 0801 	add.w	r8, r8, #1
 8004df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	4543      	cmp	r3, r8
 8004dfe:	dcf1      	bgt.n	8004de4 <_printf_float+0x3fc>
 8004e00:	464b      	mov	r3, r9
 8004e02:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e06:	e6de      	b.n	8004bc6 <_printf_float+0x1de>
 8004e08:	f04f 0800 	mov.w	r8, #0
 8004e0c:	f104 0a1a 	add.w	sl, r4, #26
 8004e10:	e7f2      	b.n	8004df8 <_printf_float+0x410>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e7df      	b.n	8004dd6 <_printf_float+0x3ee>
 8004e16:	2301      	movs	r3, #1
 8004e18:	464a      	mov	r2, r9
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	47b8      	blx	r7
 8004e20:	3001      	adds	r0, #1
 8004e22:	f43f ae3e 	beq.w	8004aa2 <_printf_float+0xba>
 8004e26:	f108 0801 	add.w	r8, r8, #1
 8004e2a:	68e3      	ldr	r3, [r4, #12]
 8004e2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e2e:	1a9b      	subs	r3, r3, r2
 8004e30:	4543      	cmp	r3, r8
 8004e32:	dcf0      	bgt.n	8004e16 <_printf_float+0x42e>
 8004e34:	e6fc      	b.n	8004c30 <_printf_float+0x248>
 8004e36:	f04f 0800 	mov.w	r8, #0
 8004e3a:	f104 0919 	add.w	r9, r4, #25
 8004e3e:	e7f4      	b.n	8004e2a <_printf_float+0x442>
 8004e40:	2900      	cmp	r1, #0
 8004e42:	f43f ae8b 	beq.w	8004b5c <_printf_float+0x174>
 8004e46:	2300      	movs	r3, #0
 8004e48:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004e4c:	ab09      	add	r3, sp, #36	; 0x24
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	ec49 8b10 	vmov	d0, r8, r9
 8004e54:	6022      	str	r2, [r4, #0]
 8004e56:	f8cd a004 	str.w	sl, [sp, #4]
 8004e5a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f7ff fd2e 	bl	80048c0 <__cvt>
 8004e64:	4680      	mov	r8, r0
 8004e66:	e648      	b.n	8004afa <_printf_float+0x112>

08004e68 <_printf_common>:
 8004e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e6c:	4691      	mov	r9, r2
 8004e6e:	461f      	mov	r7, r3
 8004e70:	688a      	ldr	r2, [r1, #8]
 8004e72:	690b      	ldr	r3, [r1, #16]
 8004e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	bfb8      	it	lt
 8004e7c:	4613      	movlt	r3, r2
 8004e7e:	f8c9 3000 	str.w	r3, [r9]
 8004e82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e86:	4606      	mov	r6, r0
 8004e88:	460c      	mov	r4, r1
 8004e8a:	b112      	cbz	r2, 8004e92 <_printf_common+0x2a>
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	f8c9 3000 	str.w	r3, [r9]
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	0699      	lsls	r1, r3, #26
 8004e96:	bf42      	ittt	mi
 8004e98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004e9c:	3302      	addmi	r3, #2
 8004e9e:	f8c9 3000 	strmi.w	r3, [r9]
 8004ea2:	6825      	ldr	r5, [r4, #0]
 8004ea4:	f015 0506 	ands.w	r5, r5, #6
 8004ea8:	d107      	bne.n	8004eba <_printf_common+0x52>
 8004eaa:	f104 0a19 	add.w	sl, r4, #25
 8004eae:	68e3      	ldr	r3, [r4, #12]
 8004eb0:	f8d9 2000 	ldr.w	r2, [r9]
 8004eb4:	1a9b      	subs	r3, r3, r2
 8004eb6:	42ab      	cmp	r3, r5
 8004eb8:	dc28      	bgt.n	8004f0c <_printf_common+0xa4>
 8004eba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004ebe:	6822      	ldr	r2, [r4, #0]
 8004ec0:	3300      	adds	r3, #0
 8004ec2:	bf18      	it	ne
 8004ec4:	2301      	movne	r3, #1
 8004ec6:	0692      	lsls	r2, r2, #26
 8004ec8:	d42d      	bmi.n	8004f26 <_printf_common+0xbe>
 8004eca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ece:	4639      	mov	r1, r7
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	47c0      	blx	r8
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d020      	beq.n	8004f1a <_printf_common+0xb2>
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	68e5      	ldr	r5, [r4, #12]
 8004edc:	f8d9 2000 	ldr.w	r2, [r9]
 8004ee0:	f003 0306 	and.w	r3, r3, #6
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	bf08      	it	eq
 8004ee8:	1aad      	subeq	r5, r5, r2
 8004eea:	68a3      	ldr	r3, [r4, #8]
 8004eec:	6922      	ldr	r2, [r4, #16]
 8004eee:	bf0c      	ite	eq
 8004ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ef4:	2500      	movne	r5, #0
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	bfc4      	itt	gt
 8004efa:	1a9b      	subgt	r3, r3, r2
 8004efc:	18ed      	addgt	r5, r5, r3
 8004efe:	f04f 0900 	mov.w	r9, #0
 8004f02:	341a      	adds	r4, #26
 8004f04:	454d      	cmp	r5, r9
 8004f06:	d11a      	bne.n	8004f3e <_printf_common+0xd6>
 8004f08:	2000      	movs	r0, #0
 8004f0a:	e008      	b.n	8004f1e <_printf_common+0xb6>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	4652      	mov	r2, sl
 8004f10:	4639      	mov	r1, r7
 8004f12:	4630      	mov	r0, r6
 8004f14:	47c0      	blx	r8
 8004f16:	3001      	adds	r0, #1
 8004f18:	d103      	bne.n	8004f22 <_printf_common+0xba>
 8004f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f22:	3501      	adds	r5, #1
 8004f24:	e7c3      	b.n	8004eae <_printf_common+0x46>
 8004f26:	18e1      	adds	r1, r4, r3
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	2030      	movs	r0, #48	; 0x30
 8004f2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f30:	4422      	add	r2, r4
 8004f32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f3a:	3302      	adds	r3, #2
 8004f3c:	e7c5      	b.n	8004eca <_printf_common+0x62>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	4622      	mov	r2, r4
 8004f42:	4639      	mov	r1, r7
 8004f44:	4630      	mov	r0, r6
 8004f46:	47c0      	blx	r8
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d0e6      	beq.n	8004f1a <_printf_common+0xb2>
 8004f4c:	f109 0901 	add.w	r9, r9, #1
 8004f50:	e7d8      	b.n	8004f04 <_printf_common+0x9c>
	...

08004f54 <_printf_i>:
 8004f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004f5c:	460c      	mov	r4, r1
 8004f5e:	7e09      	ldrb	r1, [r1, #24]
 8004f60:	b085      	sub	sp, #20
 8004f62:	296e      	cmp	r1, #110	; 0x6e
 8004f64:	4617      	mov	r7, r2
 8004f66:	4606      	mov	r6, r0
 8004f68:	4698      	mov	r8, r3
 8004f6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f6c:	f000 80b3 	beq.w	80050d6 <_printf_i+0x182>
 8004f70:	d822      	bhi.n	8004fb8 <_printf_i+0x64>
 8004f72:	2963      	cmp	r1, #99	; 0x63
 8004f74:	d036      	beq.n	8004fe4 <_printf_i+0x90>
 8004f76:	d80a      	bhi.n	8004f8e <_printf_i+0x3a>
 8004f78:	2900      	cmp	r1, #0
 8004f7a:	f000 80b9 	beq.w	80050f0 <_printf_i+0x19c>
 8004f7e:	2958      	cmp	r1, #88	; 0x58
 8004f80:	f000 8083 	beq.w	800508a <_printf_i+0x136>
 8004f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004f8c:	e032      	b.n	8004ff4 <_printf_i+0xa0>
 8004f8e:	2964      	cmp	r1, #100	; 0x64
 8004f90:	d001      	beq.n	8004f96 <_printf_i+0x42>
 8004f92:	2969      	cmp	r1, #105	; 0x69
 8004f94:	d1f6      	bne.n	8004f84 <_printf_i+0x30>
 8004f96:	6820      	ldr	r0, [r4, #0]
 8004f98:	6813      	ldr	r3, [r2, #0]
 8004f9a:	0605      	lsls	r5, r0, #24
 8004f9c:	f103 0104 	add.w	r1, r3, #4
 8004fa0:	d52a      	bpl.n	8004ff8 <_printf_i+0xa4>
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6011      	str	r1, [r2, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	da03      	bge.n	8004fb2 <_printf_i+0x5e>
 8004faa:	222d      	movs	r2, #45	; 0x2d
 8004fac:	425b      	negs	r3, r3
 8004fae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004fb2:	486f      	ldr	r0, [pc, #444]	; (8005170 <_printf_i+0x21c>)
 8004fb4:	220a      	movs	r2, #10
 8004fb6:	e039      	b.n	800502c <_printf_i+0xd8>
 8004fb8:	2973      	cmp	r1, #115	; 0x73
 8004fba:	f000 809d 	beq.w	80050f8 <_printf_i+0x1a4>
 8004fbe:	d808      	bhi.n	8004fd2 <_printf_i+0x7e>
 8004fc0:	296f      	cmp	r1, #111	; 0x6f
 8004fc2:	d020      	beq.n	8005006 <_printf_i+0xb2>
 8004fc4:	2970      	cmp	r1, #112	; 0x70
 8004fc6:	d1dd      	bne.n	8004f84 <_printf_i+0x30>
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	f043 0320 	orr.w	r3, r3, #32
 8004fce:	6023      	str	r3, [r4, #0]
 8004fd0:	e003      	b.n	8004fda <_printf_i+0x86>
 8004fd2:	2975      	cmp	r1, #117	; 0x75
 8004fd4:	d017      	beq.n	8005006 <_printf_i+0xb2>
 8004fd6:	2978      	cmp	r1, #120	; 0x78
 8004fd8:	d1d4      	bne.n	8004f84 <_printf_i+0x30>
 8004fda:	2378      	movs	r3, #120	; 0x78
 8004fdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fe0:	4864      	ldr	r0, [pc, #400]	; (8005174 <_printf_i+0x220>)
 8004fe2:	e055      	b.n	8005090 <_printf_i+0x13c>
 8004fe4:	6813      	ldr	r3, [r2, #0]
 8004fe6:	1d19      	adds	r1, r3, #4
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6011      	str	r1, [r2, #0]
 8004fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e08c      	b.n	8005112 <_printf_i+0x1be>
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6011      	str	r1, [r2, #0]
 8004ffc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005000:	bf18      	it	ne
 8005002:	b21b      	sxthne	r3, r3
 8005004:	e7cf      	b.n	8004fa6 <_printf_i+0x52>
 8005006:	6813      	ldr	r3, [r2, #0]
 8005008:	6825      	ldr	r5, [r4, #0]
 800500a:	1d18      	adds	r0, r3, #4
 800500c:	6010      	str	r0, [r2, #0]
 800500e:	0628      	lsls	r0, r5, #24
 8005010:	d501      	bpl.n	8005016 <_printf_i+0xc2>
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	e002      	b.n	800501c <_printf_i+0xc8>
 8005016:	0668      	lsls	r0, r5, #25
 8005018:	d5fb      	bpl.n	8005012 <_printf_i+0xbe>
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	4854      	ldr	r0, [pc, #336]	; (8005170 <_printf_i+0x21c>)
 800501e:	296f      	cmp	r1, #111	; 0x6f
 8005020:	bf14      	ite	ne
 8005022:	220a      	movne	r2, #10
 8005024:	2208      	moveq	r2, #8
 8005026:	2100      	movs	r1, #0
 8005028:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800502c:	6865      	ldr	r5, [r4, #4]
 800502e:	60a5      	str	r5, [r4, #8]
 8005030:	2d00      	cmp	r5, #0
 8005032:	f2c0 8095 	blt.w	8005160 <_printf_i+0x20c>
 8005036:	6821      	ldr	r1, [r4, #0]
 8005038:	f021 0104 	bic.w	r1, r1, #4
 800503c:	6021      	str	r1, [r4, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d13d      	bne.n	80050be <_printf_i+0x16a>
 8005042:	2d00      	cmp	r5, #0
 8005044:	f040 808e 	bne.w	8005164 <_printf_i+0x210>
 8005048:	4665      	mov	r5, ip
 800504a:	2a08      	cmp	r2, #8
 800504c:	d10b      	bne.n	8005066 <_printf_i+0x112>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	07db      	lsls	r3, r3, #31
 8005052:	d508      	bpl.n	8005066 <_printf_i+0x112>
 8005054:	6923      	ldr	r3, [r4, #16]
 8005056:	6862      	ldr	r2, [r4, #4]
 8005058:	429a      	cmp	r2, r3
 800505a:	bfde      	ittt	le
 800505c:	2330      	movle	r3, #48	; 0x30
 800505e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005062:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005066:	ebac 0305 	sub.w	r3, ip, r5
 800506a:	6123      	str	r3, [r4, #16]
 800506c:	f8cd 8000 	str.w	r8, [sp]
 8005070:	463b      	mov	r3, r7
 8005072:	aa03      	add	r2, sp, #12
 8005074:	4621      	mov	r1, r4
 8005076:	4630      	mov	r0, r6
 8005078:	f7ff fef6 	bl	8004e68 <_printf_common>
 800507c:	3001      	adds	r0, #1
 800507e:	d14d      	bne.n	800511c <_printf_i+0x1c8>
 8005080:	f04f 30ff 	mov.w	r0, #4294967295
 8005084:	b005      	add	sp, #20
 8005086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800508a:	4839      	ldr	r0, [pc, #228]	; (8005170 <_printf_i+0x21c>)
 800508c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005090:	6813      	ldr	r3, [r2, #0]
 8005092:	6821      	ldr	r1, [r4, #0]
 8005094:	1d1d      	adds	r5, r3, #4
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6015      	str	r5, [r2, #0]
 800509a:	060a      	lsls	r2, r1, #24
 800509c:	d50b      	bpl.n	80050b6 <_printf_i+0x162>
 800509e:	07ca      	lsls	r2, r1, #31
 80050a0:	bf44      	itt	mi
 80050a2:	f041 0120 	orrmi.w	r1, r1, #32
 80050a6:	6021      	strmi	r1, [r4, #0]
 80050a8:	b91b      	cbnz	r3, 80050b2 <_printf_i+0x15e>
 80050aa:	6822      	ldr	r2, [r4, #0]
 80050ac:	f022 0220 	bic.w	r2, r2, #32
 80050b0:	6022      	str	r2, [r4, #0]
 80050b2:	2210      	movs	r2, #16
 80050b4:	e7b7      	b.n	8005026 <_printf_i+0xd2>
 80050b6:	064d      	lsls	r5, r1, #25
 80050b8:	bf48      	it	mi
 80050ba:	b29b      	uxthmi	r3, r3
 80050bc:	e7ef      	b.n	800509e <_printf_i+0x14a>
 80050be:	4665      	mov	r5, ip
 80050c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80050c4:	fb02 3311 	mls	r3, r2, r1, r3
 80050c8:	5cc3      	ldrb	r3, [r0, r3]
 80050ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80050ce:	460b      	mov	r3, r1
 80050d0:	2900      	cmp	r1, #0
 80050d2:	d1f5      	bne.n	80050c0 <_printf_i+0x16c>
 80050d4:	e7b9      	b.n	800504a <_printf_i+0xf6>
 80050d6:	6813      	ldr	r3, [r2, #0]
 80050d8:	6825      	ldr	r5, [r4, #0]
 80050da:	6961      	ldr	r1, [r4, #20]
 80050dc:	1d18      	adds	r0, r3, #4
 80050de:	6010      	str	r0, [r2, #0]
 80050e0:	0628      	lsls	r0, r5, #24
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	d501      	bpl.n	80050ea <_printf_i+0x196>
 80050e6:	6019      	str	r1, [r3, #0]
 80050e8:	e002      	b.n	80050f0 <_printf_i+0x19c>
 80050ea:	066a      	lsls	r2, r5, #25
 80050ec:	d5fb      	bpl.n	80050e6 <_printf_i+0x192>
 80050ee:	8019      	strh	r1, [r3, #0]
 80050f0:	2300      	movs	r3, #0
 80050f2:	6123      	str	r3, [r4, #16]
 80050f4:	4665      	mov	r5, ip
 80050f6:	e7b9      	b.n	800506c <_printf_i+0x118>
 80050f8:	6813      	ldr	r3, [r2, #0]
 80050fa:	1d19      	adds	r1, r3, #4
 80050fc:	6011      	str	r1, [r2, #0]
 80050fe:	681d      	ldr	r5, [r3, #0]
 8005100:	6862      	ldr	r2, [r4, #4]
 8005102:	2100      	movs	r1, #0
 8005104:	4628      	mov	r0, r5
 8005106:	f7fb f86b 	bl	80001e0 <memchr>
 800510a:	b108      	cbz	r0, 8005110 <_printf_i+0x1bc>
 800510c:	1b40      	subs	r0, r0, r5
 800510e:	6060      	str	r0, [r4, #4]
 8005110:	6863      	ldr	r3, [r4, #4]
 8005112:	6123      	str	r3, [r4, #16]
 8005114:	2300      	movs	r3, #0
 8005116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800511a:	e7a7      	b.n	800506c <_printf_i+0x118>
 800511c:	6923      	ldr	r3, [r4, #16]
 800511e:	462a      	mov	r2, r5
 8005120:	4639      	mov	r1, r7
 8005122:	4630      	mov	r0, r6
 8005124:	47c0      	blx	r8
 8005126:	3001      	adds	r0, #1
 8005128:	d0aa      	beq.n	8005080 <_printf_i+0x12c>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	079b      	lsls	r3, r3, #30
 800512e:	d413      	bmi.n	8005158 <_printf_i+0x204>
 8005130:	68e0      	ldr	r0, [r4, #12]
 8005132:	9b03      	ldr	r3, [sp, #12]
 8005134:	4298      	cmp	r0, r3
 8005136:	bfb8      	it	lt
 8005138:	4618      	movlt	r0, r3
 800513a:	e7a3      	b.n	8005084 <_printf_i+0x130>
 800513c:	2301      	movs	r3, #1
 800513e:	464a      	mov	r2, r9
 8005140:	4639      	mov	r1, r7
 8005142:	4630      	mov	r0, r6
 8005144:	47c0      	blx	r8
 8005146:	3001      	adds	r0, #1
 8005148:	d09a      	beq.n	8005080 <_printf_i+0x12c>
 800514a:	3501      	adds	r5, #1
 800514c:	68e3      	ldr	r3, [r4, #12]
 800514e:	9a03      	ldr	r2, [sp, #12]
 8005150:	1a9b      	subs	r3, r3, r2
 8005152:	42ab      	cmp	r3, r5
 8005154:	dcf2      	bgt.n	800513c <_printf_i+0x1e8>
 8005156:	e7eb      	b.n	8005130 <_printf_i+0x1dc>
 8005158:	2500      	movs	r5, #0
 800515a:	f104 0919 	add.w	r9, r4, #25
 800515e:	e7f5      	b.n	800514c <_printf_i+0x1f8>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1ac      	bne.n	80050be <_printf_i+0x16a>
 8005164:	7803      	ldrb	r3, [r0, #0]
 8005166:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800516a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800516e:	e76c      	b.n	800504a <_printf_i+0xf6>
 8005170:	08007e6a 	.word	0x08007e6a
 8005174:	08007e7b 	.word	0x08007e7b

08005178 <realloc>:
 8005178:	4b02      	ldr	r3, [pc, #8]	; (8005184 <realloc+0xc>)
 800517a:	460a      	mov	r2, r1
 800517c:	4601      	mov	r1, r0
 800517e:	6818      	ldr	r0, [r3, #0]
 8005180:	f001 b9ae 	b.w	80064e0 <_realloc_r>
 8005184:	2000000c 	.word	0x2000000c

08005188 <_sbrk_r>:
 8005188:	b538      	push	{r3, r4, r5, lr}
 800518a:	4c06      	ldr	r4, [pc, #24]	; (80051a4 <_sbrk_r+0x1c>)
 800518c:	2300      	movs	r3, #0
 800518e:	4605      	mov	r5, r0
 8005190:	4608      	mov	r0, r1
 8005192:	6023      	str	r3, [r4, #0]
 8005194:	f7fc fcc4 	bl	8001b20 <_sbrk>
 8005198:	1c43      	adds	r3, r0, #1
 800519a:	d102      	bne.n	80051a2 <_sbrk_r+0x1a>
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	b103      	cbz	r3, 80051a2 <_sbrk_r+0x1a>
 80051a0:	602b      	str	r3, [r5, #0]
 80051a2:	bd38      	pop	{r3, r4, r5, pc}
 80051a4:	2000021c 	.word	0x2000021c

080051a8 <sniprintf>:
 80051a8:	b40c      	push	{r2, r3}
 80051aa:	b530      	push	{r4, r5, lr}
 80051ac:	4b17      	ldr	r3, [pc, #92]	; (800520c <sniprintf+0x64>)
 80051ae:	1e0c      	subs	r4, r1, #0
 80051b0:	b09d      	sub	sp, #116	; 0x74
 80051b2:	681d      	ldr	r5, [r3, #0]
 80051b4:	da08      	bge.n	80051c8 <sniprintf+0x20>
 80051b6:	238b      	movs	r3, #139	; 0x8b
 80051b8:	602b      	str	r3, [r5, #0]
 80051ba:	f04f 30ff 	mov.w	r0, #4294967295
 80051be:	b01d      	add	sp, #116	; 0x74
 80051c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051c4:	b002      	add	sp, #8
 80051c6:	4770      	bx	lr
 80051c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80051cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80051d0:	bf14      	ite	ne
 80051d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80051d6:	4623      	moveq	r3, r4
 80051d8:	9304      	str	r3, [sp, #16]
 80051da:	9307      	str	r3, [sp, #28]
 80051dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051e0:	9002      	str	r0, [sp, #8]
 80051e2:	9006      	str	r0, [sp, #24]
 80051e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80051e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051ea:	ab21      	add	r3, sp, #132	; 0x84
 80051ec:	a902      	add	r1, sp, #8
 80051ee:	4628      	mov	r0, r5
 80051f0:	9301      	str	r3, [sp, #4]
 80051f2:	f001 f9f5 	bl	80065e0 <_svfiprintf_r>
 80051f6:	1c43      	adds	r3, r0, #1
 80051f8:	bfbc      	itt	lt
 80051fa:	238b      	movlt	r3, #139	; 0x8b
 80051fc:	602b      	strlt	r3, [r5, #0]
 80051fe:	2c00      	cmp	r4, #0
 8005200:	d0dd      	beq.n	80051be <sniprintf+0x16>
 8005202:	9b02      	ldr	r3, [sp, #8]
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]
 8005208:	e7d9      	b.n	80051be <sniprintf+0x16>
 800520a:	bf00      	nop
 800520c:	2000000c 	.word	0x2000000c

08005210 <siprintf>:
 8005210:	b40e      	push	{r1, r2, r3}
 8005212:	b500      	push	{lr}
 8005214:	b09c      	sub	sp, #112	; 0x70
 8005216:	ab1d      	add	r3, sp, #116	; 0x74
 8005218:	9002      	str	r0, [sp, #8]
 800521a:	9006      	str	r0, [sp, #24]
 800521c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005220:	4809      	ldr	r0, [pc, #36]	; (8005248 <siprintf+0x38>)
 8005222:	9107      	str	r1, [sp, #28]
 8005224:	9104      	str	r1, [sp, #16]
 8005226:	4909      	ldr	r1, [pc, #36]	; (800524c <siprintf+0x3c>)
 8005228:	f853 2b04 	ldr.w	r2, [r3], #4
 800522c:	9105      	str	r1, [sp, #20]
 800522e:	6800      	ldr	r0, [r0, #0]
 8005230:	9301      	str	r3, [sp, #4]
 8005232:	a902      	add	r1, sp, #8
 8005234:	f001 f9d4 	bl	80065e0 <_svfiprintf_r>
 8005238:	9b02      	ldr	r3, [sp, #8]
 800523a:	2200      	movs	r2, #0
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	b01c      	add	sp, #112	; 0x70
 8005240:	f85d eb04 	ldr.w	lr, [sp], #4
 8005244:	b003      	add	sp, #12
 8005246:	4770      	bx	lr
 8005248:	2000000c 	.word	0x2000000c
 800524c:	ffff0208 	.word	0xffff0208

08005250 <quorem>:
 8005250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005254:	6903      	ldr	r3, [r0, #16]
 8005256:	690c      	ldr	r4, [r1, #16]
 8005258:	42a3      	cmp	r3, r4
 800525a:	4680      	mov	r8, r0
 800525c:	f2c0 8082 	blt.w	8005364 <quorem+0x114>
 8005260:	3c01      	subs	r4, #1
 8005262:	f101 0714 	add.w	r7, r1, #20
 8005266:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800526a:	f100 0614 	add.w	r6, r0, #20
 800526e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005272:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005276:	eb06 030c 	add.w	r3, r6, ip
 800527a:	3501      	adds	r5, #1
 800527c:	eb07 090c 	add.w	r9, r7, ip
 8005280:	9301      	str	r3, [sp, #4]
 8005282:	fbb0 f5f5 	udiv	r5, r0, r5
 8005286:	b395      	cbz	r5, 80052ee <quorem+0x9e>
 8005288:	f04f 0a00 	mov.w	sl, #0
 800528c:	4638      	mov	r0, r7
 800528e:	46b6      	mov	lr, r6
 8005290:	46d3      	mov	fp, sl
 8005292:	f850 2b04 	ldr.w	r2, [r0], #4
 8005296:	b293      	uxth	r3, r2
 8005298:	fb05 a303 	mla	r3, r5, r3, sl
 800529c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	ebab 0303 	sub.w	r3, fp, r3
 80052a6:	0c12      	lsrs	r2, r2, #16
 80052a8:	f8de b000 	ldr.w	fp, [lr]
 80052ac:	fb05 a202 	mla	r2, r5, r2, sl
 80052b0:	fa13 f38b 	uxtah	r3, r3, fp
 80052b4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80052b8:	fa1f fb82 	uxth.w	fp, r2
 80052bc:	f8de 2000 	ldr.w	r2, [lr]
 80052c0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80052c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052ce:	4581      	cmp	r9, r0
 80052d0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80052d4:	f84e 3b04 	str.w	r3, [lr], #4
 80052d8:	d2db      	bcs.n	8005292 <quorem+0x42>
 80052da:	f856 300c 	ldr.w	r3, [r6, ip]
 80052de:	b933      	cbnz	r3, 80052ee <quorem+0x9e>
 80052e0:	9b01      	ldr	r3, [sp, #4]
 80052e2:	3b04      	subs	r3, #4
 80052e4:	429e      	cmp	r6, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	d330      	bcc.n	800534c <quorem+0xfc>
 80052ea:	f8c8 4010 	str.w	r4, [r8, #16]
 80052ee:	4640      	mov	r0, r8
 80052f0:	f001 f822 	bl	8006338 <__mcmp>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	db25      	blt.n	8005344 <quorem+0xf4>
 80052f8:	3501      	adds	r5, #1
 80052fa:	4630      	mov	r0, r6
 80052fc:	f04f 0c00 	mov.w	ip, #0
 8005300:	f857 2b04 	ldr.w	r2, [r7], #4
 8005304:	f8d0 e000 	ldr.w	lr, [r0]
 8005308:	b293      	uxth	r3, r2
 800530a:	ebac 0303 	sub.w	r3, ip, r3
 800530e:	0c12      	lsrs	r2, r2, #16
 8005310:	fa13 f38e 	uxtah	r3, r3, lr
 8005314:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005318:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800531c:	b29b      	uxth	r3, r3
 800531e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005322:	45b9      	cmp	r9, r7
 8005324:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005328:	f840 3b04 	str.w	r3, [r0], #4
 800532c:	d2e8      	bcs.n	8005300 <quorem+0xb0>
 800532e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005332:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005336:	b92a      	cbnz	r2, 8005344 <quorem+0xf4>
 8005338:	3b04      	subs	r3, #4
 800533a:	429e      	cmp	r6, r3
 800533c:	461a      	mov	r2, r3
 800533e:	d30b      	bcc.n	8005358 <quorem+0x108>
 8005340:	f8c8 4010 	str.w	r4, [r8, #16]
 8005344:	4628      	mov	r0, r5
 8005346:	b003      	add	sp, #12
 8005348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534c:	6812      	ldr	r2, [r2, #0]
 800534e:	3b04      	subs	r3, #4
 8005350:	2a00      	cmp	r2, #0
 8005352:	d1ca      	bne.n	80052ea <quorem+0x9a>
 8005354:	3c01      	subs	r4, #1
 8005356:	e7c5      	b.n	80052e4 <quorem+0x94>
 8005358:	6812      	ldr	r2, [r2, #0]
 800535a:	3b04      	subs	r3, #4
 800535c:	2a00      	cmp	r2, #0
 800535e:	d1ef      	bne.n	8005340 <quorem+0xf0>
 8005360:	3c01      	subs	r4, #1
 8005362:	e7ea      	b.n	800533a <quorem+0xea>
 8005364:	2000      	movs	r0, #0
 8005366:	e7ee      	b.n	8005346 <quorem+0xf6>

08005368 <_dtoa_r>:
 8005368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536c:	ec57 6b10 	vmov	r6, r7, d0
 8005370:	b097      	sub	sp, #92	; 0x5c
 8005372:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005374:	9106      	str	r1, [sp, #24]
 8005376:	4604      	mov	r4, r0
 8005378:	920b      	str	r2, [sp, #44]	; 0x2c
 800537a:	9312      	str	r3, [sp, #72]	; 0x48
 800537c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005380:	e9cd 6700 	strd	r6, r7, [sp]
 8005384:	b93d      	cbnz	r5, 8005396 <_dtoa_r+0x2e>
 8005386:	2010      	movs	r0, #16
 8005388:	f7ff f9e2 	bl	8004750 <malloc>
 800538c:	6260      	str	r0, [r4, #36]	; 0x24
 800538e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005392:	6005      	str	r5, [r0, #0]
 8005394:	60c5      	str	r5, [r0, #12]
 8005396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005398:	6819      	ldr	r1, [r3, #0]
 800539a:	b151      	cbz	r1, 80053b2 <_dtoa_r+0x4a>
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	604a      	str	r2, [r1, #4]
 80053a0:	2301      	movs	r3, #1
 80053a2:	4093      	lsls	r3, r2
 80053a4:	608b      	str	r3, [r1, #8]
 80053a6:	4620      	mov	r0, r4
 80053a8:	f000 fde5 	bl	8005f76 <_Bfree>
 80053ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	1e3b      	subs	r3, r7, #0
 80053b4:	bfbb      	ittet	lt
 80053b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053ba:	9301      	strlt	r3, [sp, #4]
 80053bc:	2300      	movge	r3, #0
 80053be:	2201      	movlt	r2, #1
 80053c0:	bfac      	ite	ge
 80053c2:	f8c8 3000 	strge.w	r3, [r8]
 80053c6:	f8c8 2000 	strlt.w	r2, [r8]
 80053ca:	4baf      	ldr	r3, [pc, #700]	; (8005688 <_dtoa_r+0x320>)
 80053cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80053d0:	ea33 0308 	bics.w	r3, r3, r8
 80053d4:	d114      	bne.n	8005400 <_dtoa_r+0x98>
 80053d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	9b00      	ldr	r3, [sp, #0]
 80053e0:	b923      	cbnz	r3, 80053ec <_dtoa_r+0x84>
 80053e2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80053e6:	2800      	cmp	r0, #0
 80053e8:	f000 8542 	beq.w	8005e70 <_dtoa_r+0xb08>
 80053ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053ee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800569c <_dtoa_r+0x334>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 8544 	beq.w	8005e80 <_dtoa_r+0xb18>
 80053f8:	f10b 0303 	add.w	r3, fp, #3
 80053fc:	f000 bd3e 	b.w	8005e7c <_dtoa_r+0xb14>
 8005400:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005404:	2200      	movs	r2, #0
 8005406:	2300      	movs	r3, #0
 8005408:	4630      	mov	r0, r6
 800540a:	4639      	mov	r1, r7
 800540c:	f7fb fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005410:	4681      	mov	r9, r0
 8005412:	b168      	cbz	r0, 8005430 <_dtoa_r+0xc8>
 8005414:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005416:	2301      	movs	r3, #1
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 8524 	beq.w	8005e6a <_dtoa_r+0xb02>
 8005422:	4b9a      	ldr	r3, [pc, #616]	; (800568c <_dtoa_r+0x324>)
 8005424:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005426:	f103 3bff 	add.w	fp, r3, #4294967295
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	f000 bd28 	b.w	8005e80 <_dtoa_r+0xb18>
 8005430:	aa14      	add	r2, sp, #80	; 0x50
 8005432:	a915      	add	r1, sp, #84	; 0x54
 8005434:	ec47 6b10 	vmov	d0, r6, r7
 8005438:	4620      	mov	r0, r4
 800543a:	f000 fff4 	bl	8006426 <__d2b>
 800543e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005442:	9004      	str	r0, [sp, #16]
 8005444:	2d00      	cmp	r5, #0
 8005446:	d07c      	beq.n	8005542 <_dtoa_r+0x1da>
 8005448:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800544c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005450:	46b2      	mov	sl, r6
 8005452:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005456:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800545a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800545e:	2200      	movs	r2, #0
 8005460:	4b8b      	ldr	r3, [pc, #556]	; (8005690 <_dtoa_r+0x328>)
 8005462:	4650      	mov	r0, sl
 8005464:	4659      	mov	r1, fp
 8005466:	f7fa ff0f 	bl	8000288 <__aeabi_dsub>
 800546a:	a381      	add	r3, pc, #516	; (adr r3, 8005670 <_dtoa_r+0x308>)
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	f7fb f8c2 	bl	80005f8 <__aeabi_dmul>
 8005474:	a380      	add	r3, pc, #512	; (adr r3, 8005678 <_dtoa_r+0x310>)
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	f7fa ff07 	bl	800028c <__adddf3>
 800547e:	4606      	mov	r6, r0
 8005480:	4628      	mov	r0, r5
 8005482:	460f      	mov	r7, r1
 8005484:	f7fb f84e 	bl	8000524 <__aeabi_i2d>
 8005488:	a37d      	add	r3, pc, #500	; (adr r3, 8005680 <_dtoa_r+0x318>)
 800548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548e:	f7fb f8b3 	bl	80005f8 <__aeabi_dmul>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4630      	mov	r0, r6
 8005498:	4639      	mov	r1, r7
 800549a:	f7fa fef7 	bl	800028c <__adddf3>
 800549e:	4606      	mov	r6, r0
 80054a0:	460f      	mov	r7, r1
 80054a2:	f7fb fb59 	bl	8000b58 <__aeabi_d2iz>
 80054a6:	2200      	movs	r2, #0
 80054a8:	4682      	mov	sl, r0
 80054aa:	2300      	movs	r3, #0
 80054ac:	4630      	mov	r0, r6
 80054ae:	4639      	mov	r1, r7
 80054b0:	f7fb fb14 	bl	8000adc <__aeabi_dcmplt>
 80054b4:	b148      	cbz	r0, 80054ca <_dtoa_r+0x162>
 80054b6:	4650      	mov	r0, sl
 80054b8:	f7fb f834 	bl	8000524 <__aeabi_i2d>
 80054bc:	4632      	mov	r2, r6
 80054be:	463b      	mov	r3, r7
 80054c0:	f7fb fb02 	bl	8000ac8 <__aeabi_dcmpeq>
 80054c4:	b908      	cbnz	r0, 80054ca <_dtoa_r+0x162>
 80054c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054ca:	f1ba 0f16 	cmp.w	sl, #22
 80054ce:	d859      	bhi.n	8005584 <_dtoa_r+0x21c>
 80054d0:	4970      	ldr	r1, [pc, #448]	; (8005694 <_dtoa_r+0x32c>)
 80054d2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80054d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054de:	f7fb fb1b 	bl	8000b18 <__aeabi_dcmpgt>
 80054e2:	2800      	cmp	r0, #0
 80054e4:	d050      	beq.n	8005588 <_dtoa_r+0x220>
 80054e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054ea:	2300      	movs	r3, #0
 80054ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80054ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054f0:	1b5d      	subs	r5, r3, r5
 80054f2:	f1b5 0801 	subs.w	r8, r5, #1
 80054f6:	bf49      	itett	mi
 80054f8:	f1c5 0301 	rsbmi	r3, r5, #1
 80054fc:	2300      	movpl	r3, #0
 80054fe:	9305      	strmi	r3, [sp, #20]
 8005500:	f04f 0800 	movmi.w	r8, #0
 8005504:	bf58      	it	pl
 8005506:	9305      	strpl	r3, [sp, #20]
 8005508:	f1ba 0f00 	cmp.w	sl, #0
 800550c:	db3e      	blt.n	800558c <_dtoa_r+0x224>
 800550e:	2300      	movs	r3, #0
 8005510:	44d0      	add	r8, sl
 8005512:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005516:	9307      	str	r3, [sp, #28]
 8005518:	9b06      	ldr	r3, [sp, #24]
 800551a:	2b09      	cmp	r3, #9
 800551c:	f200 8090 	bhi.w	8005640 <_dtoa_r+0x2d8>
 8005520:	2b05      	cmp	r3, #5
 8005522:	bfc4      	itt	gt
 8005524:	3b04      	subgt	r3, #4
 8005526:	9306      	strgt	r3, [sp, #24]
 8005528:	9b06      	ldr	r3, [sp, #24]
 800552a:	f1a3 0302 	sub.w	r3, r3, #2
 800552e:	bfcc      	ite	gt
 8005530:	2500      	movgt	r5, #0
 8005532:	2501      	movle	r5, #1
 8005534:	2b03      	cmp	r3, #3
 8005536:	f200 808f 	bhi.w	8005658 <_dtoa_r+0x2f0>
 800553a:	e8df f003 	tbb	[pc, r3]
 800553e:	7f7d      	.short	0x7f7d
 8005540:	7131      	.short	0x7131
 8005542:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005546:	441d      	add	r5, r3
 8005548:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800554c:	2820      	cmp	r0, #32
 800554e:	dd13      	ble.n	8005578 <_dtoa_r+0x210>
 8005550:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005554:	9b00      	ldr	r3, [sp, #0]
 8005556:	fa08 f800 	lsl.w	r8, r8, r0
 800555a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800555e:	fa23 f000 	lsr.w	r0, r3, r0
 8005562:	ea48 0000 	orr.w	r0, r8, r0
 8005566:	f7fa ffcd 	bl	8000504 <__aeabi_ui2d>
 800556a:	2301      	movs	r3, #1
 800556c:	4682      	mov	sl, r0
 800556e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005572:	3d01      	subs	r5, #1
 8005574:	9313      	str	r3, [sp, #76]	; 0x4c
 8005576:	e772      	b.n	800545e <_dtoa_r+0xf6>
 8005578:	9b00      	ldr	r3, [sp, #0]
 800557a:	f1c0 0020 	rsb	r0, r0, #32
 800557e:	fa03 f000 	lsl.w	r0, r3, r0
 8005582:	e7f0      	b.n	8005566 <_dtoa_r+0x1fe>
 8005584:	2301      	movs	r3, #1
 8005586:	e7b1      	b.n	80054ec <_dtoa_r+0x184>
 8005588:	900f      	str	r0, [sp, #60]	; 0x3c
 800558a:	e7b0      	b.n	80054ee <_dtoa_r+0x186>
 800558c:	9b05      	ldr	r3, [sp, #20]
 800558e:	eba3 030a 	sub.w	r3, r3, sl
 8005592:	9305      	str	r3, [sp, #20]
 8005594:	f1ca 0300 	rsb	r3, sl, #0
 8005598:	9307      	str	r3, [sp, #28]
 800559a:	2300      	movs	r3, #0
 800559c:	930e      	str	r3, [sp, #56]	; 0x38
 800559e:	e7bb      	b.n	8005518 <_dtoa_r+0x1b0>
 80055a0:	2301      	movs	r3, #1
 80055a2:	930a      	str	r3, [sp, #40]	; 0x28
 80055a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	dd59      	ble.n	800565e <_dtoa_r+0x2f6>
 80055aa:	9302      	str	r3, [sp, #8]
 80055ac:	4699      	mov	r9, r3
 80055ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80055b0:	2200      	movs	r2, #0
 80055b2:	6072      	str	r2, [r6, #4]
 80055b4:	2204      	movs	r2, #4
 80055b6:	f102 0014 	add.w	r0, r2, #20
 80055ba:	4298      	cmp	r0, r3
 80055bc:	6871      	ldr	r1, [r6, #4]
 80055be:	d953      	bls.n	8005668 <_dtoa_r+0x300>
 80055c0:	4620      	mov	r0, r4
 80055c2:	f000 fca4 	bl	8005f0e <_Balloc>
 80055c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055c8:	6030      	str	r0, [r6, #0]
 80055ca:	f1b9 0f0e 	cmp.w	r9, #14
 80055ce:	f8d3 b000 	ldr.w	fp, [r3]
 80055d2:	f200 80e6 	bhi.w	80057a2 <_dtoa_r+0x43a>
 80055d6:	2d00      	cmp	r5, #0
 80055d8:	f000 80e3 	beq.w	80057a2 <_dtoa_r+0x43a>
 80055dc:	ed9d 7b00 	vldr	d7, [sp]
 80055e0:	f1ba 0f00 	cmp.w	sl, #0
 80055e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80055e8:	dd74      	ble.n	80056d4 <_dtoa_r+0x36c>
 80055ea:	4a2a      	ldr	r2, [pc, #168]	; (8005694 <_dtoa_r+0x32c>)
 80055ec:	f00a 030f 	and.w	r3, sl, #15
 80055f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055f4:	ed93 7b00 	vldr	d7, [r3]
 80055f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80055fc:	06f0      	lsls	r0, r6, #27
 80055fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005602:	d565      	bpl.n	80056d0 <_dtoa_r+0x368>
 8005604:	4b24      	ldr	r3, [pc, #144]	; (8005698 <_dtoa_r+0x330>)
 8005606:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800560a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800560e:	f7fb f91d 	bl	800084c <__aeabi_ddiv>
 8005612:	e9cd 0100 	strd	r0, r1, [sp]
 8005616:	f006 060f 	and.w	r6, r6, #15
 800561a:	2503      	movs	r5, #3
 800561c:	4f1e      	ldr	r7, [pc, #120]	; (8005698 <_dtoa_r+0x330>)
 800561e:	e04c      	b.n	80056ba <_dtoa_r+0x352>
 8005620:	2301      	movs	r3, #1
 8005622:	930a      	str	r3, [sp, #40]	; 0x28
 8005624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005626:	4453      	add	r3, sl
 8005628:	f103 0901 	add.w	r9, r3, #1
 800562c:	9302      	str	r3, [sp, #8]
 800562e:	464b      	mov	r3, r9
 8005630:	2b01      	cmp	r3, #1
 8005632:	bfb8      	it	lt
 8005634:	2301      	movlt	r3, #1
 8005636:	e7ba      	b.n	80055ae <_dtoa_r+0x246>
 8005638:	2300      	movs	r3, #0
 800563a:	e7b2      	b.n	80055a2 <_dtoa_r+0x23a>
 800563c:	2300      	movs	r3, #0
 800563e:	e7f0      	b.n	8005622 <_dtoa_r+0x2ba>
 8005640:	2501      	movs	r5, #1
 8005642:	2300      	movs	r3, #0
 8005644:	9306      	str	r3, [sp, #24]
 8005646:	950a      	str	r5, [sp, #40]	; 0x28
 8005648:	f04f 33ff 	mov.w	r3, #4294967295
 800564c:	9302      	str	r3, [sp, #8]
 800564e:	4699      	mov	r9, r3
 8005650:	2200      	movs	r2, #0
 8005652:	2312      	movs	r3, #18
 8005654:	920b      	str	r2, [sp, #44]	; 0x2c
 8005656:	e7aa      	b.n	80055ae <_dtoa_r+0x246>
 8005658:	2301      	movs	r3, #1
 800565a:	930a      	str	r3, [sp, #40]	; 0x28
 800565c:	e7f4      	b.n	8005648 <_dtoa_r+0x2e0>
 800565e:	2301      	movs	r3, #1
 8005660:	9302      	str	r3, [sp, #8]
 8005662:	4699      	mov	r9, r3
 8005664:	461a      	mov	r2, r3
 8005666:	e7f5      	b.n	8005654 <_dtoa_r+0x2ec>
 8005668:	3101      	adds	r1, #1
 800566a:	6071      	str	r1, [r6, #4]
 800566c:	0052      	lsls	r2, r2, #1
 800566e:	e7a2      	b.n	80055b6 <_dtoa_r+0x24e>
 8005670:	636f4361 	.word	0x636f4361
 8005674:	3fd287a7 	.word	0x3fd287a7
 8005678:	8b60c8b3 	.word	0x8b60c8b3
 800567c:	3fc68a28 	.word	0x3fc68a28
 8005680:	509f79fb 	.word	0x509f79fb
 8005684:	3fd34413 	.word	0x3fd34413
 8005688:	7ff00000 	.word	0x7ff00000
 800568c:	08007e69 	.word	0x08007e69
 8005690:	3ff80000 	.word	0x3ff80000
 8005694:	08007ec8 	.word	0x08007ec8
 8005698:	08007ea0 	.word	0x08007ea0
 800569c:	08007e95 	.word	0x08007e95
 80056a0:	07f1      	lsls	r1, r6, #31
 80056a2:	d508      	bpl.n	80056b6 <_dtoa_r+0x34e>
 80056a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80056a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ac:	f7fa ffa4 	bl	80005f8 <__aeabi_dmul>
 80056b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80056b4:	3501      	adds	r5, #1
 80056b6:	1076      	asrs	r6, r6, #1
 80056b8:	3708      	adds	r7, #8
 80056ba:	2e00      	cmp	r6, #0
 80056bc:	d1f0      	bne.n	80056a0 <_dtoa_r+0x338>
 80056be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056c6:	f7fb f8c1 	bl	800084c <__aeabi_ddiv>
 80056ca:	e9cd 0100 	strd	r0, r1, [sp]
 80056ce:	e01a      	b.n	8005706 <_dtoa_r+0x39e>
 80056d0:	2502      	movs	r5, #2
 80056d2:	e7a3      	b.n	800561c <_dtoa_r+0x2b4>
 80056d4:	f000 80a0 	beq.w	8005818 <_dtoa_r+0x4b0>
 80056d8:	f1ca 0600 	rsb	r6, sl, #0
 80056dc:	4b9f      	ldr	r3, [pc, #636]	; (800595c <_dtoa_r+0x5f4>)
 80056de:	4fa0      	ldr	r7, [pc, #640]	; (8005960 <_dtoa_r+0x5f8>)
 80056e0:	f006 020f 	and.w	r2, r6, #15
 80056e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056f0:	f7fa ff82 	bl	80005f8 <__aeabi_dmul>
 80056f4:	e9cd 0100 	strd	r0, r1, [sp]
 80056f8:	1136      	asrs	r6, r6, #4
 80056fa:	2300      	movs	r3, #0
 80056fc:	2502      	movs	r5, #2
 80056fe:	2e00      	cmp	r6, #0
 8005700:	d17f      	bne.n	8005802 <_dtoa_r+0x49a>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e1      	bne.n	80056ca <_dtoa_r+0x362>
 8005706:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 8087 	beq.w	800581c <_dtoa_r+0x4b4>
 800570e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005712:	2200      	movs	r2, #0
 8005714:	4b93      	ldr	r3, [pc, #588]	; (8005964 <_dtoa_r+0x5fc>)
 8005716:	4630      	mov	r0, r6
 8005718:	4639      	mov	r1, r7
 800571a:	f7fb f9df 	bl	8000adc <__aeabi_dcmplt>
 800571e:	2800      	cmp	r0, #0
 8005720:	d07c      	beq.n	800581c <_dtoa_r+0x4b4>
 8005722:	f1b9 0f00 	cmp.w	r9, #0
 8005726:	d079      	beq.n	800581c <_dtoa_r+0x4b4>
 8005728:	9b02      	ldr	r3, [sp, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	dd35      	ble.n	800579a <_dtoa_r+0x432>
 800572e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005732:	9308      	str	r3, [sp, #32]
 8005734:	4639      	mov	r1, r7
 8005736:	2200      	movs	r2, #0
 8005738:	4b8b      	ldr	r3, [pc, #556]	; (8005968 <_dtoa_r+0x600>)
 800573a:	4630      	mov	r0, r6
 800573c:	f7fa ff5c 	bl	80005f8 <__aeabi_dmul>
 8005740:	e9cd 0100 	strd	r0, r1, [sp]
 8005744:	9f02      	ldr	r7, [sp, #8]
 8005746:	3501      	adds	r5, #1
 8005748:	4628      	mov	r0, r5
 800574a:	f7fa feeb 	bl	8000524 <__aeabi_i2d>
 800574e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005752:	f7fa ff51 	bl	80005f8 <__aeabi_dmul>
 8005756:	2200      	movs	r2, #0
 8005758:	4b84      	ldr	r3, [pc, #528]	; (800596c <_dtoa_r+0x604>)
 800575a:	f7fa fd97 	bl	800028c <__adddf3>
 800575e:	4605      	mov	r5, r0
 8005760:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005764:	2f00      	cmp	r7, #0
 8005766:	d15d      	bne.n	8005824 <_dtoa_r+0x4bc>
 8005768:	2200      	movs	r2, #0
 800576a:	4b81      	ldr	r3, [pc, #516]	; (8005970 <_dtoa_r+0x608>)
 800576c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005770:	f7fa fd8a 	bl	8000288 <__aeabi_dsub>
 8005774:	462a      	mov	r2, r5
 8005776:	4633      	mov	r3, r6
 8005778:	e9cd 0100 	strd	r0, r1, [sp]
 800577c:	f7fb f9cc 	bl	8000b18 <__aeabi_dcmpgt>
 8005780:	2800      	cmp	r0, #0
 8005782:	f040 8288 	bne.w	8005c96 <_dtoa_r+0x92e>
 8005786:	462a      	mov	r2, r5
 8005788:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800578c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005790:	f7fb f9a4 	bl	8000adc <__aeabi_dcmplt>
 8005794:	2800      	cmp	r0, #0
 8005796:	f040 827c 	bne.w	8005c92 <_dtoa_r+0x92a>
 800579a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800579e:	e9cd 2300 	strd	r2, r3, [sp]
 80057a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f2c0 8150 	blt.w	8005a4a <_dtoa_r+0x6e2>
 80057aa:	f1ba 0f0e 	cmp.w	sl, #14
 80057ae:	f300 814c 	bgt.w	8005a4a <_dtoa_r+0x6e2>
 80057b2:	4b6a      	ldr	r3, [pc, #424]	; (800595c <_dtoa_r+0x5f4>)
 80057b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057b8:	ed93 7b00 	vldr	d7, [r3]
 80057bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80057c4:	f280 80d8 	bge.w	8005978 <_dtoa_r+0x610>
 80057c8:	f1b9 0f00 	cmp.w	r9, #0
 80057cc:	f300 80d4 	bgt.w	8005978 <_dtoa_r+0x610>
 80057d0:	f040 825e 	bne.w	8005c90 <_dtoa_r+0x928>
 80057d4:	2200      	movs	r2, #0
 80057d6:	4b66      	ldr	r3, [pc, #408]	; (8005970 <_dtoa_r+0x608>)
 80057d8:	ec51 0b17 	vmov	r0, r1, d7
 80057dc:	f7fa ff0c 	bl	80005f8 <__aeabi_dmul>
 80057e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057e4:	f7fb f98e 	bl	8000b04 <__aeabi_dcmpge>
 80057e8:	464f      	mov	r7, r9
 80057ea:	464e      	mov	r6, r9
 80057ec:	2800      	cmp	r0, #0
 80057ee:	f040 8234 	bne.w	8005c5a <_dtoa_r+0x8f2>
 80057f2:	2331      	movs	r3, #49	; 0x31
 80057f4:	f10b 0501 	add.w	r5, fp, #1
 80057f8:	f88b 3000 	strb.w	r3, [fp]
 80057fc:	f10a 0a01 	add.w	sl, sl, #1
 8005800:	e22f      	b.n	8005c62 <_dtoa_r+0x8fa>
 8005802:	07f2      	lsls	r2, r6, #31
 8005804:	d505      	bpl.n	8005812 <_dtoa_r+0x4aa>
 8005806:	e9d7 2300 	ldrd	r2, r3, [r7]
 800580a:	f7fa fef5 	bl	80005f8 <__aeabi_dmul>
 800580e:	3501      	adds	r5, #1
 8005810:	2301      	movs	r3, #1
 8005812:	1076      	asrs	r6, r6, #1
 8005814:	3708      	adds	r7, #8
 8005816:	e772      	b.n	80056fe <_dtoa_r+0x396>
 8005818:	2502      	movs	r5, #2
 800581a:	e774      	b.n	8005706 <_dtoa_r+0x39e>
 800581c:	f8cd a020 	str.w	sl, [sp, #32]
 8005820:	464f      	mov	r7, r9
 8005822:	e791      	b.n	8005748 <_dtoa_r+0x3e0>
 8005824:	4b4d      	ldr	r3, [pc, #308]	; (800595c <_dtoa_r+0x5f4>)
 8005826:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800582a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800582e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005830:	2b00      	cmp	r3, #0
 8005832:	d047      	beq.n	80058c4 <_dtoa_r+0x55c>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	2000      	movs	r0, #0
 800583a:	494e      	ldr	r1, [pc, #312]	; (8005974 <_dtoa_r+0x60c>)
 800583c:	f7fb f806 	bl	800084c <__aeabi_ddiv>
 8005840:	462a      	mov	r2, r5
 8005842:	4633      	mov	r3, r6
 8005844:	f7fa fd20 	bl	8000288 <__aeabi_dsub>
 8005848:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800584c:	465d      	mov	r5, fp
 800584e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005852:	f7fb f981 	bl	8000b58 <__aeabi_d2iz>
 8005856:	4606      	mov	r6, r0
 8005858:	f7fa fe64 	bl	8000524 <__aeabi_i2d>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005864:	f7fa fd10 	bl	8000288 <__aeabi_dsub>
 8005868:	3630      	adds	r6, #48	; 0x30
 800586a:	f805 6b01 	strb.w	r6, [r5], #1
 800586e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005872:	e9cd 0100 	strd	r0, r1, [sp]
 8005876:	f7fb f931 	bl	8000adc <__aeabi_dcmplt>
 800587a:	2800      	cmp	r0, #0
 800587c:	d163      	bne.n	8005946 <_dtoa_r+0x5de>
 800587e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005882:	2000      	movs	r0, #0
 8005884:	4937      	ldr	r1, [pc, #220]	; (8005964 <_dtoa_r+0x5fc>)
 8005886:	f7fa fcff 	bl	8000288 <__aeabi_dsub>
 800588a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800588e:	f7fb f925 	bl	8000adc <__aeabi_dcmplt>
 8005892:	2800      	cmp	r0, #0
 8005894:	f040 80b7 	bne.w	8005a06 <_dtoa_r+0x69e>
 8005898:	eba5 030b 	sub.w	r3, r5, fp
 800589c:	429f      	cmp	r7, r3
 800589e:	f77f af7c 	ble.w	800579a <_dtoa_r+0x432>
 80058a2:	2200      	movs	r2, #0
 80058a4:	4b30      	ldr	r3, [pc, #192]	; (8005968 <_dtoa_r+0x600>)
 80058a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058aa:	f7fa fea5 	bl	80005f8 <__aeabi_dmul>
 80058ae:	2200      	movs	r2, #0
 80058b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80058b4:	4b2c      	ldr	r3, [pc, #176]	; (8005968 <_dtoa_r+0x600>)
 80058b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058ba:	f7fa fe9d 	bl	80005f8 <__aeabi_dmul>
 80058be:	e9cd 0100 	strd	r0, r1, [sp]
 80058c2:	e7c4      	b.n	800584e <_dtoa_r+0x4e6>
 80058c4:	462a      	mov	r2, r5
 80058c6:	4633      	mov	r3, r6
 80058c8:	f7fa fe96 	bl	80005f8 <__aeabi_dmul>
 80058cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80058d0:	eb0b 0507 	add.w	r5, fp, r7
 80058d4:	465e      	mov	r6, fp
 80058d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058da:	f7fb f93d 	bl	8000b58 <__aeabi_d2iz>
 80058de:	4607      	mov	r7, r0
 80058e0:	f7fa fe20 	bl	8000524 <__aeabi_i2d>
 80058e4:	3730      	adds	r7, #48	; 0x30
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058ee:	f7fa fccb 	bl	8000288 <__aeabi_dsub>
 80058f2:	f806 7b01 	strb.w	r7, [r6], #1
 80058f6:	42ae      	cmp	r6, r5
 80058f8:	e9cd 0100 	strd	r0, r1, [sp]
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	d126      	bne.n	8005950 <_dtoa_r+0x5e8>
 8005902:	4b1c      	ldr	r3, [pc, #112]	; (8005974 <_dtoa_r+0x60c>)
 8005904:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005908:	f7fa fcc0 	bl	800028c <__adddf3>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005914:	f7fb f900 	bl	8000b18 <__aeabi_dcmpgt>
 8005918:	2800      	cmp	r0, #0
 800591a:	d174      	bne.n	8005a06 <_dtoa_r+0x69e>
 800591c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005920:	2000      	movs	r0, #0
 8005922:	4914      	ldr	r1, [pc, #80]	; (8005974 <_dtoa_r+0x60c>)
 8005924:	f7fa fcb0 	bl	8000288 <__aeabi_dsub>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005930:	f7fb f8d4 	bl	8000adc <__aeabi_dcmplt>
 8005934:	2800      	cmp	r0, #0
 8005936:	f43f af30 	beq.w	800579a <_dtoa_r+0x432>
 800593a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800593e:	2b30      	cmp	r3, #48	; 0x30
 8005940:	f105 32ff 	add.w	r2, r5, #4294967295
 8005944:	d002      	beq.n	800594c <_dtoa_r+0x5e4>
 8005946:	f8dd a020 	ldr.w	sl, [sp, #32]
 800594a:	e04a      	b.n	80059e2 <_dtoa_r+0x67a>
 800594c:	4615      	mov	r5, r2
 800594e:	e7f4      	b.n	800593a <_dtoa_r+0x5d2>
 8005950:	4b05      	ldr	r3, [pc, #20]	; (8005968 <_dtoa_r+0x600>)
 8005952:	f7fa fe51 	bl	80005f8 <__aeabi_dmul>
 8005956:	e9cd 0100 	strd	r0, r1, [sp]
 800595a:	e7bc      	b.n	80058d6 <_dtoa_r+0x56e>
 800595c:	08007ec8 	.word	0x08007ec8
 8005960:	08007ea0 	.word	0x08007ea0
 8005964:	3ff00000 	.word	0x3ff00000
 8005968:	40240000 	.word	0x40240000
 800596c:	401c0000 	.word	0x401c0000
 8005970:	40140000 	.word	0x40140000
 8005974:	3fe00000 	.word	0x3fe00000
 8005978:	e9dd 6700 	ldrd	r6, r7, [sp]
 800597c:	465d      	mov	r5, fp
 800597e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005982:	4630      	mov	r0, r6
 8005984:	4639      	mov	r1, r7
 8005986:	f7fa ff61 	bl	800084c <__aeabi_ddiv>
 800598a:	f7fb f8e5 	bl	8000b58 <__aeabi_d2iz>
 800598e:	4680      	mov	r8, r0
 8005990:	f7fa fdc8 	bl	8000524 <__aeabi_i2d>
 8005994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005998:	f7fa fe2e 	bl	80005f8 <__aeabi_dmul>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4630      	mov	r0, r6
 80059a2:	4639      	mov	r1, r7
 80059a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80059a8:	f7fa fc6e 	bl	8000288 <__aeabi_dsub>
 80059ac:	f805 6b01 	strb.w	r6, [r5], #1
 80059b0:	eba5 060b 	sub.w	r6, r5, fp
 80059b4:	45b1      	cmp	r9, r6
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	d139      	bne.n	8005a30 <_dtoa_r+0x6c8>
 80059bc:	f7fa fc66 	bl	800028c <__adddf3>
 80059c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059c4:	4606      	mov	r6, r0
 80059c6:	460f      	mov	r7, r1
 80059c8:	f7fb f8a6 	bl	8000b18 <__aeabi_dcmpgt>
 80059cc:	b9c8      	cbnz	r0, 8005a02 <_dtoa_r+0x69a>
 80059ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059d2:	4630      	mov	r0, r6
 80059d4:	4639      	mov	r1, r7
 80059d6:	f7fb f877 	bl	8000ac8 <__aeabi_dcmpeq>
 80059da:	b110      	cbz	r0, 80059e2 <_dtoa_r+0x67a>
 80059dc:	f018 0f01 	tst.w	r8, #1
 80059e0:	d10f      	bne.n	8005a02 <_dtoa_r+0x69a>
 80059e2:	9904      	ldr	r1, [sp, #16]
 80059e4:	4620      	mov	r0, r4
 80059e6:	f000 fac6 	bl	8005f76 <_Bfree>
 80059ea:	2300      	movs	r3, #0
 80059ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059ee:	702b      	strb	r3, [r5, #0]
 80059f0:	f10a 0301 	add.w	r3, sl, #1
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 8241 	beq.w	8005e80 <_dtoa_r+0xb18>
 80059fe:	601d      	str	r5, [r3, #0]
 8005a00:	e23e      	b.n	8005e80 <_dtoa_r+0xb18>
 8005a02:	f8cd a020 	str.w	sl, [sp, #32]
 8005a06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a0a:	2a39      	cmp	r2, #57	; 0x39
 8005a0c:	f105 33ff 	add.w	r3, r5, #4294967295
 8005a10:	d108      	bne.n	8005a24 <_dtoa_r+0x6bc>
 8005a12:	459b      	cmp	fp, r3
 8005a14:	d10a      	bne.n	8005a2c <_dtoa_r+0x6c4>
 8005a16:	9b08      	ldr	r3, [sp, #32]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	9308      	str	r3, [sp, #32]
 8005a1c:	2330      	movs	r3, #48	; 0x30
 8005a1e:	f88b 3000 	strb.w	r3, [fp]
 8005a22:	465b      	mov	r3, fp
 8005a24:	781a      	ldrb	r2, [r3, #0]
 8005a26:	3201      	adds	r2, #1
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	e78c      	b.n	8005946 <_dtoa_r+0x5de>
 8005a2c:	461d      	mov	r5, r3
 8005a2e:	e7ea      	b.n	8005a06 <_dtoa_r+0x69e>
 8005a30:	2200      	movs	r2, #0
 8005a32:	4b9b      	ldr	r3, [pc, #620]	; (8005ca0 <_dtoa_r+0x938>)
 8005a34:	f7fa fde0 	bl	80005f8 <__aeabi_dmul>
 8005a38:	2200      	movs	r2, #0
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	4606      	mov	r6, r0
 8005a3e:	460f      	mov	r7, r1
 8005a40:	f7fb f842 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d09a      	beq.n	800597e <_dtoa_r+0x616>
 8005a48:	e7cb      	b.n	80059e2 <_dtoa_r+0x67a>
 8005a4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a4c:	2a00      	cmp	r2, #0
 8005a4e:	f000 808b 	beq.w	8005b68 <_dtoa_r+0x800>
 8005a52:	9a06      	ldr	r2, [sp, #24]
 8005a54:	2a01      	cmp	r2, #1
 8005a56:	dc6e      	bgt.n	8005b36 <_dtoa_r+0x7ce>
 8005a58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a5a:	2a00      	cmp	r2, #0
 8005a5c:	d067      	beq.n	8005b2e <_dtoa_r+0x7c6>
 8005a5e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a62:	9f07      	ldr	r7, [sp, #28]
 8005a64:	9d05      	ldr	r5, [sp, #20]
 8005a66:	9a05      	ldr	r2, [sp, #20]
 8005a68:	2101      	movs	r1, #1
 8005a6a:	441a      	add	r2, r3
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	9205      	str	r2, [sp, #20]
 8005a70:	4498      	add	r8, r3
 8005a72:	f000 fb20 	bl	80060b6 <__i2b>
 8005a76:	4606      	mov	r6, r0
 8005a78:	2d00      	cmp	r5, #0
 8005a7a:	dd0c      	ble.n	8005a96 <_dtoa_r+0x72e>
 8005a7c:	f1b8 0f00 	cmp.w	r8, #0
 8005a80:	dd09      	ble.n	8005a96 <_dtoa_r+0x72e>
 8005a82:	4545      	cmp	r5, r8
 8005a84:	9a05      	ldr	r2, [sp, #20]
 8005a86:	462b      	mov	r3, r5
 8005a88:	bfa8      	it	ge
 8005a8a:	4643      	movge	r3, r8
 8005a8c:	1ad2      	subs	r2, r2, r3
 8005a8e:	9205      	str	r2, [sp, #20]
 8005a90:	1aed      	subs	r5, r5, r3
 8005a92:	eba8 0803 	sub.w	r8, r8, r3
 8005a96:	9b07      	ldr	r3, [sp, #28]
 8005a98:	b1eb      	cbz	r3, 8005ad6 <_dtoa_r+0x76e>
 8005a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d067      	beq.n	8005b70 <_dtoa_r+0x808>
 8005aa0:	b18f      	cbz	r7, 8005ac6 <_dtoa_r+0x75e>
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	463a      	mov	r2, r7
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f000 fba4 	bl	80061f4 <__pow5mult>
 8005aac:	9a04      	ldr	r2, [sp, #16]
 8005aae:	4601      	mov	r1, r0
 8005ab0:	4606      	mov	r6, r0
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 fb08 	bl	80060c8 <__multiply>
 8005ab8:	9904      	ldr	r1, [sp, #16]
 8005aba:	9008      	str	r0, [sp, #32]
 8005abc:	4620      	mov	r0, r4
 8005abe:	f000 fa5a 	bl	8005f76 <_Bfree>
 8005ac2:	9b08      	ldr	r3, [sp, #32]
 8005ac4:	9304      	str	r3, [sp, #16]
 8005ac6:	9b07      	ldr	r3, [sp, #28]
 8005ac8:	1bda      	subs	r2, r3, r7
 8005aca:	d004      	beq.n	8005ad6 <_dtoa_r+0x76e>
 8005acc:	9904      	ldr	r1, [sp, #16]
 8005ace:	4620      	mov	r0, r4
 8005ad0:	f000 fb90 	bl	80061f4 <__pow5mult>
 8005ad4:	9004      	str	r0, [sp, #16]
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f000 faec 	bl	80060b6 <__i2b>
 8005ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ae0:	4607      	mov	r7, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 81d0 	beq.w	8005e88 <_dtoa_r+0xb20>
 8005ae8:	461a      	mov	r2, r3
 8005aea:	4601      	mov	r1, r0
 8005aec:	4620      	mov	r0, r4
 8005aee:	f000 fb81 	bl	80061f4 <__pow5mult>
 8005af2:	9b06      	ldr	r3, [sp, #24]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	4607      	mov	r7, r0
 8005af8:	dc40      	bgt.n	8005b7c <_dtoa_r+0x814>
 8005afa:	9b00      	ldr	r3, [sp, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d139      	bne.n	8005b74 <_dtoa_r+0x80c>
 8005b00:	9b01      	ldr	r3, [sp, #4]
 8005b02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d136      	bne.n	8005b78 <_dtoa_r+0x810>
 8005b0a:	9b01      	ldr	r3, [sp, #4]
 8005b0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b10:	0d1b      	lsrs	r3, r3, #20
 8005b12:	051b      	lsls	r3, r3, #20
 8005b14:	b12b      	cbz	r3, 8005b22 <_dtoa_r+0x7ba>
 8005b16:	9b05      	ldr	r3, [sp, #20]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	9305      	str	r3, [sp, #20]
 8005b1c:	f108 0801 	add.w	r8, r8, #1
 8005b20:	2301      	movs	r3, #1
 8005b22:	9307      	str	r3, [sp, #28]
 8005b24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d12a      	bne.n	8005b80 <_dtoa_r+0x818>
 8005b2a:	2001      	movs	r0, #1
 8005b2c:	e030      	b.n	8005b90 <_dtoa_r+0x828>
 8005b2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b30:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b34:	e795      	b.n	8005a62 <_dtoa_r+0x6fa>
 8005b36:	9b07      	ldr	r3, [sp, #28]
 8005b38:	f109 37ff 	add.w	r7, r9, #4294967295
 8005b3c:	42bb      	cmp	r3, r7
 8005b3e:	bfbf      	itttt	lt
 8005b40:	9b07      	ldrlt	r3, [sp, #28]
 8005b42:	9707      	strlt	r7, [sp, #28]
 8005b44:	1afa      	sublt	r2, r7, r3
 8005b46:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005b48:	bfbb      	ittet	lt
 8005b4a:	189b      	addlt	r3, r3, r2
 8005b4c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005b4e:	1bdf      	subge	r7, r3, r7
 8005b50:	2700      	movlt	r7, #0
 8005b52:	f1b9 0f00 	cmp.w	r9, #0
 8005b56:	bfb5      	itete	lt
 8005b58:	9b05      	ldrlt	r3, [sp, #20]
 8005b5a:	9d05      	ldrge	r5, [sp, #20]
 8005b5c:	eba3 0509 	sublt.w	r5, r3, r9
 8005b60:	464b      	movge	r3, r9
 8005b62:	bfb8      	it	lt
 8005b64:	2300      	movlt	r3, #0
 8005b66:	e77e      	b.n	8005a66 <_dtoa_r+0x6fe>
 8005b68:	9f07      	ldr	r7, [sp, #28]
 8005b6a:	9d05      	ldr	r5, [sp, #20]
 8005b6c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005b6e:	e783      	b.n	8005a78 <_dtoa_r+0x710>
 8005b70:	9a07      	ldr	r2, [sp, #28]
 8005b72:	e7ab      	b.n	8005acc <_dtoa_r+0x764>
 8005b74:	2300      	movs	r3, #0
 8005b76:	e7d4      	b.n	8005b22 <_dtoa_r+0x7ba>
 8005b78:	9b00      	ldr	r3, [sp, #0]
 8005b7a:	e7d2      	b.n	8005b22 <_dtoa_r+0x7ba>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	9307      	str	r3, [sp, #28]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005b86:	6918      	ldr	r0, [r3, #16]
 8005b88:	f000 fa47 	bl	800601a <__hi0bits>
 8005b8c:	f1c0 0020 	rsb	r0, r0, #32
 8005b90:	4440      	add	r0, r8
 8005b92:	f010 001f 	ands.w	r0, r0, #31
 8005b96:	d047      	beq.n	8005c28 <_dtoa_r+0x8c0>
 8005b98:	f1c0 0320 	rsb	r3, r0, #32
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	dd3b      	ble.n	8005c18 <_dtoa_r+0x8b0>
 8005ba0:	9b05      	ldr	r3, [sp, #20]
 8005ba2:	f1c0 001c 	rsb	r0, r0, #28
 8005ba6:	4403      	add	r3, r0
 8005ba8:	9305      	str	r3, [sp, #20]
 8005baa:	4405      	add	r5, r0
 8005bac:	4480      	add	r8, r0
 8005bae:	9b05      	ldr	r3, [sp, #20]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	dd05      	ble.n	8005bc0 <_dtoa_r+0x858>
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	9904      	ldr	r1, [sp, #16]
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f000 fb69 	bl	8006290 <__lshift>
 8005bbe:	9004      	str	r0, [sp, #16]
 8005bc0:	f1b8 0f00 	cmp.w	r8, #0
 8005bc4:	dd05      	ble.n	8005bd2 <_dtoa_r+0x86a>
 8005bc6:	4639      	mov	r1, r7
 8005bc8:	4642      	mov	r2, r8
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f000 fb60 	bl	8006290 <__lshift>
 8005bd0:	4607      	mov	r7, r0
 8005bd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bd4:	b353      	cbz	r3, 8005c2c <_dtoa_r+0x8c4>
 8005bd6:	4639      	mov	r1, r7
 8005bd8:	9804      	ldr	r0, [sp, #16]
 8005bda:	f000 fbad 	bl	8006338 <__mcmp>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	da24      	bge.n	8005c2c <_dtoa_r+0x8c4>
 8005be2:	2300      	movs	r3, #0
 8005be4:	220a      	movs	r2, #10
 8005be6:	9904      	ldr	r1, [sp, #16]
 8005be8:	4620      	mov	r0, r4
 8005bea:	f000 f9db 	bl	8005fa4 <__multadd>
 8005bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf0:	9004      	str	r0, [sp, #16]
 8005bf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 814d 	beq.w	8005e96 <_dtoa_r+0xb2e>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4631      	mov	r1, r6
 8005c00:	220a      	movs	r2, #10
 8005c02:	4620      	mov	r0, r4
 8005c04:	f000 f9ce 	bl	8005fa4 <__multadd>
 8005c08:	9b02      	ldr	r3, [sp, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	4606      	mov	r6, r0
 8005c0e:	dc4f      	bgt.n	8005cb0 <_dtoa_r+0x948>
 8005c10:	9b06      	ldr	r3, [sp, #24]
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	dd4c      	ble.n	8005cb0 <_dtoa_r+0x948>
 8005c16:	e011      	b.n	8005c3c <_dtoa_r+0x8d4>
 8005c18:	d0c9      	beq.n	8005bae <_dtoa_r+0x846>
 8005c1a:	9a05      	ldr	r2, [sp, #20]
 8005c1c:	331c      	adds	r3, #28
 8005c1e:	441a      	add	r2, r3
 8005c20:	9205      	str	r2, [sp, #20]
 8005c22:	441d      	add	r5, r3
 8005c24:	4498      	add	r8, r3
 8005c26:	e7c2      	b.n	8005bae <_dtoa_r+0x846>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	e7f6      	b.n	8005c1a <_dtoa_r+0x8b2>
 8005c2c:	f1b9 0f00 	cmp.w	r9, #0
 8005c30:	dc38      	bgt.n	8005ca4 <_dtoa_r+0x93c>
 8005c32:	9b06      	ldr	r3, [sp, #24]
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	dd35      	ble.n	8005ca4 <_dtoa_r+0x93c>
 8005c38:	f8cd 9008 	str.w	r9, [sp, #8]
 8005c3c:	9b02      	ldr	r3, [sp, #8]
 8005c3e:	b963      	cbnz	r3, 8005c5a <_dtoa_r+0x8f2>
 8005c40:	4639      	mov	r1, r7
 8005c42:	2205      	movs	r2, #5
 8005c44:	4620      	mov	r0, r4
 8005c46:	f000 f9ad 	bl	8005fa4 <__multadd>
 8005c4a:	4601      	mov	r1, r0
 8005c4c:	4607      	mov	r7, r0
 8005c4e:	9804      	ldr	r0, [sp, #16]
 8005c50:	f000 fb72 	bl	8006338 <__mcmp>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	f73f adcc 	bgt.w	80057f2 <_dtoa_r+0x48a>
 8005c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c5c:	465d      	mov	r5, fp
 8005c5e:	ea6f 0a03 	mvn.w	sl, r3
 8005c62:	f04f 0900 	mov.w	r9, #0
 8005c66:	4639      	mov	r1, r7
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f000 f984 	bl	8005f76 <_Bfree>
 8005c6e:	2e00      	cmp	r6, #0
 8005c70:	f43f aeb7 	beq.w	80059e2 <_dtoa_r+0x67a>
 8005c74:	f1b9 0f00 	cmp.w	r9, #0
 8005c78:	d005      	beq.n	8005c86 <_dtoa_r+0x91e>
 8005c7a:	45b1      	cmp	r9, r6
 8005c7c:	d003      	beq.n	8005c86 <_dtoa_r+0x91e>
 8005c7e:	4649      	mov	r1, r9
 8005c80:	4620      	mov	r0, r4
 8005c82:	f000 f978 	bl	8005f76 <_Bfree>
 8005c86:	4631      	mov	r1, r6
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f000 f974 	bl	8005f76 <_Bfree>
 8005c8e:	e6a8      	b.n	80059e2 <_dtoa_r+0x67a>
 8005c90:	2700      	movs	r7, #0
 8005c92:	463e      	mov	r6, r7
 8005c94:	e7e1      	b.n	8005c5a <_dtoa_r+0x8f2>
 8005c96:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005c9a:	463e      	mov	r6, r7
 8005c9c:	e5a9      	b.n	80057f2 <_dtoa_r+0x48a>
 8005c9e:	bf00      	nop
 8005ca0:	40240000 	.word	0x40240000
 8005ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ca6:	f8cd 9008 	str.w	r9, [sp, #8]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 80fa 	beq.w	8005ea4 <_dtoa_r+0xb3c>
 8005cb0:	2d00      	cmp	r5, #0
 8005cb2:	dd05      	ble.n	8005cc0 <_dtoa_r+0x958>
 8005cb4:	4631      	mov	r1, r6
 8005cb6:	462a      	mov	r2, r5
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 fae9 	bl	8006290 <__lshift>
 8005cbe:	4606      	mov	r6, r0
 8005cc0:	9b07      	ldr	r3, [sp, #28]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d04c      	beq.n	8005d60 <_dtoa_r+0x9f8>
 8005cc6:	6871      	ldr	r1, [r6, #4]
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f000 f920 	bl	8005f0e <_Balloc>
 8005cce:	6932      	ldr	r2, [r6, #16]
 8005cd0:	3202      	adds	r2, #2
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	0092      	lsls	r2, r2, #2
 8005cd6:	f106 010c 	add.w	r1, r6, #12
 8005cda:	300c      	adds	r0, #12
 8005cdc:	f000 f90a 	bl	8005ef4 <memcpy>
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f000 fad3 	bl	8006290 <__lshift>
 8005cea:	9b00      	ldr	r3, [sp, #0]
 8005cec:	f8cd b014 	str.w	fp, [sp, #20]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	46b1      	mov	r9, r6
 8005cf6:	9307      	str	r3, [sp, #28]
 8005cf8:	4606      	mov	r6, r0
 8005cfa:	4639      	mov	r1, r7
 8005cfc:	9804      	ldr	r0, [sp, #16]
 8005cfe:	f7ff faa7 	bl	8005250 <quorem>
 8005d02:	4649      	mov	r1, r9
 8005d04:	4605      	mov	r5, r0
 8005d06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d0a:	9804      	ldr	r0, [sp, #16]
 8005d0c:	f000 fb14 	bl	8006338 <__mcmp>
 8005d10:	4632      	mov	r2, r6
 8005d12:	9000      	str	r0, [sp, #0]
 8005d14:	4639      	mov	r1, r7
 8005d16:	4620      	mov	r0, r4
 8005d18:	f000 fb28 	bl	800636c <__mdiff>
 8005d1c:	68c3      	ldr	r3, [r0, #12]
 8005d1e:	4602      	mov	r2, r0
 8005d20:	bb03      	cbnz	r3, 8005d64 <_dtoa_r+0x9fc>
 8005d22:	4601      	mov	r1, r0
 8005d24:	9008      	str	r0, [sp, #32]
 8005d26:	9804      	ldr	r0, [sp, #16]
 8005d28:	f000 fb06 	bl	8006338 <__mcmp>
 8005d2c:	9a08      	ldr	r2, [sp, #32]
 8005d2e:	4603      	mov	r3, r0
 8005d30:	4611      	mov	r1, r2
 8005d32:	4620      	mov	r0, r4
 8005d34:	9308      	str	r3, [sp, #32]
 8005d36:	f000 f91e 	bl	8005f76 <_Bfree>
 8005d3a:	9b08      	ldr	r3, [sp, #32]
 8005d3c:	b9a3      	cbnz	r3, 8005d68 <_dtoa_r+0xa00>
 8005d3e:	9a06      	ldr	r2, [sp, #24]
 8005d40:	b992      	cbnz	r2, 8005d68 <_dtoa_r+0xa00>
 8005d42:	9a07      	ldr	r2, [sp, #28]
 8005d44:	b982      	cbnz	r2, 8005d68 <_dtoa_r+0xa00>
 8005d46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d4a:	d029      	beq.n	8005da0 <_dtoa_r+0xa38>
 8005d4c:	9b00      	ldr	r3, [sp, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	dd01      	ble.n	8005d56 <_dtoa_r+0x9ee>
 8005d52:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005d56:	9b05      	ldr	r3, [sp, #20]
 8005d58:	1c5d      	adds	r5, r3, #1
 8005d5a:	f883 8000 	strb.w	r8, [r3]
 8005d5e:	e782      	b.n	8005c66 <_dtoa_r+0x8fe>
 8005d60:	4630      	mov	r0, r6
 8005d62:	e7c2      	b.n	8005cea <_dtoa_r+0x982>
 8005d64:	2301      	movs	r3, #1
 8005d66:	e7e3      	b.n	8005d30 <_dtoa_r+0x9c8>
 8005d68:	9a00      	ldr	r2, [sp, #0]
 8005d6a:	2a00      	cmp	r2, #0
 8005d6c:	db04      	blt.n	8005d78 <_dtoa_r+0xa10>
 8005d6e:	d125      	bne.n	8005dbc <_dtoa_r+0xa54>
 8005d70:	9a06      	ldr	r2, [sp, #24]
 8005d72:	bb1a      	cbnz	r2, 8005dbc <_dtoa_r+0xa54>
 8005d74:	9a07      	ldr	r2, [sp, #28]
 8005d76:	bb0a      	cbnz	r2, 8005dbc <_dtoa_r+0xa54>
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	ddec      	ble.n	8005d56 <_dtoa_r+0x9ee>
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	9904      	ldr	r1, [sp, #16]
 8005d80:	4620      	mov	r0, r4
 8005d82:	f000 fa85 	bl	8006290 <__lshift>
 8005d86:	4639      	mov	r1, r7
 8005d88:	9004      	str	r0, [sp, #16]
 8005d8a:	f000 fad5 	bl	8006338 <__mcmp>
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	dc03      	bgt.n	8005d9a <_dtoa_r+0xa32>
 8005d92:	d1e0      	bne.n	8005d56 <_dtoa_r+0x9ee>
 8005d94:	f018 0f01 	tst.w	r8, #1
 8005d98:	d0dd      	beq.n	8005d56 <_dtoa_r+0x9ee>
 8005d9a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d9e:	d1d8      	bne.n	8005d52 <_dtoa_r+0x9ea>
 8005da0:	9b05      	ldr	r3, [sp, #20]
 8005da2:	9a05      	ldr	r2, [sp, #20]
 8005da4:	1c5d      	adds	r5, r3, #1
 8005da6:	2339      	movs	r3, #57	; 0x39
 8005da8:	7013      	strb	r3, [r2, #0]
 8005daa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005dae:	2b39      	cmp	r3, #57	; 0x39
 8005db0:	f105 32ff 	add.w	r2, r5, #4294967295
 8005db4:	d04f      	beq.n	8005e56 <_dtoa_r+0xaee>
 8005db6:	3301      	adds	r3, #1
 8005db8:	7013      	strb	r3, [r2, #0]
 8005dba:	e754      	b.n	8005c66 <_dtoa_r+0x8fe>
 8005dbc:	9a05      	ldr	r2, [sp, #20]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f102 0501 	add.w	r5, r2, #1
 8005dc4:	dd06      	ble.n	8005dd4 <_dtoa_r+0xa6c>
 8005dc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005dca:	d0e9      	beq.n	8005da0 <_dtoa_r+0xa38>
 8005dcc:	f108 0801 	add.w	r8, r8, #1
 8005dd0:	9b05      	ldr	r3, [sp, #20]
 8005dd2:	e7c2      	b.n	8005d5a <_dtoa_r+0x9f2>
 8005dd4:	9a02      	ldr	r2, [sp, #8]
 8005dd6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005dda:	eba5 030b 	sub.w	r3, r5, fp
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d021      	beq.n	8005e26 <_dtoa_r+0xabe>
 8005de2:	2300      	movs	r3, #0
 8005de4:	220a      	movs	r2, #10
 8005de6:	9904      	ldr	r1, [sp, #16]
 8005de8:	4620      	mov	r0, r4
 8005dea:	f000 f8db 	bl	8005fa4 <__multadd>
 8005dee:	45b1      	cmp	r9, r6
 8005df0:	9004      	str	r0, [sp, #16]
 8005df2:	f04f 0300 	mov.w	r3, #0
 8005df6:	f04f 020a 	mov.w	r2, #10
 8005dfa:	4649      	mov	r1, r9
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	d105      	bne.n	8005e0c <_dtoa_r+0xaa4>
 8005e00:	f000 f8d0 	bl	8005fa4 <__multadd>
 8005e04:	4681      	mov	r9, r0
 8005e06:	4606      	mov	r6, r0
 8005e08:	9505      	str	r5, [sp, #20]
 8005e0a:	e776      	b.n	8005cfa <_dtoa_r+0x992>
 8005e0c:	f000 f8ca 	bl	8005fa4 <__multadd>
 8005e10:	4631      	mov	r1, r6
 8005e12:	4681      	mov	r9, r0
 8005e14:	2300      	movs	r3, #0
 8005e16:	220a      	movs	r2, #10
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 f8c3 	bl	8005fa4 <__multadd>
 8005e1e:	4606      	mov	r6, r0
 8005e20:	e7f2      	b.n	8005e08 <_dtoa_r+0xaa0>
 8005e22:	f04f 0900 	mov.w	r9, #0
 8005e26:	2201      	movs	r2, #1
 8005e28:	9904      	ldr	r1, [sp, #16]
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f000 fa30 	bl	8006290 <__lshift>
 8005e30:	4639      	mov	r1, r7
 8005e32:	9004      	str	r0, [sp, #16]
 8005e34:	f000 fa80 	bl	8006338 <__mcmp>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	dcb6      	bgt.n	8005daa <_dtoa_r+0xa42>
 8005e3c:	d102      	bne.n	8005e44 <_dtoa_r+0xadc>
 8005e3e:	f018 0f01 	tst.w	r8, #1
 8005e42:	d1b2      	bne.n	8005daa <_dtoa_r+0xa42>
 8005e44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e48:	2b30      	cmp	r3, #48	; 0x30
 8005e4a:	f105 32ff 	add.w	r2, r5, #4294967295
 8005e4e:	f47f af0a 	bne.w	8005c66 <_dtoa_r+0x8fe>
 8005e52:	4615      	mov	r5, r2
 8005e54:	e7f6      	b.n	8005e44 <_dtoa_r+0xadc>
 8005e56:	4593      	cmp	fp, r2
 8005e58:	d105      	bne.n	8005e66 <_dtoa_r+0xafe>
 8005e5a:	2331      	movs	r3, #49	; 0x31
 8005e5c:	f10a 0a01 	add.w	sl, sl, #1
 8005e60:	f88b 3000 	strb.w	r3, [fp]
 8005e64:	e6ff      	b.n	8005c66 <_dtoa_r+0x8fe>
 8005e66:	4615      	mov	r5, r2
 8005e68:	e79f      	b.n	8005daa <_dtoa_r+0xa42>
 8005e6a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005ed0 <_dtoa_r+0xb68>
 8005e6e:	e007      	b.n	8005e80 <_dtoa_r+0xb18>
 8005e70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e72:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005ed4 <_dtoa_r+0xb6c>
 8005e76:	b11b      	cbz	r3, 8005e80 <_dtoa_r+0xb18>
 8005e78:	f10b 0308 	add.w	r3, fp, #8
 8005e7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	4658      	mov	r0, fp
 8005e82:	b017      	add	sp, #92	; 0x5c
 8005e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e88:	9b06      	ldr	r3, [sp, #24]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	f77f ae35 	ble.w	8005afa <_dtoa_r+0x792>
 8005e90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e92:	9307      	str	r3, [sp, #28]
 8005e94:	e649      	b.n	8005b2a <_dtoa_r+0x7c2>
 8005e96:	9b02      	ldr	r3, [sp, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	dc03      	bgt.n	8005ea4 <_dtoa_r+0xb3c>
 8005e9c:	9b06      	ldr	r3, [sp, #24]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	f73f aecc 	bgt.w	8005c3c <_dtoa_r+0x8d4>
 8005ea4:	465d      	mov	r5, fp
 8005ea6:	4639      	mov	r1, r7
 8005ea8:	9804      	ldr	r0, [sp, #16]
 8005eaa:	f7ff f9d1 	bl	8005250 <quorem>
 8005eae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005eb2:	f805 8b01 	strb.w	r8, [r5], #1
 8005eb6:	9a02      	ldr	r2, [sp, #8]
 8005eb8:	eba5 030b 	sub.w	r3, r5, fp
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	ddb0      	ble.n	8005e22 <_dtoa_r+0xaba>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	220a      	movs	r2, #10
 8005ec4:	9904      	ldr	r1, [sp, #16]
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f000 f86c 	bl	8005fa4 <__multadd>
 8005ecc:	9004      	str	r0, [sp, #16]
 8005ece:	e7ea      	b.n	8005ea6 <_dtoa_r+0xb3e>
 8005ed0:	08007e68 	.word	0x08007e68
 8005ed4:	08007e8c 	.word	0x08007e8c

08005ed8 <_localeconv_r>:
 8005ed8:	4b04      	ldr	r3, [pc, #16]	; (8005eec <_localeconv_r+0x14>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6a18      	ldr	r0, [r3, #32]
 8005ede:	4b04      	ldr	r3, [pc, #16]	; (8005ef0 <_localeconv_r+0x18>)
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	bf08      	it	eq
 8005ee4:	4618      	moveq	r0, r3
 8005ee6:	30f0      	adds	r0, #240	; 0xf0
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	2000000c 	.word	0x2000000c
 8005ef0:	20000070 	.word	0x20000070

08005ef4 <memcpy>:
 8005ef4:	b510      	push	{r4, lr}
 8005ef6:	1e43      	subs	r3, r0, #1
 8005ef8:	440a      	add	r2, r1
 8005efa:	4291      	cmp	r1, r2
 8005efc:	d100      	bne.n	8005f00 <memcpy+0xc>
 8005efe:	bd10      	pop	{r4, pc}
 8005f00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f08:	e7f7      	b.n	8005efa <memcpy+0x6>

08005f0a <__malloc_lock>:
 8005f0a:	4770      	bx	lr

08005f0c <__malloc_unlock>:
 8005f0c:	4770      	bx	lr

08005f0e <_Balloc>:
 8005f0e:	b570      	push	{r4, r5, r6, lr}
 8005f10:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f12:	4604      	mov	r4, r0
 8005f14:	460e      	mov	r6, r1
 8005f16:	b93d      	cbnz	r5, 8005f28 <_Balloc+0x1a>
 8005f18:	2010      	movs	r0, #16
 8005f1a:	f7fe fc19 	bl	8004750 <malloc>
 8005f1e:	6260      	str	r0, [r4, #36]	; 0x24
 8005f20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f24:	6005      	str	r5, [r0, #0]
 8005f26:	60c5      	str	r5, [r0, #12]
 8005f28:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005f2a:	68eb      	ldr	r3, [r5, #12]
 8005f2c:	b183      	cbz	r3, 8005f50 <_Balloc+0x42>
 8005f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005f36:	b9b8      	cbnz	r0, 8005f68 <_Balloc+0x5a>
 8005f38:	2101      	movs	r1, #1
 8005f3a:	fa01 f506 	lsl.w	r5, r1, r6
 8005f3e:	1d6a      	adds	r2, r5, #5
 8005f40:	0092      	lsls	r2, r2, #2
 8005f42:	4620      	mov	r0, r4
 8005f44:	f000 fabe 	bl	80064c4 <_calloc_r>
 8005f48:	b160      	cbz	r0, 8005f64 <_Balloc+0x56>
 8005f4a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005f4e:	e00e      	b.n	8005f6e <_Balloc+0x60>
 8005f50:	2221      	movs	r2, #33	; 0x21
 8005f52:	2104      	movs	r1, #4
 8005f54:	4620      	mov	r0, r4
 8005f56:	f000 fab5 	bl	80064c4 <_calloc_r>
 8005f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f5c:	60e8      	str	r0, [r5, #12]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e4      	bne.n	8005f2e <_Balloc+0x20>
 8005f64:	2000      	movs	r0, #0
 8005f66:	bd70      	pop	{r4, r5, r6, pc}
 8005f68:	6802      	ldr	r2, [r0, #0]
 8005f6a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f74:	e7f7      	b.n	8005f66 <_Balloc+0x58>

08005f76 <_Bfree>:
 8005f76:	b570      	push	{r4, r5, r6, lr}
 8005f78:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	460d      	mov	r5, r1
 8005f7e:	b93c      	cbnz	r4, 8005f90 <_Bfree+0x1a>
 8005f80:	2010      	movs	r0, #16
 8005f82:	f7fe fbe5 	bl	8004750 <malloc>
 8005f86:	6270      	str	r0, [r6, #36]	; 0x24
 8005f88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f8c:	6004      	str	r4, [r0, #0]
 8005f8e:	60c4      	str	r4, [r0, #12]
 8005f90:	b13d      	cbz	r5, 8005fa2 <_Bfree+0x2c>
 8005f92:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005f94:	686a      	ldr	r2, [r5, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f9c:	6029      	str	r1, [r5, #0]
 8005f9e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}

08005fa4 <__multadd>:
 8005fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa8:	690d      	ldr	r5, [r1, #16]
 8005faa:	461f      	mov	r7, r3
 8005fac:	4606      	mov	r6, r0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	f101 0c14 	add.w	ip, r1, #20
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f8dc 0000 	ldr.w	r0, [ip]
 8005fba:	b281      	uxth	r1, r0
 8005fbc:	fb02 7101 	mla	r1, r2, r1, r7
 8005fc0:	0c0f      	lsrs	r7, r1, #16
 8005fc2:	0c00      	lsrs	r0, r0, #16
 8005fc4:	fb02 7000 	mla	r0, r2, r0, r7
 8005fc8:	b289      	uxth	r1, r1
 8005fca:	3301      	adds	r3, #1
 8005fcc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005fd0:	429d      	cmp	r5, r3
 8005fd2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005fd6:	f84c 1b04 	str.w	r1, [ip], #4
 8005fda:	dcec      	bgt.n	8005fb6 <__multadd+0x12>
 8005fdc:	b1d7      	cbz	r7, 8006014 <__multadd+0x70>
 8005fde:	68a3      	ldr	r3, [r4, #8]
 8005fe0:	42ab      	cmp	r3, r5
 8005fe2:	dc12      	bgt.n	800600a <__multadd+0x66>
 8005fe4:	6861      	ldr	r1, [r4, #4]
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	3101      	adds	r1, #1
 8005fea:	f7ff ff90 	bl	8005f0e <_Balloc>
 8005fee:	6922      	ldr	r2, [r4, #16]
 8005ff0:	3202      	adds	r2, #2
 8005ff2:	f104 010c 	add.w	r1, r4, #12
 8005ff6:	4680      	mov	r8, r0
 8005ff8:	0092      	lsls	r2, r2, #2
 8005ffa:	300c      	adds	r0, #12
 8005ffc:	f7ff ff7a 	bl	8005ef4 <memcpy>
 8006000:	4621      	mov	r1, r4
 8006002:	4630      	mov	r0, r6
 8006004:	f7ff ffb7 	bl	8005f76 <_Bfree>
 8006008:	4644      	mov	r4, r8
 800600a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800600e:	3501      	adds	r5, #1
 8006010:	615f      	str	r7, [r3, #20]
 8006012:	6125      	str	r5, [r4, #16]
 8006014:	4620      	mov	r0, r4
 8006016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800601a <__hi0bits>:
 800601a:	0c02      	lsrs	r2, r0, #16
 800601c:	0412      	lsls	r2, r2, #16
 800601e:	4603      	mov	r3, r0
 8006020:	b9b2      	cbnz	r2, 8006050 <__hi0bits+0x36>
 8006022:	0403      	lsls	r3, r0, #16
 8006024:	2010      	movs	r0, #16
 8006026:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800602a:	bf04      	itt	eq
 800602c:	021b      	lsleq	r3, r3, #8
 800602e:	3008      	addeq	r0, #8
 8006030:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006034:	bf04      	itt	eq
 8006036:	011b      	lsleq	r3, r3, #4
 8006038:	3004      	addeq	r0, #4
 800603a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800603e:	bf04      	itt	eq
 8006040:	009b      	lsleq	r3, r3, #2
 8006042:	3002      	addeq	r0, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	db06      	blt.n	8006056 <__hi0bits+0x3c>
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	d503      	bpl.n	8006054 <__hi0bits+0x3a>
 800604c:	3001      	adds	r0, #1
 800604e:	4770      	bx	lr
 8006050:	2000      	movs	r0, #0
 8006052:	e7e8      	b.n	8006026 <__hi0bits+0xc>
 8006054:	2020      	movs	r0, #32
 8006056:	4770      	bx	lr

08006058 <__lo0bits>:
 8006058:	6803      	ldr	r3, [r0, #0]
 800605a:	f013 0207 	ands.w	r2, r3, #7
 800605e:	4601      	mov	r1, r0
 8006060:	d00b      	beq.n	800607a <__lo0bits+0x22>
 8006062:	07da      	lsls	r2, r3, #31
 8006064:	d423      	bmi.n	80060ae <__lo0bits+0x56>
 8006066:	0798      	lsls	r0, r3, #30
 8006068:	bf49      	itett	mi
 800606a:	085b      	lsrmi	r3, r3, #1
 800606c:	089b      	lsrpl	r3, r3, #2
 800606e:	2001      	movmi	r0, #1
 8006070:	600b      	strmi	r3, [r1, #0]
 8006072:	bf5c      	itt	pl
 8006074:	600b      	strpl	r3, [r1, #0]
 8006076:	2002      	movpl	r0, #2
 8006078:	4770      	bx	lr
 800607a:	b298      	uxth	r0, r3
 800607c:	b9a8      	cbnz	r0, 80060aa <__lo0bits+0x52>
 800607e:	0c1b      	lsrs	r3, r3, #16
 8006080:	2010      	movs	r0, #16
 8006082:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006086:	bf04      	itt	eq
 8006088:	0a1b      	lsreq	r3, r3, #8
 800608a:	3008      	addeq	r0, #8
 800608c:	071a      	lsls	r2, r3, #28
 800608e:	bf04      	itt	eq
 8006090:	091b      	lsreq	r3, r3, #4
 8006092:	3004      	addeq	r0, #4
 8006094:	079a      	lsls	r2, r3, #30
 8006096:	bf04      	itt	eq
 8006098:	089b      	lsreq	r3, r3, #2
 800609a:	3002      	addeq	r0, #2
 800609c:	07da      	lsls	r2, r3, #31
 800609e:	d402      	bmi.n	80060a6 <__lo0bits+0x4e>
 80060a0:	085b      	lsrs	r3, r3, #1
 80060a2:	d006      	beq.n	80060b2 <__lo0bits+0x5a>
 80060a4:	3001      	adds	r0, #1
 80060a6:	600b      	str	r3, [r1, #0]
 80060a8:	4770      	bx	lr
 80060aa:	4610      	mov	r0, r2
 80060ac:	e7e9      	b.n	8006082 <__lo0bits+0x2a>
 80060ae:	2000      	movs	r0, #0
 80060b0:	4770      	bx	lr
 80060b2:	2020      	movs	r0, #32
 80060b4:	4770      	bx	lr

080060b6 <__i2b>:
 80060b6:	b510      	push	{r4, lr}
 80060b8:	460c      	mov	r4, r1
 80060ba:	2101      	movs	r1, #1
 80060bc:	f7ff ff27 	bl	8005f0e <_Balloc>
 80060c0:	2201      	movs	r2, #1
 80060c2:	6144      	str	r4, [r0, #20]
 80060c4:	6102      	str	r2, [r0, #16]
 80060c6:	bd10      	pop	{r4, pc}

080060c8 <__multiply>:
 80060c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060cc:	4614      	mov	r4, r2
 80060ce:	690a      	ldr	r2, [r1, #16]
 80060d0:	6923      	ldr	r3, [r4, #16]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	bfb8      	it	lt
 80060d6:	460b      	movlt	r3, r1
 80060d8:	4688      	mov	r8, r1
 80060da:	bfbc      	itt	lt
 80060dc:	46a0      	movlt	r8, r4
 80060de:	461c      	movlt	r4, r3
 80060e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80060e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80060e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80060ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80060f0:	eb07 0609 	add.w	r6, r7, r9
 80060f4:	42b3      	cmp	r3, r6
 80060f6:	bfb8      	it	lt
 80060f8:	3101      	addlt	r1, #1
 80060fa:	f7ff ff08 	bl	8005f0e <_Balloc>
 80060fe:	f100 0514 	add.w	r5, r0, #20
 8006102:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006106:	462b      	mov	r3, r5
 8006108:	2200      	movs	r2, #0
 800610a:	4573      	cmp	r3, lr
 800610c:	d316      	bcc.n	800613c <__multiply+0x74>
 800610e:	f104 0214 	add.w	r2, r4, #20
 8006112:	f108 0114 	add.w	r1, r8, #20
 8006116:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800611a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	9b00      	ldr	r3, [sp, #0]
 8006122:	9201      	str	r2, [sp, #4]
 8006124:	4293      	cmp	r3, r2
 8006126:	d80c      	bhi.n	8006142 <__multiply+0x7a>
 8006128:	2e00      	cmp	r6, #0
 800612a:	dd03      	ble.n	8006134 <__multiply+0x6c>
 800612c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006130:	2b00      	cmp	r3, #0
 8006132:	d05d      	beq.n	80061f0 <__multiply+0x128>
 8006134:	6106      	str	r6, [r0, #16]
 8006136:	b003      	add	sp, #12
 8006138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800613c:	f843 2b04 	str.w	r2, [r3], #4
 8006140:	e7e3      	b.n	800610a <__multiply+0x42>
 8006142:	f8b2 b000 	ldrh.w	fp, [r2]
 8006146:	f1bb 0f00 	cmp.w	fp, #0
 800614a:	d023      	beq.n	8006194 <__multiply+0xcc>
 800614c:	4689      	mov	r9, r1
 800614e:	46ac      	mov	ip, r5
 8006150:	f04f 0800 	mov.w	r8, #0
 8006154:	f859 4b04 	ldr.w	r4, [r9], #4
 8006158:	f8dc a000 	ldr.w	sl, [ip]
 800615c:	b2a3      	uxth	r3, r4
 800615e:	fa1f fa8a 	uxth.w	sl, sl
 8006162:	fb0b a303 	mla	r3, fp, r3, sl
 8006166:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800616a:	f8dc 4000 	ldr.w	r4, [ip]
 800616e:	4443      	add	r3, r8
 8006170:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006174:	fb0b 840a 	mla	r4, fp, sl, r8
 8006178:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800617c:	46e2      	mov	sl, ip
 800617e:	b29b      	uxth	r3, r3
 8006180:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006184:	454f      	cmp	r7, r9
 8006186:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800618a:	f84a 3b04 	str.w	r3, [sl], #4
 800618e:	d82b      	bhi.n	80061e8 <__multiply+0x120>
 8006190:	f8cc 8004 	str.w	r8, [ip, #4]
 8006194:	9b01      	ldr	r3, [sp, #4]
 8006196:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800619a:	3204      	adds	r2, #4
 800619c:	f1ba 0f00 	cmp.w	sl, #0
 80061a0:	d020      	beq.n	80061e4 <__multiply+0x11c>
 80061a2:	682b      	ldr	r3, [r5, #0]
 80061a4:	4689      	mov	r9, r1
 80061a6:	46a8      	mov	r8, r5
 80061a8:	f04f 0b00 	mov.w	fp, #0
 80061ac:	f8b9 c000 	ldrh.w	ip, [r9]
 80061b0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80061b4:	fb0a 440c 	mla	r4, sl, ip, r4
 80061b8:	445c      	add	r4, fp
 80061ba:	46c4      	mov	ip, r8
 80061bc:	b29b      	uxth	r3, r3
 80061be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80061c2:	f84c 3b04 	str.w	r3, [ip], #4
 80061c6:	f859 3b04 	ldr.w	r3, [r9], #4
 80061ca:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80061ce:	0c1b      	lsrs	r3, r3, #16
 80061d0:	fb0a b303 	mla	r3, sl, r3, fp
 80061d4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80061d8:	454f      	cmp	r7, r9
 80061da:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80061de:	d805      	bhi.n	80061ec <__multiply+0x124>
 80061e0:	f8c8 3004 	str.w	r3, [r8, #4]
 80061e4:	3504      	adds	r5, #4
 80061e6:	e79b      	b.n	8006120 <__multiply+0x58>
 80061e8:	46d4      	mov	ip, sl
 80061ea:	e7b3      	b.n	8006154 <__multiply+0x8c>
 80061ec:	46e0      	mov	r8, ip
 80061ee:	e7dd      	b.n	80061ac <__multiply+0xe4>
 80061f0:	3e01      	subs	r6, #1
 80061f2:	e799      	b.n	8006128 <__multiply+0x60>

080061f4 <__pow5mult>:
 80061f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f8:	4615      	mov	r5, r2
 80061fa:	f012 0203 	ands.w	r2, r2, #3
 80061fe:	4606      	mov	r6, r0
 8006200:	460f      	mov	r7, r1
 8006202:	d007      	beq.n	8006214 <__pow5mult+0x20>
 8006204:	3a01      	subs	r2, #1
 8006206:	4c21      	ldr	r4, [pc, #132]	; (800628c <__pow5mult+0x98>)
 8006208:	2300      	movs	r3, #0
 800620a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800620e:	f7ff fec9 	bl	8005fa4 <__multadd>
 8006212:	4607      	mov	r7, r0
 8006214:	10ad      	asrs	r5, r5, #2
 8006216:	d035      	beq.n	8006284 <__pow5mult+0x90>
 8006218:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800621a:	b93c      	cbnz	r4, 800622c <__pow5mult+0x38>
 800621c:	2010      	movs	r0, #16
 800621e:	f7fe fa97 	bl	8004750 <malloc>
 8006222:	6270      	str	r0, [r6, #36]	; 0x24
 8006224:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006228:	6004      	str	r4, [r0, #0]
 800622a:	60c4      	str	r4, [r0, #12]
 800622c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006230:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006234:	b94c      	cbnz	r4, 800624a <__pow5mult+0x56>
 8006236:	f240 2171 	movw	r1, #625	; 0x271
 800623a:	4630      	mov	r0, r6
 800623c:	f7ff ff3b 	bl	80060b6 <__i2b>
 8006240:	2300      	movs	r3, #0
 8006242:	f8c8 0008 	str.w	r0, [r8, #8]
 8006246:	4604      	mov	r4, r0
 8006248:	6003      	str	r3, [r0, #0]
 800624a:	f04f 0800 	mov.w	r8, #0
 800624e:	07eb      	lsls	r3, r5, #31
 8006250:	d50a      	bpl.n	8006268 <__pow5mult+0x74>
 8006252:	4639      	mov	r1, r7
 8006254:	4622      	mov	r2, r4
 8006256:	4630      	mov	r0, r6
 8006258:	f7ff ff36 	bl	80060c8 <__multiply>
 800625c:	4639      	mov	r1, r7
 800625e:	4681      	mov	r9, r0
 8006260:	4630      	mov	r0, r6
 8006262:	f7ff fe88 	bl	8005f76 <_Bfree>
 8006266:	464f      	mov	r7, r9
 8006268:	106d      	asrs	r5, r5, #1
 800626a:	d00b      	beq.n	8006284 <__pow5mult+0x90>
 800626c:	6820      	ldr	r0, [r4, #0]
 800626e:	b938      	cbnz	r0, 8006280 <__pow5mult+0x8c>
 8006270:	4622      	mov	r2, r4
 8006272:	4621      	mov	r1, r4
 8006274:	4630      	mov	r0, r6
 8006276:	f7ff ff27 	bl	80060c8 <__multiply>
 800627a:	6020      	str	r0, [r4, #0]
 800627c:	f8c0 8000 	str.w	r8, [r0]
 8006280:	4604      	mov	r4, r0
 8006282:	e7e4      	b.n	800624e <__pow5mult+0x5a>
 8006284:	4638      	mov	r0, r7
 8006286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800628a:	bf00      	nop
 800628c:	08007f90 	.word	0x08007f90

08006290 <__lshift>:
 8006290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006294:	460c      	mov	r4, r1
 8006296:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800629a:	6923      	ldr	r3, [r4, #16]
 800629c:	6849      	ldr	r1, [r1, #4]
 800629e:	eb0a 0903 	add.w	r9, sl, r3
 80062a2:	68a3      	ldr	r3, [r4, #8]
 80062a4:	4607      	mov	r7, r0
 80062a6:	4616      	mov	r6, r2
 80062a8:	f109 0501 	add.w	r5, r9, #1
 80062ac:	42ab      	cmp	r3, r5
 80062ae:	db32      	blt.n	8006316 <__lshift+0x86>
 80062b0:	4638      	mov	r0, r7
 80062b2:	f7ff fe2c 	bl	8005f0e <_Balloc>
 80062b6:	2300      	movs	r3, #0
 80062b8:	4680      	mov	r8, r0
 80062ba:	f100 0114 	add.w	r1, r0, #20
 80062be:	461a      	mov	r2, r3
 80062c0:	4553      	cmp	r3, sl
 80062c2:	db2b      	blt.n	800631c <__lshift+0x8c>
 80062c4:	6920      	ldr	r0, [r4, #16]
 80062c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062ca:	f104 0314 	add.w	r3, r4, #20
 80062ce:	f016 021f 	ands.w	r2, r6, #31
 80062d2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062d6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062da:	d025      	beq.n	8006328 <__lshift+0x98>
 80062dc:	f1c2 0e20 	rsb	lr, r2, #32
 80062e0:	2000      	movs	r0, #0
 80062e2:	681e      	ldr	r6, [r3, #0]
 80062e4:	468a      	mov	sl, r1
 80062e6:	4096      	lsls	r6, r2
 80062e8:	4330      	orrs	r0, r6
 80062ea:	f84a 0b04 	str.w	r0, [sl], #4
 80062ee:	f853 0b04 	ldr.w	r0, [r3], #4
 80062f2:	459c      	cmp	ip, r3
 80062f4:	fa20 f00e 	lsr.w	r0, r0, lr
 80062f8:	d814      	bhi.n	8006324 <__lshift+0x94>
 80062fa:	6048      	str	r0, [r1, #4]
 80062fc:	b108      	cbz	r0, 8006302 <__lshift+0x72>
 80062fe:	f109 0502 	add.w	r5, r9, #2
 8006302:	3d01      	subs	r5, #1
 8006304:	4638      	mov	r0, r7
 8006306:	f8c8 5010 	str.w	r5, [r8, #16]
 800630a:	4621      	mov	r1, r4
 800630c:	f7ff fe33 	bl	8005f76 <_Bfree>
 8006310:	4640      	mov	r0, r8
 8006312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006316:	3101      	adds	r1, #1
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	e7c7      	b.n	80062ac <__lshift+0x1c>
 800631c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006320:	3301      	adds	r3, #1
 8006322:	e7cd      	b.n	80062c0 <__lshift+0x30>
 8006324:	4651      	mov	r1, sl
 8006326:	e7dc      	b.n	80062e2 <__lshift+0x52>
 8006328:	3904      	subs	r1, #4
 800632a:	f853 2b04 	ldr.w	r2, [r3], #4
 800632e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006332:	459c      	cmp	ip, r3
 8006334:	d8f9      	bhi.n	800632a <__lshift+0x9a>
 8006336:	e7e4      	b.n	8006302 <__lshift+0x72>

08006338 <__mcmp>:
 8006338:	6903      	ldr	r3, [r0, #16]
 800633a:	690a      	ldr	r2, [r1, #16]
 800633c:	1a9b      	subs	r3, r3, r2
 800633e:	b530      	push	{r4, r5, lr}
 8006340:	d10c      	bne.n	800635c <__mcmp+0x24>
 8006342:	0092      	lsls	r2, r2, #2
 8006344:	3014      	adds	r0, #20
 8006346:	3114      	adds	r1, #20
 8006348:	1884      	adds	r4, r0, r2
 800634a:	4411      	add	r1, r2
 800634c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006350:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006354:	4295      	cmp	r5, r2
 8006356:	d003      	beq.n	8006360 <__mcmp+0x28>
 8006358:	d305      	bcc.n	8006366 <__mcmp+0x2e>
 800635a:	2301      	movs	r3, #1
 800635c:	4618      	mov	r0, r3
 800635e:	bd30      	pop	{r4, r5, pc}
 8006360:	42a0      	cmp	r0, r4
 8006362:	d3f3      	bcc.n	800634c <__mcmp+0x14>
 8006364:	e7fa      	b.n	800635c <__mcmp+0x24>
 8006366:	f04f 33ff 	mov.w	r3, #4294967295
 800636a:	e7f7      	b.n	800635c <__mcmp+0x24>

0800636c <__mdiff>:
 800636c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006370:	460d      	mov	r5, r1
 8006372:	4607      	mov	r7, r0
 8006374:	4611      	mov	r1, r2
 8006376:	4628      	mov	r0, r5
 8006378:	4614      	mov	r4, r2
 800637a:	f7ff ffdd 	bl	8006338 <__mcmp>
 800637e:	1e06      	subs	r6, r0, #0
 8006380:	d108      	bne.n	8006394 <__mdiff+0x28>
 8006382:	4631      	mov	r1, r6
 8006384:	4638      	mov	r0, r7
 8006386:	f7ff fdc2 	bl	8005f0e <_Balloc>
 800638a:	2301      	movs	r3, #1
 800638c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006394:	bfa4      	itt	ge
 8006396:	4623      	movge	r3, r4
 8006398:	462c      	movge	r4, r5
 800639a:	4638      	mov	r0, r7
 800639c:	6861      	ldr	r1, [r4, #4]
 800639e:	bfa6      	itte	ge
 80063a0:	461d      	movge	r5, r3
 80063a2:	2600      	movge	r6, #0
 80063a4:	2601      	movlt	r6, #1
 80063a6:	f7ff fdb2 	bl	8005f0e <_Balloc>
 80063aa:	692b      	ldr	r3, [r5, #16]
 80063ac:	60c6      	str	r6, [r0, #12]
 80063ae:	6926      	ldr	r6, [r4, #16]
 80063b0:	f105 0914 	add.w	r9, r5, #20
 80063b4:	f104 0214 	add.w	r2, r4, #20
 80063b8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80063bc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80063c0:	f100 0514 	add.w	r5, r0, #20
 80063c4:	f04f 0e00 	mov.w	lr, #0
 80063c8:	f852 ab04 	ldr.w	sl, [r2], #4
 80063cc:	f859 4b04 	ldr.w	r4, [r9], #4
 80063d0:	fa1e f18a 	uxtah	r1, lr, sl
 80063d4:	b2a3      	uxth	r3, r4
 80063d6:	1ac9      	subs	r1, r1, r3
 80063d8:	0c23      	lsrs	r3, r4, #16
 80063da:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80063de:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80063e2:	b289      	uxth	r1, r1
 80063e4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80063e8:	45c8      	cmp	r8, r9
 80063ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80063ee:	4694      	mov	ip, r2
 80063f0:	f845 3b04 	str.w	r3, [r5], #4
 80063f4:	d8e8      	bhi.n	80063c8 <__mdiff+0x5c>
 80063f6:	45bc      	cmp	ip, r7
 80063f8:	d304      	bcc.n	8006404 <__mdiff+0x98>
 80063fa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80063fe:	b183      	cbz	r3, 8006422 <__mdiff+0xb6>
 8006400:	6106      	str	r6, [r0, #16]
 8006402:	e7c5      	b.n	8006390 <__mdiff+0x24>
 8006404:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006408:	fa1e f381 	uxtah	r3, lr, r1
 800640c:	141a      	asrs	r2, r3, #16
 800640e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006412:	b29b      	uxth	r3, r3
 8006414:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006418:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800641c:	f845 3b04 	str.w	r3, [r5], #4
 8006420:	e7e9      	b.n	80063f6 <__mdiff+0x8a>
 8006422:	3e01      	subs	r6, #1
 8006424:	e7e9      	b.n	80063fa <__mdiff+0x8e>

08006426 <__d2b>:
 8006426:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800642a:	460e      	mov	r6, r1
 800642c:	2101      	movs	r1, #1
 800642e:	ec59 8b10 	vmov	r8, r9, d0
 8006432:	4615      	mov	r5, r2
 8006434:	f7ff fd6b 	bl	8005f0e <_Balloc>
 8006438:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800643c:	4607      	mov	r7, r0
 800643e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006442:	bb34      	cbnz	r4, 8006492 <__d2b+0x6c>
 8006444:	9301      	str	r3, [sp, #4]
 8006446:	f1b8 0300 	subs.w	r3, r8, #0
 800644a:	d027      	beq.n	800649c <__d2b+0x76>
 800644c:	a802      	add	r0, sp, #8
 800644e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006452:	f7ff fe01 	bl	8006058 <__lo0bits>
 8006456:	9900      	ldr	r1, [sp, #0]
 8006458:	b1f0      	cbz	r0, 8006498 <__d2b+0x72>
 800645a:	9a01      	ldr	r2, [sp, #4]
 800645c:	f1c0 0320 	rsb	r3, r0, #32
 8006460:	fa02 f303 	lsl.w	r3, r2, r3
 8006464:	430b      	orrs	r3, r1
 8006466:	40c2      	lsrs	r2, r0
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	9201      	str	r2, [sp, #4]
 800646c:	9b01      	ldr	r3, [sp, #4]
 800646e:	61bb      	str	r3, [r7, #24]
 8006470:	2b00      	cmp	r3, #0
 8006472:	bf14      	ite	ne
 8006474:	2102      	movne	r1, #2
 8006476:	2101      	moveq	r1, #1
 8006478:	6139      	str	r1, [r7, #16]
 800647a:	b1c4      	cbz	r4, 80064ae <__d2b+0x88>
 800647c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006480:	4404      	add	r4, r0
 8006482:	6034      	str	r4, [r6, #0]
 8006484:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006488:	6028      	str	r0, [r5, #0]
 800648a:	4638      	mov	r0, r7
 800648c:	b003      	add	sp, #12
 800648e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006496:	e7d5      	b.n	8006444 <__d2b+0x1e>
 8006498:	6179      	str	r1, [r7, #20]
 800649a:	e7e7      	b.n	800646c <__d2b+0x46>
 800649c:	a801      	add	r0, sp, #4
 800649e:	f7ff fddb 	bl	8006058 <__lo0bits>
 80064a2:	9b01      	ldr	r3, [sp, #4]
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	2101      	movs	r1, #1
 80064a8:	6139      	str	r1, [r7, #16]
 80064aa:	3020      	adds	r0, #32
 80064ac:	e7e5      	b.n	800647a <__d2b+0x54>
 80064ae:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80064b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80064b6:	6030      	str	r0, [r6, #0]
 80064b8:	6918      	ldr	r0, [r3, #16]
 80064ba:	f7ff fdae 	bl	800601a <__hi0bits>
 80064be:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80064c2:	e7e1      	b.n	8006488 <__d2b+0x62>

080064c4 <_calloc_r>:
 80064c4:	b538      	push	{r3, r4, r5, lr}
 80064c6:	fb02 f401 	mul.w	r4, r2, r1
 80064ca:	4621      	mov	r1, r4
 80064cc:	f7fe f99e 	bl	800480c <_malloc_r>
 80064d0:	4605      	mov	r5, r0
 80064d2:	b118      	cbz	r0, 80064dc <_calloc_r+0x18>
 80064d4:	4622      	mov	r2, r4
 80064d6:	2100      	movs	r1, #0
 80064d8:	f7fe f942 	bl	8004760 <memset>
 80064dc:	4628      	mov	r0, r5
 80064de:	bd38      	pop	{r3, r4, r5, pc}

080064e0 <_realloc_r>:
 80064e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e2:	4607      	mov	r7, r0
 80064e4:	4614      	mov	r4, r2
 80064e6:	460e      	mov	r6, r1
 80064e8:	b921      	cbnz	r1, 80064f4 <_realloc_r+0x14>
 80064ea:	4611      	mov	r1, r2
 80064ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80064f0:	f7fe b98c 	b.w	800480c <_malloc_r>
 80064f4:	b922      	cbnz	r2, 8006500 <_realloc_r+0x20>
 80064f6:	f7fe f93b 	bl	8004770 <_free_r>
 80064fa:	4625      	mov	r5, r4
 80064fc:	4628      	mov	r0, r5
 80064fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006500:	f000 f991 	bl	8006826 <_malloc_usable_size_r>
 8006504:	42a0      	cmp	r0, r4
 8006506:	d20f      	bcs.n	8006528 <_realloc_r+0x48>
 8006508:	4621      	mov	r1, r4
 800650a:	4638      	mov	r0, r7
 800650c:	f7fe f97e 	bl	800480c <_malloc_r>
 8006510:	4605      	mov	r5, r0
 8006512:	2800      	cmp	r0, #0
 8006514:	d0f2      	beq.n	80064fc <_realloc_r+0x1c>
 8006516:	4631      	mov	r1, r6
 8006518:	4622      	mov	r2, r4
 800651a:	f7ff fceb 	bl	8005ef4 <memcpy>
 800651e:	4631      	mov	r1, r6
 8006520:	4638      	mov	r0, r7
 8006522:	f7fe f925 	bl	8004770 <_free_r>
 8006526:	e7e9      	b.n	80064fc <_realloc_r+0x1c>
 8006528:	4635      	mov	r5, r6
 800652a:	e7e7      	b.n	80064fc <_realloc_r+0x1c>

0800652c <__ssputs_r>:
 800652c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006530:	688e      	ldr	r6, [r1, #8]
 8006532:	429e      	cmp	r6, r3
 8006534:	4682      	mov	sl, r0
 8006536:	460c      	mov	r4, r1
 8006538:	4690      	mov	r8, r2
 800653a:	4699      	mov	r9, r3
 800653c:	d837      	bhi.n	80065ae <__ssputs_r+0x82>
 800653e:	898a      	ldrh	r2, [r1, #12]
 8006540:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006544:	d031      	beq.n	80065aa <__ssputs_r+0x7e>
 8006546:	6825      	ldr	r5, [r4, #0]
 8006548:	6909      	ldr	r1, [r1, #16]
 800654a:	1a6f      	subs	r7, r5, r1
 800654c:	6965      	ldr	r5, [r4, #20]
 800654e:	2302      	movs	r3, #2
 8006550:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006554:	fb95 f5f3 	sdiv	r5, r5, r3
 8006558:	f109 0301 	add.w	r3, r9, #1
 800655c:	443b      	add	r3, r7
 800655e:	429d      	cmp	r5, r3
 8006560:	bf38      	it	cc
 8006562:	461d      	movcc	r5, r3
 8006564:	0553      	lsls	r3, r2, #21
 8006566:	d530      	bpl.n	80065ca <__ssputs_r+0x9e>
 8006568:	4629      	mov	r1, r5
 800656a:	f7fe f94f 	bl	800480c <_malloc_r>
 800656e:	4606      	mov	r6, r0
 8006570:	b950      	cbnz	r0, 8006588 <__ssputs_r+0x5c>
 8006572:	230c      	movs	r3, #12
 8006574:	f8ca 3000 	str.w	r3, [sl]
 8006578:	89a3      	ldrh	r3, [r4, #12]
 800657a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800657e:	81a3      	strh	r3, [r4, #12]
 8006580:	f04f 30ff 	mov.w	r0, #4294967295
 8006584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006588:	463a      	mov	r2, r7
 800658a:	6921      	ldr	r1, [r4, #16]
 800658c:	f7ff fcb2 	bl	8005ef4 <memcpy>
 8006590:	89a3      	ldrh	r3, [r4, #12]
 8006592:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659a:	81a3      	strh	r3, [r4, #12]
 800659c:	6126      	str	r6, [r4, #16]
 800659e:	6165      	str	r5, [r4, #20]
 80065a0:	443e      	add	r6, r7
 80065a2:	1bed      	subs	r5, r5, r7
 80065a4:	6026      	str	r6, [r4, #0]
 80065a6:	60a5      	str	r5, [r4, #8]
 80065a8:	464e      	mov	r6, r9
 80065aa:	454e      	cmp	r6, r9
 80065ac:	d900      	bls.n	80065b0 <__ssputs_r+0x84>
 80065ae:	464e      	mov	r6, r9
 80065b0:	4632      	mov	r2, r6
 80065b2:	4641      	mov	r1, r8
 80065b4:	6820      	ldr	r0, [r4, #0]
 80065b6:	f000 f91d 	bl	80067f4 <memmove>
 80065ba:	68a3      	ldr	r3, [r4, #8]
 80065bc:	1b9b      	subs	r3, r3, r6
 80065be:	60a3      	str	r3, [r4, #8]
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	441e      	add	r6, r3
 80065c4:	6026      	str	r6, [r4, #0]
 80065c6:	2000      	movs	r0, #0
 80065c8:	e7dc      	b.n	8006584 <__ssputs_r+0x58>
 80065ca:	462a      	mov	r2, r5
 80065cc:	f7ff ff88 	bl	80064e0 <_realloc_r>
 80065d0:	4606      	mov	r6, r0
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d1e2      	bne.n	800659c <__ssputs_r+0x70>
 80065d6:	6921      	ldr	r1, [r4, #16]
 80065d8:	4650      	mov	r0, sl
 80065da:	f7fe f8c9 	bl	8004770 <_free_r>
 80065de:	e7c8      	b.n	8006572 <__ssputs_r+0x46>

080065e0 <_svfiprintf_r>:
 80065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	461d      	mov	r5, r3
 80065e6:	898b      	ldrh	r3, [r1, #12]
 80065e8:	061f      	lsls	r7, r3, #24
 80065ea:	b09d      	sub	sp, #116	; 0x74
 80065ec:	4680      	mov	r8, r0
 80065ee:	460c      	mov	r4, r1
 80065f0:	4616      	mov	r6, r2
 80065f2:	d50f      	bpl.n	8006614 <_svfiprintf_r+0x34>
 80065f4:	690b      	ldr	r3, [r1, #16]
 80065f6:	b96b      	cbnz	r3, 8006614 <_svfiprintf_r+0x34>
 80065f8:	2140      	movs	r1, #64	; 0x40
 80065fa:	f7fe f907 	bl	800480c <_malloc_r>
 80065fe:	6020      	str	r0, [r4, #0]
 8006600:	6120      	str	r0, [r4, #16]
 8006602:	b928      	cbnz	r0, 8006610 <_svfiprintf_r+0x30>
 8006604:	230c      	movs	r3, #12
 8006606:	f8c8 3000 	str.w	r3, [r8]
 800660a:	f04f 30ff 	mov.w	r0, #4294967295
 800660e:	e0c8      	b.n	80067a2 <_svfiprintf_r+0x1c2>
 8006610:	2340      	movs	r3, #64	; 0x40
 8006612:	6163      	str	r3, [r4, #20]
 8006614:	2300      	movs	r3, #0
 8006616:	9309      	str	r3, [sp, #36]	; 0x24
 8006618:	2320      	movs	r3, #32
 800661a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800661e:	2330      	movs	r3, #48	; 0x30
 8006620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006624:	9503      	str	r5, [sp, #12]
 8006626:	f04f 0b01 	mov.w	fp, #1
 800662a:	4637      	mov	r7, r6
 800662c:	463d      	mov	r5, r7
 800662e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006632:	b10b      	cbz	r3, 8006638 <_svfiprintf_r+0x58>
 8006634:	2b25      	cmp	r3, #37	; 0x25
 8006636:	d13e      	bne.n	80066b6 <_svfiprintf_r+0xd6>
 8006638:	ebb7 0a06 	subs.w	sl, r7, r6
 800663c:	d00b      	beq.n	8006656 <_svfiprintf_r+0x76>
 800663e:	4653      	mov	r3, sl
 8006640:	4632      	mov	r2, r6
 8006642:	4621      	mov	r1, r4
 8006644:	4640      	mov	r0, r8
 8006646:	f7ff ff71 	bl	800652c <__ssputs_r>
 800664a:	3001      	adds	r0, #1
 800664c:	f000 80a4 	beq.w	8006798 <_svfiprintf_r+0x1b8>
 8006650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006652:	4453      	add	r3, sl
 8006654:	9309      	str	r3, [sp, #36]	; 0x24
 8006656:	783b      	ldrb	r3, [r7, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 809d 	beq.w	8006798 <_svfiprintf_r+0x1b8>
 800665e:	2300      	movs	r3, #0
 8006660:	f04f 32ff 	mov.w	r2, #4294967295
 8006664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006668:	9304      	str	r3, [sp, #16]
 800666a:	9307      	str	r3, [sp, #28]
 800666c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006670:	931a      	str	r3, [sp, #104]	; 0x68
 8006672:	462f      	mov	r7, r5
 8006674:	2205      	movs	r2, #5
 8006676:	f817 1b01 	ldrb.w	r1, [r7], #1
 800667a:	4850      	ldr	r0, [pc, #320]	; (80067bc <_svfiprintf_r+0x1dc>)
 800667c:	f7f9 fdb0 	bl	80001e0 <memchr>
 8006680:	9b04      	ldr	r3, [sp, #16]
 8006682:	b9d0      	cbnz	r0, 80066ba <_svfiprintf_r+0xda>
 8006684:	06d9      	lsls	r1, r3, #27
 8006686:	bf44      	itt	mi
 8006688:	2220      	movmi	r2, #32
 800668a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800668e:	071a      	lsls	r2, r3, #28
 8006690:	bf44      	itt	mi
 8006692:	222b      	movmi	r2, #43	; 0x2b
 8006694:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006698:	782a      	ldrb	r2, [r5, #0]
 800669a:	2a2a      	cmp	r2, #42	; 0x2a
 800669c:	d015      	beq.n	80066ca <_svfiprintf_r+0xea>
 800669e:	9a07      	ldr	r2, [sp, #28]
 80066a0:	462f      	mov	r7, r5
 80066a2:	2000      	movs	r0, #0
 80066a4:	250a      	movs	r5, #10
 80066a6:	4639      	mov	r1, r7
 80066a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066ac:	3b30      	subs	r3, #48	; 0x30
 80066ae:	2b09      	cmp	r3, #9
 80066b0:	d94d      	bls.n	800674e <_svfiprintf_r+0x16e>
 80066b2:	b1b8      	cbz	r0, 80066e4 <_svfiprintf_r+0x104>
 80066b4:	e00f      	b.n	80066d6 <_svfiprintf_r+0xf6>
 80066b6:	462f      	mov	r7, r5
 80066b8:	e7b8      	b.n	800662c <_svfiprintf_r+0x4c>
 80066ba:	4a40      	ldr	r2, [pc, #256]	; (80067bc <_svfiprintf_r+0x1dc>)
 80066bc:	1a80      	subs	r0, r0, r2
 80066be:	fa0b f000 	lsl.w	r0, fp, r0
 80066c2:	4318      	orrs	r0, r3
 80066c4:	9004      	str	r0, [sp, #16]
 80066c6:	463d      	mov	r5, r7
 80066c8:	e7d3      	b.n	8006672 <_svfiprintf_r+0x92>
 80066ca:	9a03      	ldr	r2, [sp, #12]
 80066cc:	1d11      	adds	r1, r2, #4
 80066ce:	6812      	ldr	r2, [r2, #0]
 80066d0:	9103      	str	r1, [sp, #12]
 80066d2:	2a00      	cmp	r2, #0
 80066d4:	db01      	blt.n	80066da <_svfiprintf_r+0xfa>
 80066d6:	9207      	str	r2, [sp, #28]
 80066d8:	e004      	b.n	80066e4 <_svfiprintf_r+0x104>
 80066da:	4252      	negs	r2, r2
 80066dc:	f043 0302 	orr.w	r3, r3, #2
 80066e0:	9207      	str	r2, [sp, #28]
 80066e2:	9304      	str	r3, [sp, #16]
 80066e4:	783b      	ldrb	r3, [r7, #0]
 80066e6:	2b2e      	cmp	r3, #46	; 0x2e
 80066e8:	d10c      	bne.n	8006704 <_svfiprintf_r+0x124>
 80066ea:	787b      	ldrb	r3, [r7, #1]
 80066ec:	2b2a      	cmp	r3, #42	; 0x2a
 80066ee:	d133      	bne.n	8006758 <_svfiprintf_r+0x178>
 80066f0:	9b03      	ldr	r3, [sp, #12]
 80066f2:	1d1a      	adds	r2, r3, #4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	9203      	str	r2, [sp, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	bfb8      	it	lt
 80066fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006700:	3702      	adds	r7, #2
 8006702:	9305      	str	r3, [sp, #20]
 8006704:	4d2e      	ldr	r5, [pc, #184]	; (80067c0 <_svfiprintf_r+0x1e0>)
 8006706:	7839      	ldrb	r1, [r7, #0]
 8006708:	2203      	movs	r2, #3
 800670a:	4628      	mov	r0, r5
 800670c:	f7f9 fd68 	bl	80001e0 <memchr>
 8006710:	b138      	cbz	r0, 8006722 <_svfiprintf_r+0x142>
 8006712:	2340      	movs	r3, #64	; 0x40
 8006714:	1b40      	subs	r0, r0, r5
 8006716:	fa03 f000 	lsl.w	r0, r3, r0
 800671a:	9b04      	ldr	r3, [sp, #16]
 800671c:	4303      	orrs	r3, r0
 800671e:	3701      	adds	r7, #1
 8006720:	9304      	str	r3, [sp, #16]
 8006722:	7839      	ldrb	r1, [r7, #0]
 8006724:	4827      	ldr	r0, [pc, #156]	; (80067c4 <_svfiprintf_r+0x1e4>)
 8006726:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800672a:	2206      	movs	r2, #6
 800672c:	1c7e      	adds	r6, r7, #1
 800672e:	f7f9 fd57 	bl	80001e0 <memchr>
 8006732:	2800      	cmp	r0, #0
 8006734:	d038      	beq.n	80067a8 <_svfiprintf_r+0x1c8>
 8006736:	4b24      	ldr	r3, [pc, #144]	; (80067c8 <_svfiprintf_r+0x1e8>)
 8006738:	bb13      	cbnz	r3, 8006780 <_svfiprintf_r+0x1a0>
 800673a:	9b03      	ldr	r3, [sp, #12]
 800673c:	3307      	adds	r3, #7
 800673e:	f023 0307 	bic.w	r3, r3, #7
 8006742:	3308      	adds	r3, #8
 8006744:	9303      	str	r3, [sp, #12]
 8006746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006748:	444b      	add	r3, r9
 800674a:	9309      	str	r3, [sp, #36]	; 0x24
 800674c:	e76d      	b.n	800662a <_svfiprintf_r+0x4a>
 800674e:	fb05 3202 	mla	r2, r5, r2, r3
 8006752:	2001      	movs	r0, #1
 8006754:	460f      	mov	r7, r1
 8006756:	e7a6      	b.n	80066a6 <_svfiprintf_r+0xc6>
 8006758:	2300      	movs	r3, #0
 800675a:	3701      	adds	r7, #1
 800675c:	9305      	str	r3, [sp, #20]
 800675e:	4619      	mov	r1, r3
 8006760:	250a      	movs	r5, #10
 8006762:	4638      	mov	r0, r7
 8006764:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006768:	3a30      	subs	r2, #48	; 0x30
 800676a:	2a09      	cmp	r2, #9
 800676c:	d903      	bls.n	8006776 <_svfiprintf_r+0x196>
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0c8      	beq.n	8006704 <_svfiprintf_r+0x124>
 8006772:	9105      	str	r1, [sp, #20]
 8006774:	e7c6      	b.n	8006704 <_svfiprintf_r+0x124>
 8006776:	fb05 2101 	mla	r1, r5, r1, r2
 800677a:	2301      	movs	r3, #1
 800677c:	4607      	mov	r7, r0
 800677e:	e7f0      	b.n	8006762 <_svfiprintf_r+0x182>
 8006780:	ab03      	add	r3, sp, #12
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	4622      	mov	r2, r4
 8006786:	4b11      	ldr	r3, [pc, #68]	; (80067cc <_svfiprintf_r+0x1ec>)
 8006788:	a904      	add	r1, sp, #16
 800678a:	4640      	mov	r0, r8
 800678c:	f7fe f92c 	bl	80049e8 <_printf_float>
 8006790:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006794:	4681      	mov	r9, r0
 8006796:	d1d6      	bne.n	8006746 <_svfiprintf_r+0x166>
 8006798:	89a3      	ldrh	r3, [r4, #12]
 800679a:	065b      	lsls	r3, r3, #25
 800679c:	f53f af35 	bmi.w	800660a <_svfiprintf_r+0x2a>
 80067a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067a2:	b01d      	add	sp, #116	; 0x74
 80067a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a8:	ab03      	add	r3, sp, #12
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	4622      	mov	r2, r4
 80067ae:	4b07      	ldr	r3, [pc, #28]	; (80067cc <_svfiprintf_r+0x1ec>)
 80067b0:	a904      	add	r1, sp, #16
 80067b2:	4640      	mov	r0, r8
 80067b4:	f7fe fbce 	bl	8004f54 <_printf_i>
 80067b8:	e7ea      	b.n	8006790 <_svfiprintf_r+0x1b0>
 80067ba:	bf00      	nop
 80067bc:	08007f9c 	.word	0x08007f9c
 80067c0:	08007fa2 	.word	0x08007fa2
 80067c4:	08007fa6 	.word	0x08007fa6
 80067c8:	080049e9 	.word	0x080049e9
 80067cc:	0800652d 	.word	0x0800652d

080067d0 <__ascii_mbtowc>:
 80067d0:	b082      	sub	sp, #8
 80067d2:	b901      	cbnz	r1, 80067d6 <__ascii_mbtowc+0x6>
 80067d4:	a901      	add	r1, sp, #4
 80067d6:	b142      	cbz	r2, 80067ea <__ascii_mbtowc+0x1a>
 80067d8:	b14b      	cbz	r3, 80067ee <__ascii_mbtowc+0x1e>
 80067da:	7813      	ldrb	r3, [r2, #0]
 80067dc:	600b      	str	r3, [r1, #0]
 80067de:	7812      	ldrb	r2, [r2, #0]
 80067e0:	1c10      	adds	r0, r2, #0
 80067e2:	bf18      	it	ne
 80067e4:	2001      	movne	r0, #1
 80067e6:	b002      	add	sp, #8
 80067e8:	4770      	bx	lr
 80067ea:	4610      	mov	r0, r2
 80067ec:	e7fb      	b.n	80067e6 <__ascii_mbtowc+0x16>
 80067ee:	f06f 0001 	mvn.w	r0, #1
 80067f2:	e7f8      	b.n	80067e6 <__ascii_mbtowc+0x16>

080067f4 <memmove>:
 80067f4:	4288      	cmp	r0, r1
 80067f6:	b510      	push	{r4, lr}
 80067f8:	eb01 0302 	add.w	r3, r1, r2
 80067fc:	d807      	bhi.n	800680e <memmove+0x1a>
 80067fe:	1e42      	subs	r2, r0, #1
 8006800:	4299      	cmp	r1, r3
 8006802:	d00a      	beq.n	800681a <memmove+0x26>
 8006804:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006808:	f802 4f01 	strb.w	r4, [r2, #1]!
 800680c:	e7f8      	b.n	8006800 <memmove+0xc>
 800680e:	4283      	cmp	r3, r0
 8006810:	d9f5      	bls.n	80067fe <memmove+0xa>
 8006812:	1881      	adds	r1, r0, r2
 8006814:	1ad2      	subs	r2, r2, r3
 8006816:	42d3      	cmn	r3, r2
 8006818:	d100      	bne.n	800681c <memmove+0x28>
 800681a:	bd10      	pop	{r4, pc}
 800681c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006820:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006824:	e7f7      	b.n	8006816 <memmove+0x22>

08006826 <_malloc_usable_size_r>:
 8006826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800682a:	1f18      	subs	r0, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	bfbc      	itt	lt
 8006830:	580b      	ldrlt	r3, [r1, r0]
 8006832:	18c0      	addlt	r0, r0, r3
 8006834:	4770      	bx	lr

08006836 <__ascii_wctomb>:
 8006836:	b149      	cbz	r1, 800684c <__ascii_wctomb+0x16>
 8006838:	2aff      	cmp	r2, #255	; 0xff
 800683a:	bf85      	ittet	hi
 800683c:	238a      	movhi	r3, #138	; 0x8a
 800683e:	6003      	strhi	r3, [r0, #0]
 8006840:	700a      	strbls	r2, [r1, #0]
 8006842:	f04f 30ff 	movhi.w	r0, #4294967295
 8006846:	bf98      	it	ls
 8006848:	2001      	movls	r0, #1
 800684a:	4770      	bx	lr
 800684c:	4608      	mov	r0, r1
 800684e:	4770      	bx	lr

08006850 <atan2>:
 8006850:	f000 b972 	b.w	8006b38 <__ieee754_atan2>

08006854 <pow>:
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	ed2d 8b04 	vpush	{d8-d9}
 800685c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8006b30 <pow+0x2dc>
 8006860:	b08d      	sub	sp, #52	; 0x34
 8006862:	ec57 6b10 	vmov	r6, r7, d0
 8006866:	ec55 4b11 	vmov	r4, r5, d1
 800686a:	f000 fa45 	bl	8006cf8 <__ieee754_pow>
 800686e:	f999 3000 	ldrsb.w	r3, [r9]
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	3301      	adds	r3, #1
 8006876:	eeb0 8a40 	vmov.f32	s16, s0
 800687a:	eef0 8a60 	vmov.f32	s17, s1
 800687e:	46c8      	mov	r8, r9
 8006880:	d05f      	beq.n	8006942 <pow+0xee>
 8006882:	4622      	mov	r2, r4
 8006884:	462b      	mov	r3, r5
 8006886:	4620      	mov	r0, r4
 8006888:	4629      	mov	r1, r5
 800688a:	f7fa f94f 	bl	8000b2c <__aeabi_dcmpun>
 800688e:	4683      	mov	fp, r0
 8006890:	2800      	cmp	r0, #0
 8006892:	d156      	bne.n	8006942 <pow+0xee>
 8006894:	4632      	mov	r2, r6
 8006896:	463b      	mov	r3, r7
 8006898:	4630      	mov	r0, r6
 800689a:	4639      	mov	r1, r7
 800689c:	f7fa f946 	bl	8000b2c <__aeabi_dcmpun>
 80068a0:	9001      	str	r0, [sp, #4]
 80068a2:	b1e8      	cbz	r0, 80068e0 <pow+0x8c>
 80068a4:	2200      	movs	r2, #0
 80068a6:	2300      	movs	r3, #0
 80068a8:	4620      	mov	r0, r4
 80068aa:	4629      	mov	r1, r5
 80068ac:	f7fa f90c 	bl	8000ac8 <__aeabi_dcmpeq>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d046      	beq.n	8006942 <pow+0xee>
 80068b4:	2301      	movs	r3, #1
 80068b6:	9302      	str	r3, [sp, #8]
 80068b8:	4b96      	ldr	r3, [pc, #600]	; (8006b14 <pow+0x2c0>)
 80068ba:	9303      	str	r3, [sp, #12]
 80068bc:	4b96      	ldr	r3, [pc, #600]	; (8006b18 <pow+0x2c4>)
 80068be:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80068c2:	2200      	movs	r2, #0
 80068c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80068c8:	9b00      	ldr	r3, [sp, #0]
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80068d0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80068d4:	d033      	beq.n	800693e <pow+0xea>
 80068d6:	a802      	add	r0, sp, #8
 80068d8:	f001 f97f 	bl	8007bda <matherr>
 80068dc:	bb48      	cbnz	r0, 8006932 <pow+0xde>
 80068de:	e05d      	b.n	800699c <pow+0x148>
 80068e0:	f04f 0a00 	mov.w	sl, #0
 80068e4:	f04f 0b00 	mov.w	fp, #0
 80068e8:	4652      	mov	r2, sl
 80068ea:	465b      	mov	r3, fp
 80068ec:	4630      	mov	r0, r6
 80068ee:	4639      	mov	r1, r7
 80068f0:	f7fa f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 80068f4:	ec4b ab19 	vmov	d9, sl, fp
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d054      	beq.n	80069a6 <pow+0x152>
 80068fc:	4652      	mov	r2, sl
 80068fe:	465b      	mov	r3, fp
 8006900:	4620      	mov	r0, r4
 8006902:	4629      	mov	r1, r5
 8006904:	f7fa f8e0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006908:	4680      	mov	r8, r0
 800690a:	b318      	cbz	r0, 8006954 <pow+0x100>
 800690c:	2301      	movs	r3, #1
 800690e:	9302      	str	r3, [sp, #8]
 8006910:	4b80      	ldr	r3, [pc, #512]	; (8006b14 <pow+0x2c0>)
 8006912:	9303      	str	r3, [sp, #12]
 8006914:	9b01      	ldr	r3, [sp, #4]
 8006916:	930a      	str	r3, [sp, #40]	; 0x28
 8006918:	9b00      	ldr	r3, [sp, #0]
 800691a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800691e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006922:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0d5      	beq.n	80068d6 <pow+0x82>
 800692a:	4b7b      	ldr	r3, [pc, #492]	; (8006b18 <pow+0x2c4>)
 800692c:	2200      	movs	r2, #0
 800692e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006934:	b11b      	cbz	r3, 800693e <pow+0xea>
 8006936:	f7fd fee1 	bl	80046fc <__errno>
 800693a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800693c:	6003      	str	r3, [r0, #0]
 800693e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8006942:	eeb0 0a48 	vmov.f32	s0, s16
 8006946:	eef0 0a68 	vmov.f32	s1, s17
 800694a:	b00d      	add	sp, #52	; 0x34
 800694c:	ecbd 8b04 	vpop	{d8-d9}
 8006950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006954:	ec45 4b10 	vmov	d0, r4, r5
 8006958:	f001 f937 	bl	8007bca <finite>
 800695c:	2800      	cmp	r0, #0
 800695e:	d0f0      	beq.n	8006942 <pow+0xee>
 8006960:	4652      	mov	r2, sl
 8006962:	465b      	mov	r3, fp
 8006964:	4620      	mov	r0, r4
 8006966:	4629      	mov	r1, r5
 8006968:	f7fa f8b8 	bl	8000adc <__aeabi_dcmplt>
 800696c:	2800      	cmp	r0, #0
 800696e:	d0e8      	beq.n	8006942 <pow+0xee>
 8006970:	2301      	movs	r3, #1
 8006972:	9302      	str	r3, [sp, #8]
 8006974:	4b67      	ldr	r3, [pc, #412]	; (8006b14 <pow+0x2c0>)
 8006976:	9303      	str	r3, [sp, #12]
 8006978:	f999 3000 	ldrsb.w	r3, [r9]
 800697c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006980:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006984:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006988:	b913      	cbnz	r3, 8006990 <pow+0x13c>
 800698a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800698e:	e7a2      	b.n	80068d6 <pow+0x82>
 8006990:	4962      	ldr	r1, [pc, #392]	; (8006b1c <pow+0x2c8>)
 8006992:	2000      	movs	r0, #0
 8006994:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006998:	2b02      	cmp	r3, #2
 800699a:	d19c      	bne.n	80068d6 <pow+0x82>
 800699c:	f7fd feae 	bl	80046fc <__errno>
 80069a0:	2321      	movs	r3, #33	; 0x21
 80069a2:	6003      	str	r3, [r0, #0]
 80069a4:	e7c5      	b.n	8006932 <pow+0xde>
 80069a6:	eeb0 0a48 	vmov.f32	s0, s16
 80069aa:	eef0 0a68 	vmov.f32	s1, s17
 80069ae:	f001 f90c 	bl	8007bca <finite>
 80069b2:	9000      	str	r0, [sp, #0]
 80069b4:	2800      	cmp	r0, #0
 80069b6:	f040 8081 	bne.w	8006abc <pow+0x268>
 80069ba:	ec47 6b10 	vmov	d0, r6, r7
 80069be:	f001 f904 	bl	8007bca <finite>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d07a      	beq.n	8006abc <pow+0x268>
 80069c6:	ec45 4b10 	vmov	d0, r4, r5
 80069ca:	f001 f8fe 	bl	8007bca <finite>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d074      	beq.n	8006abc <pow+0x268>
 80069d2:	ec53 2b18 	vmov	r2, r3, d8
 80069d6:	ee18 0a10 	vmov	r0, s16
 80069da:	4619      	mov	r1, r3
 80069dc:	f7fa f8a6 	bl	8000b2c <__aeabi_dcmpun>
 80069e0:	f999 9000 	ldrsb.w	r9, [r9]
 80069e4:	4b4b      	ldr	r3, [pc, #300]	; (8006b14 <pow+0x2c0>)
 80069e6:	b1b0      	cbz	r0, 8006a16 <pow+0x1c2>
 80069e8:	2201      	movs	r2, #1
 80069ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069ee:	9b00      	ldr	r3, [sp, #0]
 80069f0:	930a      	str	r3, [sp, #40]	; 0x28
 80069f2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80069f6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80069fa:	f1b9 0f00 	cmp.w	r9, #0
 80069fe:	d0c4      	beq.n	800698a <pow+0x136>
 8006a00:	4652      	mov	r2, sl
 8006a02:	465b      	mov	r3, fp
 8006a04:	4650      	mov	r0, sl
 8006a06:	4659      	mov	r1, fp
 8006a08:	f7f9 ff20 	bl	800084c <__aeabi_ddiv>
 8006a0c:	f1b9 0f02 	cmp.w	r9, #2
 8006a10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a14:	e7c1      	b.n	800699a <pow+0x146>
 8006a16:	2203      	movs	r2, #3
 8006a18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a1c:	900a      	str	r0, [sp, #40]	; 0x28
 8006a1e:	4629      	mov	r1, r5
 8006a20:	4620      	mov	r0, r4
 8006a22:	2200      	movs	r2, #0
 8006a24:	4b3e      	ldr	r3, [pc, #248]	; (8006b20 <pow+0x2cc>)
 8006a26:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006a2a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006a2e:	f7f9 fde3 	bl	80005f8 <__aeabi_dmul>
 8006a32:	4604      	mov	r4, r0
 8006a34:	460d      	mov	r5, r1
 8006a36:	f1b9 0f00 	cmp.w	r9, #0
 8006a3a:	d124      	bne.n	8006a86 <pow+0x232>
 8006a3c:	4b39      	ldr	r3, [pc, #228]	; (8006b24 <pow+0x2d0>)
 8006a3e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006a42:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006a46:	4630      	mov	r0, r6
 8006a48:	4652      	mov	r2, sl
 8006a4a:	465b      	mov	r3, fp
 8006a4c:	4639      	mov	r1, r7
 8006a4e:	f7fa f845 	bl	8000adc <__aeabi_dcmplt>
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d056      	beq.n	8006b04 <pow+0x2b0>
 8006a56:	ec45 4b10 	vmov	d0, r4, r5
 8006a5a:	f001 f8c9 	bl	8007bf0 <rint>
 8006a5e:	4622      	mov	r2, r4
 8006a60:	462b      	mov	r3, r5
 8006a62:	ec51 0b10 	vmov	r0, r1, d0
 8006a66:	f7fa f82f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a6a:	b920      	cbnz	r0, 8006a76 <pow+0x222>
 8006a6c:	4b2e      	ldr	r3, [pc, #184]	; (8006b28 <pow+0x2d4>)
 8006a6e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006a72:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006a76:	f998 3000 	ldrsb.w	r3, [r8]
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d142      	bne.n	8006b04 <pow+0x2b0>
 8006a7e:	f7fd fe3d 	bl	80046fc <__errno>
 8006a82:	2322      	movs	r3, #34	; 0x22
 8006a84:	e78d      	b.n	80069a2 <pow+0x14e>
 8006a86:	4b29      	ldr	r3, [pc, #164]	; (8006b2c <pow+0x2d8>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006a8e:	4630      	mov	r0, r6
 8006a90:	4652      	mov	r2, sl
 8006a92:	465b      	mov	r3, fp
 8006a94:	4639      	mov	r1, r7
 8006a96:	f7fa f821 	bl	8000adc <__aeabi_dcmplt>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d0eb      	beq.n	8006a76 <pow+0x222>
 8006a9e:	ec45 4b10 	vmov	d0, r4, r5
 8006aa2:	f001 f8a5 	bl	8007bf0 <rint>
 8006aa6:	4622      	mov	r2, r4
 8006aa8:	462b      	mov	r3, r5
 8006aaa:	ec51 0b10 	vmov	r0, r1, d0
 8006aae:	f7fa f80b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d1df      	bne.n	8006a76 <pow+0x222>
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	4b18      	ldr	r3, [pc, #96]	; (8006b1c <pow+0x2c8>)
 8006aba:	e7da      	b.n	8006a72 <pow+0x21e>
 8006abc:	2200      	movs	r2, #0
 8006abe:	2300      	movs	r3, #0
 8006ac0:	ec51 0b18 	vmov	r0, r1, d8
 8006ac4:	f7fa f800 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	f43f af3a 	beq.w	8006942 <pow+0xee>
 8006ace:	ec47 6b10 	vmov	d0, r6, r7
 8006ad2:	f001 f87a 	bl	8007bca <finite>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	f43f af33 	beq.w	8006942 <pow+0xee>
 8006adc:	ec45 4b10 	vmov	d0, r4, r5
 8006ae0:	f001 f873 	bl	8007bca <finite>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	f43f af2c 	beq.w	8006942 <pow+0xee>
 8006aea:	2304      	movs	r3, #4
 8006aec:	9302      	str	r3, [sp, #8]
 8006aee:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <pow+0x2c0>)
 8006af0:	9303      	str	r3, [sp, #12]
 8006af2:	2300      	movs	r3, #0
 8006af4:	930a      	str	r3, [sp, #40]	; 0x28
 8006af6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006afa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006afe:	ed8d 9b08 	vstr	d9, [sp, #32]
 8006b02:	e7b8      	b.n	8006a76 <pow+0x222>
 8006b04:	a802      	add	r0, sp, #8
 8006b06:	f001 f868 	bl	8007bda <matherr>
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	f47f af11 	bne.w	8006932 <pow+0xde>
 8006b10:	e7b5      	b.n	8006a7e <pow+0x22a>
 8006b12:	bf00      	nop
 8006b14:	080080b8 	.word	0x080080b8
 8006b18:	3ff00000 	.word	0x3ff00000
 8006b1c:	fff00000 	.word	0xfff00000
 8006b20:	3fe00000 	.word	0x3fe00000
 8006b24:	47efffff 	.word	0x47efffff
 8006b28:	c7efffff 	.word	0xc7efffff
 8006b2c:	7ff00000 	.word	0x7ff00000
 8006b30:	200001dc 	.word	0x200001dc
 8006b34:	00000000 	.word	0x00000000

08006b38 <__ieee754_atan2>:
 8006b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b3c:	ec57 6b11 	vmov	r6, r7, d1
 8006b40:	4273      	negs	r3, r6
 8006b42:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006b46:	4333      	orrs	r3, r6
 8006b48:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8006cf0 <__ieee754_atan2+0x1b8>
 8006b4c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006b50:	4573      	cmp	r3, lr
 8006b52:	ec51 0b10 	vmov	r0, r1, d0
 8006b56:	ee11 8a10 	vmov	r8, s2
 8006b5a:	d80a      	bhi.n	8006b72 <__ieee754_atan2+0x3a>
 8006b5c:	4244      	negs	r4, r0
 8006b5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b62:	4304      	orrs	r4, r0
 8006b64:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006b68:	4574      	cmp	r4, lr
 8006b6a:	468c      	mov	ip, r1
 8006b6c:	ee10 9a10 	vmov	r9, s0
 8006b70:	d907      	bls.n	8006b82 <__ieee754_atan2+0x4a>
 8006b72:	4632      	mov	r2, r6
 8006b74:	463b      	mov	r3, r7
 8006b76:	f7f9 fb89 	bl	800028c <__adddf3>
 8006b7a:	ec41 0b10 	vmov	d0, r0, r1
 8006b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b82:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006b86:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006b8a:	4334      	orrs	r4, r6
 8006b8c:	d103      	bne.n	8006b96 <__ieee754_atan2+0x5e>
 8006b8e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b92:	f000 be71 	b.w	8007878 <atan>
 8006b96:	17bc      	asrs	r4, r7, #30
 8006b98:	f004 0402 	and.w	r4, r4, #2
 8006b9c:	ea53 0909 	orrs.w	r9, r3, r9
 8006ba0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006ba4:	d107      	bne.n	8006bb6 <__ieee754_atan2+0x7e>
 8006ba6:	2c02      	cmp	r4, #2
 8006ba8:	d073      	beq.n	8006c92 <__ieee754_atan2+0x15a>
 8006baa:	2c03      	cmp	r4, #3
 8006bac:	d1e5      	bne.n	8006b7a <__ieee754_atan2+0x42>
 8006bae:	a13e      	add	r1, pc, #248	; (adr r1, 8006ca8 <__ieee754_atan2+0x170>)
 8006bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bb4:	e7e1      	b.n	8006b7a <__ieee754_atan2+0x42>
 8006bb6:	ea52 0808 	orrs.w	r8, r2, r8
 8006bba:	d106      	bne.n	8006bca <__ieee754_atan2+0x92>
 8006bbc:	f1bc 0f00 	cmp.w	ip, #0
 8006bc0:	da6b      	bge.n	8006c9a <__ieee754_atan2+0x162>
 8006bc2:	a13b      	add	r1, pc, #236	; (adr r1, 8006cb0 <__ieee754_atan2+0x178>)
 8006bc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bc8:	e7d7      	b.n	8006b7a <__ieee754_atan2+0x42>
 8006bca:	4572      	cmp	r2, lr
 8006bcc:	d120      	bne.n	8006c10 <__ieee754_atan2+0xd8>
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d111      	bne.n	8006bf6 <__ieee754_atan2+0xbe>
 8006bd2:	2c02      	cmp	r4, #2
 8006bd4:	d007      	beq.n	8006be6 <__ieee754_atan2+0xae>
 8006bd6:	2c03      	cmp	r4, #3
 8006bd8:	d009      	beq.n	8006bee <__ieee754_atan2+0xb6>
 8006bda:	2c01      	cmp	r4, #1
 8006bdc:	d155      	bne.n	8006c8a <__ieee754_atan2+0x152>
 8006bde:	a136      	add	r1, pc, #216	; (adr r1, 8006cb8 <__ieee754_atan2+0x180>)
 8006be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006be4:	e7c9      	b.n	8006b7a <__ieee754_atan2+0x42>
 8006be6:	a136      	add	r1, pc, #216	; (adr r1, 8006cc0 <__ieee754_atan2+0x188>)
 8006be8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bec:	e7c5      	b.n	8006b7a <__ieee754_atan2+0x42>
 8006bee:	a136      	add	r1, pc, #216	; (adr r1, 8006cc8 <__ieee754_atan2+0x190>)
 8006bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bf4:	e7c1      	b.n	8006b7a <__ieee754_atan2+0x42>
 8006bf6:	2c02      	cmp	r4, #2
 8006bf8:	d04b      	beq.n	8006c92 <__ieee754_atan2+0x15a>
 8006bfa:	2c03      	cmp	r4, #3
 8006bfc:	d0d7      	beq.n	8006bae <__ieee754_atan2+0x76>
 8006bfe:	2c01      	cmp	r4, #1
 8006c00:	f04f 0000 	mov.w	r0, #0
 8006c04:	d102      	bne.n	8006c0c <__ieee754_atan2+0xd4>
 8006c06:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006c0a:	e7b6      	b.n	8006b7a <__ieee754_atan2+0x42>
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	e7b4      	b.n	8006b7a <__ieee754_atan2+0x42>
 8006c10:	4573      	cmp	r3, lr
 8006c12:	d0d3      	beq.n	8006bbc <__ieee754_atan2+0x84>
 8006c14:	1a9b      	subs	r3, r3, r2
 8006c16:	151b      	asrs	r3, r3, #20
 8006c18:	2b3c      	cmp	r3, #60	; 0x3c
 8006c1a:	dc1e      	bgt.n	8006c5a <__ieee754_atan2+0x122>
 8006c1c:	2f00      	cmp	r7, #0
 8006c1e:	da01      	bge.n	8006c24 <__ieee754_atan2+0xec>
 8006c20:	333c      	adds	r3, #60	; 0x3c
 8006c22:	db1e      	blt.n	8006c62 <__ieee754_atan2+0x12a>
 8006c24:	4632      	mov	r2, r6
 8006c26:	463b      	mov	r3, r7
 8006c28:	f7f9 fe10 	bl	800084c <__aeabi_ddiv>
 8006c2c:	ec41 0b10 	vmov	d0, r0, r1
 8006c30:	f000 ffc2 	bl	8007bb8 <fabs>
 8006c34:	f000 fe20 	bl	8007878 <atan>
 8006c38:	ec51 0b10 	vmov	r0, r1, d0
 8006c3c:	2c01      	cmp	r4, #1
 8006c3e:	d013      	beq.n	8006c68 <__ieee754_atan2+0x130>
 8006c40:	2c02      	cmp	r4, #2
 8006c42:	d015      	beq.n	8006c70 <__ieee754_atan2+0x138>
 8006c44:	2c00      	cmp	r4, #0
 8006c46:	d098      	beq.n	8006b7a <__ieee754_atan2+0x42>
 8006c48:	a321      	add	r3, pc, #132	; (adr r3, 8006cd0 <__ieee754_atan2+0x198>)
 8006c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4e:	f7f9 fb1b 	bl	8000288 <__aeabi_dsub>
 8006c52:	a321      	add	r3, pc, #132	; (adr r3, 8006cd8 <__ieee754_atan2+0x1a0>)
 8006c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c58:	e014      	b.n	8006c84 <__ieee754_atan2+0x14c>
 8006c5a:	a121      	add	r1, pc, #132	; (adr r1, 8006ce0 <__ieee754_atan2+0x1a8>)
 8006c5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c60:	e7ec      	b.n	8006c3c <__ieee754_atan2+0x104>
 8006c62:	2000      	movs	r0, #0
 8006c64:	2100      	movs	r1, #0
 8006c66:	e7e9      	b.n	8006c3c <__ieee754_atan2+0x104>
 8006c68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	e784      	b.n	8006b7a <__ieee754_atan2+0x42>
 8006c70:	a317      	add	r3, pc, #92	; (adr r3, 8006cd0 <__ieee754_atan2+0x198>)
 8006c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c76:	f7f9 fb07 	bl	8000288 <__aeabi_dsub>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	a116      	add	r1, pc, #88	; (adr r1, 8006cd8 <__ieee754_atan2+0x1a0>)
 8006c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c84:	f7f9 fb00 	bl	8000288 <__aeabi_dsub>
 8006c88:	e777      	b.n	8006b7a <__ieee754_atan2+0x42>
 8006c8a:	a117      	add	r1, pc, #92	; (adr r1, 8006ce8 <__ieee754_atan2+0x1b0>)
 8006c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c90:	e773      	b.n	8006b7a <__ieee754_atan2+0x42>
 8006c92:	a111      	add	r1, pc, #68	; (adr r1, 8006cd8 <__ieee754_atan2+0x1a0>)
 8006c94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c98:	e76f      	b.n	8006b7a <__ieee754_atan2+0x42>
 8006c9a:	a111      	add	r1, pc, #68	; (adr r1, 8006ce0 <__ieee754_atan2+0x1a8>)
 8006c9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ca0:	e76b      	b.n	8006b7a <__ieee754_atan2+0x42>
 8006ca2:	bf00      	nop
 8006ca4:	f3af 8000 	nop.w
 8006ca8:	54442d18 	.word	0x54442d18
 8006cac:	c00921fb 	.word	0xc00921fb
 8006cb0:	54442d18 	.word	0x54442d18
 8006cb4:	bff921fb 	.word	0xbff921fb
 8006cb8:	54442d18 	.word	0x54442d18
 8006cbc:	bfe921fb 	.word	0xbfe921fb
 8006cc0:	7f3321d2 	.word	0x7f3321d2
 8006cc4:	4002d97c 	.word	0x4002d97c
 8006cc8:	7f3321d2 	.word	0x7f3321d2
 8006ccc:	c002d97c 	.word	0xc002d97c
 8006cd0:	33145c07 	.word	0x33145c07
 8006cd4:	3ca1a626 	.word	0x3ca1a626
 8006cd8:	54442d18 	.word	0x54442d18
 8006cdc:	400921fb 	.word	0x400921fb
 8006ce0:	54442d18 	.word	0x54442d18
 8006ce4:	3ff921fb 	.word	0x3ff921fb
 8006ce8:	54442d18 	.word	0x54442d18
 8006cec:	3fe921fb 	.word	0x3fe921fb
 8006cf0:	7ff00000 	.word	0x7ff00000
 8006cf4:	00000000 	.word	0x00000000

08006cf8 <__ieee754_pow>:
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	b091      	sub	sp, #68	; 0x44
 8006cfe:	ed8d 1b00 	vstr	d1, [sp]
 8006d02:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006d06:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006d0a:	ea58 0302 	orrs.w	r3, r8, r2
 8006d0e:	ec57 6b10 	vmov	r6, r7, d0
 8006d12:	f000 84be 	beq.w	8007692 <__ieee754_pow+0x99a>
 8006d16:	4b7a      	ldr	r3, [pc, #488]	; (8006f00 <__ieee754_pow+0x208>)
 8006d18:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006d1c:	429c      	cmp	r4, r3
 8006d1e:	463d      	mov	r5, r7
 8006d20:	ee10 aa10 	vmov	sl, s0
 8006d24:	dc09      	bgt.n	8006d3a <__ieee754_pow+0x42>
 8006d26:	d103      	bne.n	8006d30 <__ieee754_pow+0x38>
 8006d28:	b93e      	cbnz	r6, 8006d3a <__ieee754_pow+0x42>
 8006d2a:	45a0      	cmp	r8, r4
 8006d2c:	dc0d      	bgt.n	8006d4a <__ieee754_pow+0x52>
 8006d2e:	e001      	b.n	8006d34 <__ieee754_pow+0x3c>
 8006d30:	4598      	cmp	r8, r3
 8006d32:	dc02      	bgt.n	8006d3a <__ieee754_pow+0x42>
 8006d34:	4598      	cmp	r8, r3
 8006d36:	d10e      	bne.n	8006d56 <__ieee754_pow+0x5e>
 8006d38:	b16a      	cbz	r2, 8006d56 <__ieee754_pow+0x5e>
 8006d3a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006d3e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006d42:	ea54 030a 	orrs.w	r3, r4, sl
 8006d46:	f000 84a4 	beq.w	8007692 <__ieee754_pow+0x99a>
 8006d4a:	486e      	ldr	r0, [pc, #440]	; (8006f04 <__ieee754_pow+0x20c>)
 8006d4c:	b011      	add	sp, #68	; 0x44
 8006d4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d52:	f000 bf45 	b.w	8007be0 <nan>
 8006d56:	2d00      	cmp	r5, #0
 8006d58:	da53      	bge.n	8006e02 <__ieee754_pow+0x10a>
 8006d5a:	4b6b      	ldr	r3, [pc, #428]	; (8006f08 <__ieee754_pow+0x210>)
 8006d5c:	4598      	cmp	r8, r3
 8006d5e:	dc4d      	bgt.n	8006dfc <__ieee754_pow+0x104>
 8006d60:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006d64:	4598      	cmp	r8, r3
 8006d66:	dd4c      	ble.n	8006e02 <__ieee754_pow+0x10a>
 8006d68:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006d6c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006d70:	2b14      	cmp	r3, #20
 8006d72:	dd26      	ble.n	8006dc2 <__ieee754_pow+0xca>
 8006d74:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006d78:	fa22 f103 	lsr.w	r1, r2, r3
 8006d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d13e      	bne.n	8006e02 <__ieee754_pow+0x10a>
 8006d84:	f001 0101 	and.w	r1, r1, #1
 8006d88:	f1c1 0b02 	rsb	fp, r1, #2
 8006d8c:	2a00      	cmp	r2, #0
 8006d8e:	d15b      	bne.n	8006e48 <__ieee754_pow+0x150>
 8006d90:	4b5b      	ldr	r3, [pc, #364]	; (8006f00 <__ieee754_pow+0x208>)
 8006d92:	4598      	cmp	r8, r3
 8006d94:	d124      	bne.n	8006de0 <__ieee754_pow+0xe8>
 8006d96:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006d9a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006d9e:	ea53 030a 	orrs.w	r3, r3, sl
 8006da2:	f000 8476 	beq.w	8007692 <__ieee754_pow+0x99a>
 8006da6:	4b59      	ldr	r3, [pc, #356]	; (8006f0c <__ieee754_pow+0x214>)
 8006da8:	429c      	cmp	r4, r3
 8006daa:	dd2d      	ble.n	8006e08 <__ieee754_pow+0x110>
 8006dac:	f1b9 0f00 	cmp.w	r9, #0
 8006db0:	f280 8473 	bge.w	800769a <__ieee754_pow+0x9a2>
 8006db4:	2000      	movs	r0, #0
 8006db6:	2100      	movs	r1, #0
 8006db8:	ec41 0b10 	vmov	d0, r0, r1
 8006dbc:	b011      	add	sp, #68	; 0x44
 8006dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc2:	2a00      	cmp	r2, #0
 8006dc4:	d13e      	bne.n	8006e44 <__ieee754_pow+0x14c>
 8006dc6:	f1c3 0314 	rsb	r3, r3, #20
 8006dca:	fa48 f103 	asr.w	r1, r8, r3
 8006dce:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd2:	4543      	cmp	r3, r8
 8006dd4:	f040 8469 	bne.w	80076aa <__ieee754_pow+0x9b2>
 8006dd8:	f001 0101 	and.w	r1, r1, #1
 8006ddc:	f1c1 0b02 	rsb	fp, r1, #2
 8006de0:	4b4b      	ldr	r3, [pc, #300]	; (8006f10 <__ieee754_pow+0x218>)
 8006de2:	4598      	cmp	r8, r3
 8006de4:	d118      	bne.n	8006e18 <__ieee754_pow+0x120>
 8006de6:	f1b9 0f00 	cmp.w	r9, #0
 8006dea:	f280 845a 	bge.w	80076a2 <__ieee754_pow+0x9aa>
 8006dee:	4948      	ldr	r1, [pc, #288]	; (8006f10 <__ieee754_pow+0x218>)
 8006df0:	4632      	mov	r2, r6
 8006df2:	463b      	mov	r3, r7
 8006df4:	2000      	movs	r0, #0
 8006df6:	f7f9 fd29 	bl	800084c <__aeabi_ddiv>
 8006dfa:	e7dd      	b.n	8006db8 <__ieee754_pow+0xc0>
 8006dfc:	f04f 0b02 	mov.w	fp, #2
 8006e00:	e7c4      	b.n	8006d8c <__ieee754_pow+0x94>
 8006e02:	f04f 0b00 	mov.w	fp, #0
 8006e06:	e7c1      	b.n	8006d8c <__ieee754_pow+0x94>
 8006e08:	f1b9 0f00 	cmp.w	r9, #0
 8006e0c:	dad2      	bge.n	8006db4 <__ieee754_pow+0xbc>
 8006e0e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006e12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006e16:	e7cf      	b.n	8006db8 <__ieee754_pow+0xc0>
 8006e18:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006e1c:	d106      	bne.n	8006e2c <__ieee754_pow+0x134>
 8006e1e:	4632      	mov	r2, r6
 8006e20:	463b      	mov	r3, r7
 8006e22:	4610      	mov	r0, r2
 8006e24:	4619      	mov	r1, r3
 8006e26:	f7f9 fbe7 	bl	80005f8 <__aeabi_dmul>
 8006e2a:	e7c5      	b.n	8006db8 <__ieee754_pow+0xc0>
 8006e2c:	4b39      	ldr	r3, [pc, #228]	; (8006f14 <__ieee754_pow+0x21c>)
 8006e2e:	4599      	cmp	r9, r3
 8006e30:	d10a      	bne.n	8006e48 <__ieee754_pow+0x150>
 8006e32:	2d00      	cmp	r5, #0
 8006e34:	db08      	blt.n	8006e48 <__ieee754_pow+0x150>
 8006e36:	ec47 6b10 	vmov	d0, r6, r7
 8006e3a:	b011      	add	sp, #68	; 0x44
 8006e3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e40:	f000 bc68 	b.w	8007714 <__ieee754_sqrt>
 8006e44:	f04f 0b00 	mov.w	fp, #0
 8006e48:	ec47 6b10 	vmov	d0, r6, r7
 8006e4c:	f000 feb4 	bl	8007bb8 <fabs>
 8006e50:	ec51 0b10 	vmov	r0, r1, d0
 8006e54:	f1ba 0f00 	cmp.w	sl, #0
 8006e58:	d127      	bne.n	8006eaa <__ieee754_pow+0x1b2>
 8006e5a:	b124      	cbz	r4, 8006e66 <__ieee754_pow+0x16e>
 8006e5c:	4b2c      	ldr	r3, [pc, #176]	; (8006f10 <__ieee754_pow+0x218>)
 8006e5e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d121      	bne.n	8006eaa <__ieee754_pow+0x1b2>
 8006e66:	f1b9 0f00 	cmp.w	r9, #0
 8006e6a:	da05      	bge.n	8006e78 <__ieee754_pow+0x180>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	2000      	movs	r0, #0
 8006e72:	4927      	ldr	r1, [pc, #156]	; (8006f10 <__ieee754_pow+0x218>)
 8006e74:	f7f9 fcea 	bl	800084c <__aeabi_ddiv>
 8006e78:	2d00      	cmp	r5, #0
 8006e7a:	da9d      	bge.n	8006db8 <__ieee754_pow+0xc0>
 8006e7c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006e80:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006e84:	ea54 030b 	orrs.w	r3, r4, fp
 8006e88:	d108      	bne.n	8006e9c <__ieee754_pow+0x1a4>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	4610      	mov	r0, r2
 8006e90:	4619      	mov	r1, r3
 8006e92:	f7f9 f9f9 	bl	8000288 <__aeabi_dsub>
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	e7ac      	b.n	8006df6 <__ieee754_pow+0xfe>
 8006e9c:	f1bb 0f01 	cmp.w	fp, #1
 8006ea0:	d18a      	bne.n	8006db8 <__ieee754_pow+0xc0>
 8006ea2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	e786      	b.n	8006db8 <__ieee754_pow+0xc0>
 8006eaa:	0fed      	lsrs	r5, r5, #31
 8006eac:	1e6b      	subs	r3, r5, #1
 8006eae:	930d      	str	r3, [sp, #52]	; 0x34
 8006eb0:	ea5b 0303 	orrs.w	r3, fp, r3
 8006eb4:	d102      	bne.n	8006ebc <__ieee754_pow+0x1c4>
 8006eb6:	4632      	mov	r2, r6
 8006eb8:	463b      	mov	r3, r7
 8006eba:	e7e8      	b.n	8006e8e <__ieee754_pow+0x196>
 8006ebc:	4b16      	ldr	r3, [pc, #88]	; (8006f18 <__ieee754_pow+0x220>)
 8006ebe:	4598      	cmp	r8, r3
 8006ec0:	f340 80fe 	ble.w	80070c0 <__ieee754_pow+0x3c8>
 8006ec4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006ec8:	4598      	cmp	r8, r3
 8006eca:	dd0a      	ble.n	8006ee2 <__ieee754_pow+0x1ea>
 8006ecc:	4b0f      	ldr	r3, [pc, #60]	; (8006f0c <__ieee754_pow+0x214>)
 8006ece:	429c      	cmp	r4, r3
 8006ed0:	dc0d      	bgt.n	8006eee <__ieee754_pow+0x1f6>
 8006ed2:	f1b9 0f00 	cmp.w	r9, #0
 8006ed6:	f6bf af6d 	bge.w	8006db4 <__ieee754_pow+0xbc>
 8006eda:	a307      	add	r3, pc, #28	; (adr r3, 8006ef8 <__ieee754_pow+0x200>)
 8006edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee0:	e79f      	b.n	8006e22 <__ieee754_pow+0x12a>
 8006ee2:	4b0e      	ldr	r3, [pc, #56]	; (8006f1c <__ieee754_pow+0x224>)
 8006ee4:	429c      	cmp	r4, r3
 8006ee6:	ddf4      	ble.n	8006ed2 <__ieee754_pow+0x1da>
 8006ee8:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <__ieee754_pow+0x218>)
 8006eea:	429c      	cmp	r4, r3
 8006eec:	dd18      	ble.n	8006f20 <__ieee754_pow+0x228>
 8006eee:	f1b9 0f00 	cmp.w	r9, #0
 8006ef2:	dcf2      	bgt.n	8006eda <__ieee754_pow+0x1e2>
 8006ef4:	e75e      	b.n	8006db4 <__ieee754_pow+0xbc>
 8006ef6:	bf00      	nop
 8006ef8:	8800759c 	.word	0x8800759c
 8006efc:	7e37e43c 	.word	0x7e37e43c
 8006f00:	7ff00000 	.word	0x7ff00000
 8006f04:	08007fa1 	.word	0x08007fa1
 8006f08:	433fffff 	.word	0x433fffff
 8006f0c:	3fefffff 	.word	0x3fefffff
 8006f10:	3ff00000 	.word	0x3ff00000
 8006f14:	3fe00000 	.word	0x3fe00000
 8006f18:	41e00000 	.word	0x41e00000
 8006f1c:	3feffffe 	.word	0x3feffffe
 8006f20:	2200      	movs	r2, #0
 8006f22:	4b63      	ldr	r3, [pc, #396]	; (80070b0 <__ieee754_pow+0x3b8>)
 8006f24:	f7f9 f9b0 	bl	8000288 <__aeabi_dsub>
 8006f28:	a355      	add	r3, pc, #340	; (adr r3, 8007080 <__ieee754_pow+0x388>)
 8006f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2e:	4604      	mov	r4, r0
 8006f30:	460d      	mov	r5, r1
 8006f32:	f7f9 fb61 	bl	80005f8 <__aeabi_dmul>
 8006f36:	a354      	add	r3, pc, #336	; (adr r3, 8007088 <__ieee754_pow+0x390>)
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	4606      	mov	r6, r0
 8006f3e:	460f      	mov	r7, r1
 8006f40:	4620      	mov	r0, r4
 8006f42:	4629      	mov	r1, r5
 8006f44:	f7f9 fb58 	bl	80005f8 <__aeabi_dmul>
 8006f48:	2200      	movs	r2, #0
 8006f4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f4e:	4b59      	ldr	r3, [pc, #356]	; (80070b4 <__ieee754_pow+0x3bc>)
 8006f50:	4620      	mov	r0, r4
 8006f52:	4629      	mov	r1, r5
 8006f54:	f7f9 fb50 	bl	80005f8 <__aeabi_dmul>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	a14c      	add	r1, pc, #304	; (adr r1, 8007090 <__ieee754_pow+0x398>)
 8006f5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f62:	f7f9 f991 	bl	8000288 <__aeabi_dsub>
 8006f66:	4622      	mov	r2, r4
 8006f68:	462b      	mov	r3, r5
 8006f6a:	f7f9 fb45 	bl	80005f8 <__aeabi_dmul>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	2000      	movs	r0, #0
 8006f74:	4950      	ldr	r1, [pc, #320]	; (80070b8 <__ieee754_pow+0x3c0>)
 8006f76:	f7f9 f987 	bl	8000288 <__aeabi_dsub>
 8006f7a:	4622      	mov	r2, r4
 8006f7c:	462b      	mov	r3, r5
 8006f7e:	4680      	mov	r8, r0
 8006f80:	4689      	mov	r9, r1
 8006f82:	4620      	mov	r0, r4
 8006f84:	4629      	mov	r1, r5
 8006f86:	f7f9 fb37 	bl	80005f8 <__aeabi_dmul>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4640      	mov	r0, r8
 8006f90:	4649      	mov	r1, r9
 8006f92:	f7f9 fb31 	bl	80005f8 <__aeabi_dmul>
 8006f96:	a340      	add	r3, pc, #256	; (adr r3, 8007098 <__ieee754_pow+0x3a0>)
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f7f9 fb2c 	bl	80005f8 <__aeabi_dmul>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fa8:	f7f9 f96e 	bl	8000288 <__aeabi_dsub>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	460d      	mov	r5, r1
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	f7f9 f968 	bl	800028c <__adddf3>
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fc2:	4632      	mov	r2, r6
 8006fc4:	463b      	mov	r3, r7
 8006fc6:	f7f9 f95f 	bl	8000288 <__aeabi_dsub>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4620      	mov	r0, r4
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	f7f9 f959 	bl	8000288 <__aeabi_dsub>
 8006fd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fd8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	4606      	mov	r6, r0
 8006fe0:	460f      	mov	r7, r1
 8006fe2:	f040 81eb 	bne.w	80073bc <__ieee754_pow+0x6c4>
 8006fe6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80070a0 <__ieee754_pow+0x3a8>
 8006fea:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006fee:	2400      	movs	r4, #0
 8006ff0:	4622      	mov	r2, r4
 8006ff2:	462b      	mov	r3, r5
 8006ff4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ff8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006ffc:	f7f9 f944 	bl	8000288 <__aeabi_dsub>
 8007000:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007004:	f7f9 faf8 	bl	80005f8 <__aeabi_dmul>
 8007008:	e9dd 2300 	ldrd	r2, r3, [sp]
 800700c:	4680      	mov	r8, r0
 800700e:	4689      	mov	r9, r1
 8007010:	4630      	mov	r0, r6
 8007012:	4639      	mov	r1, r7
 8007014:	f7f9 faf0 	bl	80005f8 <__aeabi_dmul>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4640      	mov	r0, r8
 800701e:	4649      	mov	r1, r9
 8007020:	f7f9 f934 	bl	800028c <__adddf3>
 8007024:	4622      	mov	r2, r4
 8007026:	462b      	mov	r3, r5
 8007028:	4680      	mov	r8, r0
 800702a:	4689      	mov	r9, r1
 800702c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007030:	f7f9 fae2 	bl	80005f8 <__aeabi_dmul>
 8007034:	460b      	mov	r3, r1
 8007036:	4604      	mov	r4, r0
 8007038:	460d      	mov	r5, r1
 800703a:	4602      	mov	r2, r0
 800703c:	4649      	mov	r1, r9
 800703e:	4640      	mov	r0, r8
 8007040:	e9cd 4500 	strd	r4, r5, [sp]
 8007044:	f7f9 f922 	bl	800028c <__adddf3>
 8007048:	4b1c      	ldr	r3, [pc, #112]	; (80070bc <__ieee754_pow+0x3c4>)
 800704a:	4299      	cmp	r1, r3
 800704c:	4606      	mov	r6, r0
 800704e:	460f      	mov	r7, r1
 8007050:	468b      	mov	fp, r1
 8007052:	f340 82f7 	ble.w	8007644 <__ieee754_pow+0x94c>
 8007056:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800705a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800705e:	4303      	orrs	r3, r0
 8007060:	f000 81ea 	beq.w	8007438 <__ieee754_pow+0x740>
 8007064:	a310      	add	r3, pc, #64	; (adr r3, 80070a8 <__ieee754_pow+0x3b0>)
 8007066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800706e:	f7f9 fac3 	bl	80005f8 <__aeabi_dmul>
 8007072:	a30d      	add	r3, pc, #52	; (adr r3, 80070a8 <__ieee754_pow+0x3b0>)
 8007074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007078:	e6d5      	b.n	8006e26 <__ieee754_pow+0x12e>
 800707a:	bf00      	nop
 800707c:	f3af 8000 	nop.w
 8007080:	60000000 	.word	0x60000000
 8007084:	3ff71547 	.word	0x3ff71547
 8007088:	f85ddf44 	.word	0xf85ddf44
 800708c:	3e54ae0b 	.word	0x3e54ae0b
 8007090:	55555555 	.word	0x55555555
 8007094:	3fd55555 	.word	0x3fd55555
 8007098:	652b82fe 	.word	0x652b82fe
 800709c:	3ff71547 	.word	0x3ff71547
 80070a0:	00000000 	.word	0x00000000
 80070a4:	bff00000 	.word	0xbff00000
 80070a8:	8800759c 	.word	0x8800759c
 80070ac:	7e37e43c 	.word	0x7e37e43c
 80070b0:	3ff00000 	.word	0x3ff00000
 80070b4:	3fd00000 	.word	0x3fd00000
 80070b8:	3fe00000 	.word	0x3fe00000
 80070bc:	408fffff 	.word	0x408fffff
 80070c0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80070c4:	f04f 0200 	mov.w	r2, #0
 80070c8:	da05      	bge.n	80070d6 <__ieee754_pow+0x3de>
 80070ca:	4bd3      	ldr	r3, [pc, #844]	; (8007418 <__ieee754_pow+0x720>)
 80070cc:	f7f9 fa94 	bl	80005f8 <__aeabi_dmul>
 80070d0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80070d4:	460c      	mov	r4, r1
 80070d6:	1523      	asrs	r3, r4, #20
 80070d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80070dc:	4413      	add	r3, r2
 80070de:	9309      	str	r3, [sp, #36]	; 0x24
 80070e0:	4bce      	ldr	r3, [pc, #824]	; (800741c <__ieee754_pow+0x724>)
 80070e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80070e6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80070ea:	429c      	cmp	r4, r3
 80070ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80070f0:	dd08      	ble.n	8007104 <__ieee754_pow+0x40c>
 80070f2:	4bcb      	ldr	r3, [pc, #812]	; (8007420 <__ieee754_pow+0x728>)
 80070f4:	429c      	cmp	r4, r3
 80070f6:	f340 815e 	ble.w	80073b6 <__ieee754_pow+0x6be>
 80070fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070fc:	3301      	adds	r3, #1
 80070fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007100:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007104:	f04f 0a00 	mov.w	sl, #0
 8007108:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800710c:	930c      	str	r3, [sp, #48]	; 0x30
 800710e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007110:	4bc4      	ldr	r3, [pc, #784]	; (8007424 <__ieee754_pow+0x72c>)
 8007112:	4413      	add	r3, r2
 8007114:	ed93 7b00 	vldr	d7, [r3]
 8007118:	4629      	mov	r1, r5
 800711a:	ec53 2b17 	vmov	r2, r3, d7
 800711e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007122:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007126:	f7f9 f8af 	bl	8000288 <__aeabi_dsub>
 800712a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800712e:	4606      	mov	r6, r0
 8007130:	460f      	mov	r7, r1
 8007132:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007136:	f7f9 f8a9 	bl	800028c <__adddf3>
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	2000      	movs	r0, #0
 8007140:	49b9      	ldr	r1, [pc, #740]	; (8007428 <__ieee754_pow+0x730>)
 8007142:	f7f9 fb83 	bl	800084c <__aeabi_ddiv>
 8007146:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	4630      	mov	r0, r6
 8007150:	4639      	mov	r1, r7
 8007152:	f7f9 fa51 	bl	80005f8 <__aeabi_dmul>
 8007156:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800715a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800715e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007162:	2300      	movs	r3, #0
 8007164:	9302      	str	r3, [sp, #8]
 8007166:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800716a:	106d      	asrs	r5, r5, #1
 800716c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007170:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007174:	2200      	movs	r2, #0
 8007176:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800717a:	4640      	mov	r0, r8
 800717c:	4649      	mov	r1, r9
 800717e:	4614      	mov	r4, r2
 8007180:	461d      	mov	r5, r3
 8007182:	f7f9 fa39 	bl	80005f8 <__aeabi_dmul>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	4630      	mov	r0, r6
 800718c:	4639      	mov	r1, r7
 800718e:	f7f9 f87b 	bl	8000288 <__aeabi_dsub>
 8007192:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007196:	4606      	mov	r6, r0
 8007198:	460f      	mov	r7, r1
 800719a:	4620      	mov	r0, r4
 800719c:	4629      	mov	r1, r5
 800719e:	f7f9 f873 	bl	8000288 <__aeabi_dsub>
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071aa:	f7f9 f86d 	bl	8000288 <__aeabi_dsub>
 80071ae:	4642      	mov	r2, r8
 80071b0:	464b      	mov	r3, r9
 80071b2:	f7f9 fa21 	bl	80005f8 <__aeabi_dmul>
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	4630      	mov	r0, r6
 80071bc:	4639      	mov	r1, r7
 80071be:	f7f9 f863 	bl	8000288 <__aeabi_dsub>
 80071c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80071c6:	f7f9 fa17 	bl	80005f8 <__aeabi_dmul>
 80071ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80071d2:	4610      	mov	r0, r2
 80071d4:	4619      	mov	r1, r3
 80071d6:	f7f9 fa0f 	bl	80005f8 <__aeabi_dmul>
 80071da:	a37b      	add	r3, pc, #492	; (adr r3, 80073c8 <__ieee754_pow+0x6d0>)
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	4604      	mov	r4, r0
 80071e2:	460d      	mov	r5, r1
 80071e4:	f7f9 fa08 	bl	80005f8 <__aeabi_dmul>
 80071e8:	a379      	add	r3, pc, #484	; (adr r3, 80073d0 <__ieee754_pow+0x6d8>)
 80071ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ee:	f7f9 f84d 	bl	800028c <__adddf3>
 80071f2:	4622      	mov	r2, r4
 80071f4:	462b      	mov	r3, r5
 80071f6:	f7f9 f9ff 	bl	80005f8 <__aeabi_dmul>
 80071fa:	a377      	add	r3, pc, #476	; (adr r3, 80073d8 <__ieee754_pow+0x6e0>)
 80071fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007200:	f7f9 f844 	bl	800028c <__adddf3>
 8007204:	4622      	mov	r2, r4
 8007206:	462b      	mov	r3, r5
 8007208:	f7f9 f9f6 	bl	80005f8 <__aeabi_dmul>
 800720c:	a374      	add	r3, pc, #464	; (adr r3, 80073e0 <__ieee754_pow+0x6e8>)
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f7f9 f83b 	bl	800028c <__adddf3>
 8007216:	4622      	mov	r2, r4
 8007218:	462b      	mov	r3, r5
 800721a:	f7f9 f9ed 	bl	80005f8 <__aeabi_dmul>
 800721e:	a372      	add	r3, pc, #456	; (adr r3, 80073e8 <__ieee754_pow+0x6f0>)
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f7f9 f832 	bl	800028c <__adddf3>
 8007228:	4622      	mov	r2, r4
 800722a:	462b      	mov	r3, r5
 800722c:	f7f9 f9e4 	bl	80005f8 <__aeabi_dmul>
 8007230:	a36f      	add	r3, pc, #444	; (adr r3, 80073f0 <__ieee754_pow+0x6f8>)
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	f7f9 f829 	bl	800028c <__adddf3>
 800723a:	4622      	mov	r2, r4
 800723c:	4606      	mov	r6, r0
 800723e:	460f      	mov	r7, r1
 8007240:	462b      	mov	r3, r5
 8007242:	4620      	mov	r0, r4
 8007244:	4629      	mov	r1, r5
 8007246:	f7f9 f9d7 	bl	80005f8 <__aeabi_dmul>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	4630      	mov	r0, r6
 8007250:	4639      	mov	r1, r7
 8007252:	f7f9 f9d1 	bl	80005f8 <__aeabi_dmul>
 8007256:	4642      	mov	r2, r8
 8007258:	4604      	mov	r4, r0
 800725a:	460d      	mov	r5, r1
 800725c:	464b      	mov	r3, r9
 800725e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007262:	f7f9 f813 	bl	800028c <__adddf3>
 8007266:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800726a:	f7f9 f9c5 	bl	80005f8 <__aeabi_dmul>
 800726e:	4622      	mov	r2, r4
 8007270:	462b      	mov	r3, r5
 8007272:	f7f9 f80b 	bl	800028c <__adddf3>
 8007276:	4642      	mov	r2, r8
 8007278:	4606      	mov	r6, r0
 800727a:	460f      	mov	r7, r1
 800727c:	464b      	mov	r3, r9
 800727e:	4640      	mov	r0, r8
 8007280:	4649      	mov	r1, r9
 8007282:	f7f9 f9b9 	bl	80005f8 <__aeabi_dmul>
 8007286:	2200      	movs	r2, #0
 8007288:	4b68      	ldr	r3, [pc, #416]	; (800742c <__ieee754_pow+0x734>)
 800728a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800728e:	f7f8 fffd 	bl	800028c <__adddf3>
 8007292:	4632      	mov	r2, r6
 8007294:	463b      	mov	r3, r7
 8007296:	f7f8 fff9 	bl	800028c <__adddf3>
 800729a:	9802      	ldr	r0, [sp, #8]
 800729c:	460d      	mov	r5, r1
 800729e:	4604      	mov	r4, r0
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4640      	mov	r0, r8
 80072a6:	4649      	mov	r1, r9
 80072a8:	f7f9 f9a6 	bl	80005f8 <__aeabi_dmul>
 80072ac:	2200      	movs	r2, #0
 80072ae:	4680      	mov	r8, r0
 80072b0:	4689      	mov	r9, r1
 80072b2:	4b5e      	ldr	r3, [pc, #376]	; (800742c <__ieee754_pow+0x734>)
 80072b4:	4620      	mov	r0, r4
 80072b6:	4629      	mov	r1, r5
 80072b8:	f7f8 ffe6 	bl	8000288 <__aeabi_dsub>
 80072bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80072c0:	f7f8 ffe2 	bl	8000288 <__aeabi_dsub>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4630      	mov	r0, r6
 80072ca:	4639      	mov	r1, r7
 80072cc:	f7f8 ffdc 	bl	8000288 <__aeabi_dsub>
 80072d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072d4:	f7f9 f990 	bl	80005f8 <__aeabi_dmul>
 80072d8:	4622      	mov	r2, r4
 80072da:	4606      	mov	r6, r0
 80072dc:	460f      	mov	r7, r1
 80072de:	462b      	mov	r3, r5
 80072e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072e4:	f7f9 f988 	bl	80005f8 <__aeabi_dmul>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4630      	mov	r0, r6
 80072ee:	4639      	mov	r1, r7
 80072f0:	f7f8 ffcc 	bl	800028c <__adddf3>
 80072f4:	4606      	mov	r6, r0
 80072f6:	460f      	mov	r7, r1
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4640      	mov	r0, r8
 80072fe:	4649      	mov	r1, r9
 8007300:	f7f8 ffc4 	bl	800028c <__adddf3>
 8007304:	9802      	ldr	r0, [sp, #8]
 8007306:	a33c      	add	r3, pc, #240	; (adr r3, 80073f8 <__ieee754_pow+0x700>)
 8007308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730c:	4604      	mov	r4, r0
 800730e:	460d      	mov	r5, r1
 8007310:	f7f9 f972 	bl	80005f8 <__aeabi_dmul>
 8007314:	4642      	mov	r2, r8
 8007316:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800731a:	464b      	mov	r3, r9
 800731c:	4620      	mov	r0, r4
 800731e:	4629      	mov	r1, r5
 8007320:	f7f8 ffb2 	bl	8000288 <__aeabi_dsub>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	4630      	mov	r0, r6
 800732a:	4639      	mov	r1, r7
 800732c:	f7f8 ffac 	bl	8000288 <__aeabi_dsub>
 8007330:	a333      	add	r3, pc, #204	; (adr r3, 8007400 <__ieee754_pow+0x708>)
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	f7f9 f95f 	bl	80005f8 <__aeabi_dmul>
 800733a:	a333      	add	r3, pc, #204	; (adr r3, 8007408 <__ieee754_pow+0x710>)
 800733c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007340:	4606      	mov	r6, r0
 8007342:	460f      	mov	r7, r1
 8007344:	4620      	mov	r0, r4
 8007346:	4629      	mov	r1, r5
 8007348:	f7f9 f956 	bl	80005f8 <__aeabi_dmul>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4630      	mov	r0, r6
 8007352:	4639      	mov	r1, r7
 8007354:	f7f8 ff9a 	bl	800028c <__adddf3>
 8007358:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800735a:	4b35      	ldr	r3, [pc, #212]	; (8007430 <__ieee754_pow+0x738>)
 800735c:	4413      	add	r3, r2
 800735e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007362:	f7f8 ff93 	bl	800028c <__adddf3>
 8007366:	4604      	mov	r4, r0
 8007368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800736a:	460d      	mov	r5, r1
 800736c:	f7f9 f8da 	bl	8000524 <__aeabi_i2d>
 8007370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007372:	4b30      	ldr	r3, [pc, #192]	; (8007434 <__ieee754_pow+0x73c>)
 8007374:	4413      	add	r3, r2
 8007376:	e9d3 8900 	ldrd	r8, r9, [r3]
 800737a:	4606      	mov	r6, r0
 800737c:	460f      	mov	r7, r1
 800737e:	4622      	mov	r2, r4
 8007380:	462b      	mov	r3, r5
 8007382:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007386:	f7f8 ff81 	bl	800028c <__adddf3>
 800738a:	4642      	mov	r2, r8
 800738c:	464b      	mov	r3, r9
 800738e:	f7f8 ff7d 	bl	800028c <__adddf3>
 8007392:	4632      	mov	r2, r6
 8007394:	463b      	mov	r3, r7
 8007396:	f7f8 ff79 	bl	800028c <__adddf3>
 800739a:	9802      	ldr	r0, [sp, #8]
 800739c:	4632      	mov	r2, r6
 800739e:	463b      	mov	r3, r7
 80073a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073a4:	f7f8 ff70 	bl	8000288 <__aeabi_dsub>
 80073a8:	4642      	mov	r2, r8
 80073aa:	464b      	mov	r3, r9
 80073ac:	f7f8 ff6c 	bl	8000288 <__aeabi_dsub>
 80073b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073b4:	e607      	b.n	8006fc6 <__ieee754_pow+0x2ce>
 80073b6:	f04f 0a01 	mov.w	sl, #1
 80073ba:	e6a5      	b.n	8007108 <__ieee754_pow+0x410>
 80073bc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007410 <__ieee754_pow+0x718>
 80073c0:	e613      	b.n	8006fea <__ieee754_pow+0x2f2>
 80073c2:	bf00      	nop
 80073c4:	f3af 8000 	nop.w
 80073c8:	4a454eef 	.word	0x4a454eef
 80073cc:	3fca7e28 	.word	0x3fca7e28
 80073d0:	93c9db65 	.word	0x93c9db65
 80073d4:	3fcd864a 	.word	0x3fcd864a
 80073d8:	a91d4101 	.word	0xa91d4101
 80073dc:	3fd17460 	.word	0x3fd17460
 80073e0:	518f264d 	.word	0x518f264d
 80073e4:	3fd55555 	.word	0x3fd55555
 80073e8:	db6fabff 	.word	0xdb6fabff
 80073ec:	3fdb6db6 	.word	0x3fdb6db6
 80073f0:	33333303 	.word	0x33333303
 80073f4:	3fe33333 	.word	0x3fe33333
 80073f8:	e0000000 	.word	0xe0000000
 80073fc:	3feec709 	.word	0x3feec709
 8007400:	dc3a03fd 	.word	0xdc3a03fd
 8007404:	3feec709 	.word	0x3feec709
 8007408:	145b01f5 	.word	0x145b01f5
 800740c:	be3e2fe0 	.word	0xbe3e2fe0
 8007410:	00000000 	.word	0x00000000
 8007414:	3ff00000 	.word	0x3ff00000
 8007418:	43400000 	.word	0x43400000
 800741c:	0003988e 	.word	0x0003988e
 8007420:	000bb679 	.word	0x000bb679
 8007424:	080080c0 	.word	0x080080c0
 8007428:	3ff00000 	.word	0x3ff00000
 800742c:	40080000 	.word	0x40080000
 8007430:	080080e0 	.word	0x080080e0
 8007434:	080080d0 	.word	0x080080d0
 8007438:	a3b4      	add	r3, pc, #720	; (adr r3, 800770c <__ieee754_pow+0xa14>)
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	4640      	mov	r0, r8
 8007440:	4649      	mov	r1, r9
 8007442:	f7f8 ff23 	bl	800028c <__adddf3>
 8007446:	4622      	mov	r2, r4
 8007448:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800744c:	462b      	mov	r3, r5
 800744e:	4630      	mov	r0, r6
 8007450:	4639      	mov	r1, r7
 8007452:	f7f8 ff19 	bl	8000288 <__aeabi_dsub>
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800745e:	f7f9 fb5b 	bl	8000b18 <__aeabi_dcmpgt>
 8007462:	2800      	cmp	r0, #0
 8007464:	f47f adfe 	bne.w	8007064 <__ieee754_pow+0x36c>
 8007468:	4aa3      	ldr	r2, [pc, #652]	; (80076f8 <__ieee754_pow+0xa00>)
 800746a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800746e:	4293      	cmp	r3, r2
 8007470:	f340 810a 	ble.w	8007688 <__ieee754_pow+0x990>
 8007474:	151b      	asrs	r3, r3, #20
 8007476:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800747a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800747e:	fa4a f303 	asr.w	r3, sl, r3
 8007482:	445b      	add	r3, fp
 8007484:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007488:	4e9c      	ldr	r6, [pc, #624]	; (80076fc <__ieee754_pow+0xa04>)
 800748a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800748e:	4116      	asrs	r6, r2
 8007490:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007494:	2000      	movs	r0, #0
 8007496:	ea23 0106 	bic.w	r1, r3, r6
 800749a:	f1c2 0214 	rsb	r2, r2, #20
 800749e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80074a2:	fa4a fa02 	asr.w	sl, sl, r2
 80074a6:	f1bb 0f00 	cmp.w	fp, #0
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	4620      	mov	r0, r4
 80074b0:	4629      	mov	r1, r5
 80074b2:	bfb8      	it	lt
 80074b4:	f1ca 0a00 	rsblt	sl, sl, #0
 80074b8:	f7f8 fee6 	bl	8000288 <__aeabi_dsub>
 80074bc:	e9cd 0100 	strd	r0, r1, [sp]
 80074c0:	4642      	mov	r2, r8
 80074c2:	464b      	mov	r3, r9
 80074c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074c8:	f7f8 fee0 	bl	800028c <__adddf3>
 80074cc:	2000      	movs	r0, #0
 80074ce:	a378      	add	r3, pc, #480	; (adr r3, 80076b0 <__ieee754_pow+0x9b8>)
 80074d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d4:	4604      	mov	r4, r0
 80074d6:	460d      	mov	r5, r1
 80074d8:	f7f9 f88e 	bl	80005f8 <__aeabi_dmul>
 80074dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074e0:	4606      	mov	r6, r0
 80074e2:	460f      	mov	r7, r1
 80074e4:	4620      	mov	r0, r4
 80074e6:	4629      	mov	r1, r5
 80074e8:	f7f8 fece 	bl	8000288 <__aeabi_dsub>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	4640      	mov	r0, r8
 80074f2:	4649      	mov	r1, r9
 80074f4:	f7f8 fec8 	bl	8000288 <__aeabi_dsub>
 80074f8:	a36f      	add	r3, pc, #444	; (adr r3, 80076b8 <__ieee754_pow+0x9c0>)
 80074fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fe:	f7f9 f87b 	bl	80005f8 <__aeabi_dmul>
 8007502:	a36f      	add	r3, pc, #444	; (adr r3, 80076c0 <__ieee754_pow+0x9c8>)
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	4680      	mov	r8, r0
 800750a:	4689      	mov	r9, r1
 800750c:	4620      	mov	r0, r4
 800750e:	4629      	mov	r1, r5
 8007510:	f7f9 f872 	bl	80005f8 <__aeabi_dmul>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	4640      	mov	r0, r8
 800751a:	4649      	mov	r1, r9
 800751c:	f7f8 feb6 	bl	800028c <__adddf3>
 8007520:	4604      	mov	r4, r0
 8007522:	460d      	mov	r5, r1
 8007524:	4602      	mov	r2, r0
 8007526:	460b      	mov	r3, r1
 8007528:	4630      	mov	r0, r6
 800752a:	4639      	mov	r1, r7
 800752c:	f7f8 feae 	bl	800028c <__adddf3>
 8007530:	4632      	mov	r2, r6
 8007532:	463b      	mov	r3, r7
 8007534:	4680      	mov	r8, r0
 8007536:	4689      	mov	r9, r1
 8007538:	f7f8 fea6 	bl	8000288 <__aeabi_dsub>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4620      	mov	r0, r4
 8007542:	4629      	mov	r1, r5
 8007544:	f7f8 fea0 	bl	8000288 <__aeabi_dsub>
 8007548:	4642      	mov	r2, r8
 800754a:	4606      	mov	r6, r0
 800754c:	460f      	mov	r7, r1
 800754e:	464b      	mov	r3, r9
 8007550:	4640      	mov	r0, r8
 8007552:	4649      	mov	r1, r9
 8007554:	f7f9 f850 	bl	80005f8 <__aeabi_dmul>
 8007558:	a35b      	add	r3, pc, #364	; (adr r3, 80076c8 <__ieee754_pow+0x9d0>)
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	4604      	mov	r4, r0
 8007560:	460d      	mov	r5, r1
 8007562:	f7f9 f849 	bl	80005f8 <__aeabi_dmul>
 8007566:	a35a      	add	r3, pc, #360	; (adr r3, 80076d0 <__ieee754_pow+0x9d8>)
 8007568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756c:	f7f8 fe8c 	bl	8000288 <__aeabi_dsub>
 8007570:	4622      	mov	r2, r4
 8007572:	462b      	mov	r3, r5
 8007574:	f7f9 f840 	bl	80005f8 <__aeabi_dmul>
 8007578:	a357      	add	r3, pc, #348	; (adr r3, 80076d8 <__ieee754_pow+0x9e0>)
 800757a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757e:	f7f8 fe85 	bl	800028c <__adddf3>
 8007582:	4622      	mov	r2, r4
 8007584:	462b      	mov	r3, r5
 8007586:	f7f9 f837 	bl	80005f8 <__aeabi_dmul>
 800758a:	a355      	add	r3, pc, #340	; (adr r3, 80076e0 <__ieee754_pow+0x9e8>)
 800758c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007590:	f7f8 fe7a 	bl	8000288 <__aeabi_dsub>
 8007594:	4622      	mov	r2, r4
 8007596:	462b      	mov	r3, r5
 8007598:	f7f9 f82e 	bl	80005f8 <__aeabi_dmul>
 800759c:	a352      	add	r3, pc, #328	; (adr r3, 80076e8 <__ieee754_pow+0x9f0>)
 800759e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a2:	f7f8 fe73 	bl	800028c <__adddf3>
 80075a6:	4622      	mov	r2, r4
 80075a8:	462b      	mov	r3, r5
 80075aa:	f7f9 f825 	bl	80005f8 <__aeabi_dmul>
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	4640      	mov	r0, r8
 80075b4:	4649      	mov	r1, r9
 80075b6:	f7f8 fe67 	bl	8000288 <__aeabi_dsub>
 80075ba:	4604      	mov	r4, r0
 80075bc:	460d      	mov	r5, r1
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	4640      	mov	r0, r8
 80075c4:	4649      	mov	r1, r9
 80075c6:	f7f9 f817 	bl	80005f8 <__aeabi_dmul>
 80075ca:	2200      	movs	r2, #0
 80075cc:	e9cd 0100 	strd	r0, r1, [sp]
 80075d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075d4:	4620      	mov	r0, r4
 80075d6:	4629      	mov	r1, r5
 80075d8:	f7f8 fe56 	bl	8000288 <__aeabi_dsub>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075e4:	f7f9 f932 	bl	800084c <__aeabi_ddiv>
 80075e8:	4632      	mov	r2, r6
 80075ea:	4604      	mov	r4, r0
 80075ec:	460d      	mov	r5, r1
 80075ee:	463b      	mov	r3, r7
 80075f0:	4640      	mov	r0, r8
 80075f2:	4649      	mov	r1, r9
 80075f4:	f7f9 f800 	bl	80005f8 <__aeabi_dmul>
 80075f8:	4632      	mov	r2, r6
 80075fa:	463b      	mov	r3, r7
 80075fc:	f7f8 fe46 	bl	800028c <__adddf3>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4620      	mov	r0, r4
 8007606:	4629      	mov	r1, r5
 8007608:	f7f8 fe3e 	bl	8000288 <__aeabi_dsub>
 800760c:	4642      	mov	r2, r8
 800760e:	464b      	mov	r3, r9
 8007610:	f7f8 fe3a 	bl	8000288 <__aeabi_dsub>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	2000      	movs	r0, #0
 800761a:	4939      	ldr	r1, [pc, #228]	; (8007700 <__ieee754_pow+0xa08>)
 800761c:	f7f8 fe34 	bl	8000288 <__aeabi_dsub>
 8007620:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007624:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	da2f      	bge.n	800768e <__ieee754_pow+0x996>
 800762e:	4650      	mov	r0, sl
 8007630:	ec43 2b10 	vmov	d0, r2, r3
 8007634:	f000 fb60 	bl	8007cf8 <scalbn>
 8007638:	ec51 0b10 	vmov	r0, r1, d0
 800763c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007640:	f7ff bbf1 	b.w	8006e26 <__ieee754_pow+0x12e>
 8007644:	4b2f      	ldr	r3, [pc, #188]	; (8007704 <__ieee754_pow+0xa0c>)
 8007646:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800764a:	429e      	cmp	r6, r3
 800764c:	f77f af0c 	ble.w	8007468 <__ieee754_pow+0x770>
 8007650:	4b2d      	ldr	r3, [pc, #180]	; (8007708 <__ieee754_pow+0xa10>)
 8007652:	440b      	add	r3, r1
 8007654:	4303      	orrs	r3, r0
 8007656:	d00b      	beq.n	8007670 <__ieee754_pow+0x978>
 8007658:	a325      	add	r3, pc, #148	; (adr r3, 80076f0 <__ieee754_pow+0x9f8>)
 800765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007662:	f7f8 ffc9 	bl	80005f8 <__aeabi_dmul>
 8007666:	a322      	add	r3, pc, #136	; (adr r3, 80076f0 <__ieee754_pow+0x9f8>)
 8007668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766c:	f7ff bbdb 	b.w	8006e26 <__ieee754_pow+0x12e>
 8007670:	4622      	mov	r2, r4
 8007672:	462b      	mov	r3, r5
 8007674:	f7f8 fe08 	bl	8000288 <__aeabi_dsub>
 8007678:	4642      	mov	r2, r8
 800767a:	464b      	mov	r3, r9
 800767c:	f7f9 fa42 	bl	8000b04 <__aeabi_dcmpge>
 8007680:	2800      	cmp	r0, #0
 8007682:	f43f aef1 	beq.w	8007468 <__ieee754_pow+0x770>
 8007686:	e7e7      	b.n	8007658 <__ieee754_pow+0x960>
 8007688:	f04f 0a00 	mov.w	sl, #0
 800768c:	e718      	b.n	80074c0 <__ieee754_pow+0x7c8>
 800768e:	4621      	mov	r1, r4
 8007690:	e7d4      	b.n	800763c <__ieee754_pow+0x944>
 8007692:	2000      	movs	r0, #0
 8007694:	491a      	ldr	r1, [pc, #104]	; (8007700 <__ieee754_pow+0xa08>)
 8007696:	f7ff bb8f 	b.w	8006db8 <__ieee754_pow+0xc0>
 800769a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800769e:	f7ff bb8b 	b.w	8006db8 <__ieee754_pow+0xc0>
 80076a2:	4630      	mov	r0, r6
 80076a4:	4639      	mov	r1, r7
 80076a6:	f7ff bb87 	b.w	8006db8 <__ieee754_pow+0xc0>
 80076aa:	4693      	mov	fp, r2
 80076ac:	f7ff bb98 	b.w	8006de0 <__ieee754_pow+0xe8>
 80076b0:	00000000 	.word	0x00000000
 80076b4:	3fe62e43 	.word	0x3fe62e43
 80076b8:	fefa39ef 	.word	0xfefa39ef
 80076bc:	3fe62e42 	.word	0x3fe62e42
 80076c0:	0ca86c39 	.word	0x0ca86c39
 80076c4:	be205c61 	.word	0xbe205c61
 80076c8:	72bea4d0 	.word	0x72bea4d0
 80076cc:	3e663769 	.word	0x3e663769
 80076d0:	c5d26bf1 	.word	0xc5d26bf1
 80076d4:	3ebbbd41 	.word	0x3ebbbd41
 80076d8:	af25de2c 	.word	0xaf25de2c
 80076dc:	3f11566a 	.word	0x3f11566a
 80076e0:	16bebd93 	.word	0x16bebd93
 80076e4:	3f66c16c 	.word	0x3f66c16c
 80076e8:	5555553e 	.word	0x5555553e
 80076ec:	3fc55555 	.word	0x3fc55555
 80076f0:	c2f8f359 	.word	0xc2f8f359
 80076f4:	01a56e1f 	.word	0x01a56e1f
 80076f8:	3fe00000 	.word	0x3fe00000
 80076fc:	000fffff 	.word	0x000fffff
 8007700:	3ff00000 	.word	0x3ff00000
 8007704:	4090cbff 	.word	0x4090cbff
 8007708:	3f6f3400 	.word	0x3f6f3400
 800770c:	652b82fe 	.word	0x652b82fe
 8007710:	3c971547 	.word	0x3c971547

08007714 <__ieee754_sqrt>:
 8007714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007718:	4955      	ldr	r1, [pc, #340]	; (8007870 <__ieee754_sqrt+0x15c>)
 800771a:	ec55 4b10 	vmov	r4, r5, d0
 800771e:	43a9      	bics	r1, r5
 8007720:	462b      	mov	r3, r5
 8007722:	462a      	mov	r2, r5
 8007724:	d112      	bne.n	800774c <__ieee754_sqrt+0x38>
 8007726:	ee10 2a10 	vmov	r2, s0
 800772a:	ee10 0a10 	vmov	r0, s0
 800772e:	4629      	mov	r1, r5
 8007730:	f7f8 ff62 	bl	80005f8 <__aeabi_dmul>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	4620      	mov	r0, r4
 800773a:	4629      	mov	r1, r5
 800773c:	f7f8 fda6 	bl	800028c <__adddf3>
 8007740:	4604      	mov	r4, r0
 8007742:	460d      	mov	r5, r1
 8007744:	ec45 4b10 	vmov	d0, r4, r5
 8007748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800774c:	2d00      	cmp	r5, #0
 800774e:	ee10 0a10 	vmov	r0, s0
 8007752:	4621      	mov	r1, r4
 8007754:	dc0f      	bgt.n	8007776 <__ieee754_sqrt+0x62>
 8007756:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800775a:	4330      	orrs	r0, r6
 800775c:	d0f2      	beq.n	8007744 <__ieee754_sqrt+0x30>
 800775e:	b155      	cbz	r5, 8007776 <__ieee754_sqrt+0x62>
 8007760:	ee10 2a10 	vmov	r2, s0
 8007764:	4620      	mov	r0, r4
 8007766:	4629      	mov	r1, r5
 8007768:	f7f8 fd8e 	bl	8000288 <__aeabi_dsub>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	f7f9 f86c 	bl	800084c <__aeabi_ddiv>
 8007774:	e7e4      	b.n	8007740 <__ieee754_sqrt+0x2c>
 8007776:	151b      	asrs	r3, r3, #20
 8007778:	d073      	beq.n	8007862 <__ieee754_sqrt+0x14e>
 800777a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800777e:	07dd      	lsls	r5, r3, #31
 8007780:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007784:	bf48      	it	mi
 8007786:	0fc8      	lsrmi	r0, r1, #31
 8007788:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800778c:	bf44      	itt	mi
 800778e:	0049      	lslmi	r1, r1, #1
 8007790:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8007794:	2500      	movs	r5, #0
 8007796:	1058      	asrs	r0, r3, #1
 8007798:	0fcb      	lsrs	r3, r1, #31
 800779a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800779e:	0049      	lsls	r1, r1, #1
 80077a0:	2316      	movs	r3, #22
 80077a2:	462c      	mov	r4, r5
 80077a4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80077a8:	19a7      	adds	r7, r4, r6
 80077aa:	4297      	cmp	r7, r2
 80077ac:	bfde      	ittt	le
 80077ae:	19bc      	addle	r4, r7, r6
 80077b0:	1bd2      	suble	r2, r2, r7
 80077b2:	19ad      	addle	r5, r5, r6
 80077b4:	0fcf      	lsrs	r7, r1, #31
 80077b6:	3b01      	subs	r3, #1
 80077b8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80077bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80077c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80077c4:	d1f0      	bne.n	80077a8 <__ieee754_sqrt+0x94>
 80077c6:	f04f 0c20 	mov.w	ip, #32
 80077ca:	469e      	mov	lr, r3
 80077cc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80077d0:	42a2      	cmp	r2, r4
 80077d2:	eb06 070e 	add.w	r7, r6, lr
 80077d6:	dc02      	bgt.n	80077de <__ieee754_sqrt+0xca>
 80077d8:	d112      	bne.n	8007800 <__ieee754_sqrt+0xec>
 80077da:	428f      	cmp	r7, r1
 80077dc:	d810      	bhi.n	8007800 <__ieee754_sqrt+0xec>
 80077de:	2f00      	cmp	r7, #0
 80077e0:	eb07 0e06 	add.w	lr, r7, r6
 80077e4:	da42      	bge.n	800786c <__ieee754_sqrt+0x158>
 80077e6:	f1be 0f00 	cmp.w	lr, #0
 80077ea:	db3f      	blt.n	800786c <__ieee754_sqrt+0x158>
 80077ec:	f104 0801 	add.w	r8, r4, #1
 80077f0:	1b12      	subs	r2, r2, r4
 80077f2:	428f      	cmp	r7, r1
 80077f4:	bf88      	it	hi
 80077f6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80077fa:	1bc9      	subs	r1, r1, r7
 80077fc:	4433      	add	r3, r6
 80077fe:	4644      	mov	r4, r8
 8007800:	0052      	lsls	r2, r2, #1
 8007802:	f1bc 0c01 	subs.w	ip, ip, #1
 8007806:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800780a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800780e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007812:	d1dd      	bne.n	80077d0 <__ieee754_sqrt+0xbc>
 8007814:	430a      	orrs	r2, r1
 8007816:	d006      	beq.n	8007826 <__ieee754_sqrt+0x112>
 8007818:	1c5c      	adds	r4, r3, #1
 800781a:	bf13      	iteet	ne
 800781c:	3301      	addne	r3, #1
 800781e:	3501      	addeq	r5, #1
 8007820:	4663      	moveq	r3, ip
 8007822:	f023 0301 	bicne.w	r3, r3, #1
 8007826:	106a      	asrs	r2, r5, #1
 8007828:	085b      	lsrs	r3, r3, #1
 800782a:	07e9      	lsls	r1, r5, #31
 800782c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007830:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007834:	bf48      	it	mi
 8007836:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800783a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800783e:	461c      	mov	r4, r3
 8007840:	e780      	b.n	8007744 <__ieee754_sqrt+0x30>
 8007842:	0aca      	lsrs	r2, r1, #11
 8007844:	3815      	subs	r0, #21
 8007846:	0549      	lsls	r1, r1, #21
 8007848:	2a00      	cmp	r2, #0
 800784a:	d0fa      	beq.n	8007842 <__ieee754_sqrt+0x12e>
 800784c:	02d6      	lsls	r6, r2, #11
 800784e:	d50a      	bpl.n	8007866 <__ieee754_sqrt+0x152>
 8007850:	f1c3 0420 	rsb	r4, r3, #32
 8007854:	fa21 f404 	lsr.w	r4, r1, r4
 8007858:	1e5d      	subs	r5, r3, #1
 800785a:	4099      	lsls	r1, r3
 800785c:	4322      	orrs	r2, r4
 800785e:	1b43      	subs	r3, r0, r5
 8007860:	e78b      	b.n	800777a <__ieee754_sqrt+0x66>
 8007862:	4618      	mov	r0, r3
 8007864:	e7f0      	b.n	8007848 <__ieee754_sqrt+0x134>
 8007866:	0052      	lsls	r2, r2, #1
 8007868:	3301      	adds	r3, #1
 800786a:	e7ef      	b.n	800784c <__ieee754_sqrt+0x138>
 800786c:	46a0      	mov	r8, r4
 800786e:	e7bf      	b.n	80077f0 <__ieee754_sqrt+0xdc>
 8007870:	7ff00000 	.word	0x7ff00000
 8007874:	00000000 	.word	0x00000000

08007878 <atan>:
 8007878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787c:	ec55 4b10 	vmov	r4, r5, d0
 8007880:	4bc3      	ldr	r3, [pc, #780]	; (8007b90 <atan+0x318>)
 8007882:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007886:	429e      	cmp	r6, r3
 8007888:	46ab      	mov	fp, r5
 800788a:	dd18      	ble.n	80078be <atan+0x46>
 800788c:	4bc1      	ldr	r3, [pc, #772]	; (8007b94 <atan+0x31c>)
 800788e:	429e      	cmp	r6, r3
 8007890:	dc01      	bgt.n	8007896 <atan+0x1e>
 8007892:	d109      	bne.n	80078a8 <atan+0x30>
 8007894:	b144      	cbz	r4, 80078a8 <atan+0x30>
 8007896:	4622      	mov	r2, r4
 8007898:	462b      	mov	r3, r5
 800789a:	4620      	mov	r0, r4
 800789c:	4629      	mov	r1, r5
 800789e:	f7f8 fcf5 	bl	800028c <__adddf3>
 80078a2:	4604      	mov	r4, r0
 80078a4:	460d      	mov	r5, r1
 80078a6:	e006      	b.n	80078b6 <atan+0x3e>
 80078a8:	f1bb 0f00 	cmp.w	fp, #0
 80078ac:	f340 8131 	ble.w	8007b12 <atan+0x29a>
 80078b0:	a59b      	add	r5, pc, #620	; (adr r5, 8007b20 <atan+0x2a8>)
 80078b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80078b6:	ec45 4b10 	vmov	d0, r4, r5
 80078ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078be:	4bb6      	ldr	r3, [pc, #728]	; (8007b98 <atan+0x320>)
 80078c0:	429e      	cmp	r6, r3
 80078c2:	dc14      	bgt.n	80078ee <atan+0x76>
 80078c4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80078c8:	429e      	cmp	r6, r3
 80078ca:	dc0d      	bgt.n	80078e8 <atan+0x70>
 80078cc:	a396      	add	r3, pc, #600	; (adr r3, 8007b28 <atan+0x2b0>)
 80078ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d2:	ee10 0a10 	vmov	r0, s0
 80078d6:	4629      	mov	r1, r5
 80078d8:	f7f8 fcd8 	bl	800028c <__adddf3>
 80078dc:	2200      	movs	r2, #0
 80078de:	4baf      	ldr	r3, [pc, #700]	; (8007b9c <atan+0x324>)
 80078e0:	f7f9 f91a 	bl	8000b18 <__aeabi_dcmpgt>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d1e6      	bne.n	80078b6 <atan+0x3e>
 80078e8:	f04f 3aff 	mov.w	sl, #4294967295
 80078ec:	e02b      	b.n	8007946 <atan+0xce>
 80078ee:	f000 f963 	bl	8007bb8 <fabs>
 80078f2:	4bab      	ldr	r3, [pc, #684]	; (8007ba0 <atan+0x328>)
 80078f4:	429e      	cmp	r6, r3
 80078f6:	ec55 4b10 	vmov	r4, r5, d0
 80078fa:	f300 80bf 	bgt.w	8007a7c <atan+0x204>
 80078fe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007902:	429e      	cmp	r6, r3
 8007904:	f300 80a0 	bgt.w	8007a48 <atan+0x1d0>
 8007908:	ee10 2a10 	vmov	r2, s0
 800790c:	ee10 0a10 	vmov	r0, s0
 8007910:	462b      	mov	r3, r5
 8007912:	4629      	mov	r1, r5
 8007914:	f7f8 fcba 	bl	800028c <__adddf3>
 8007918:	2200      	movs	r2, #0
 800791a:	4ba0      	ldr	r3, [pc, #640]	; (8007b9c <atan+0x324>)
 800791c:	f7f8 fcb4 	bl	8000288 <__aeabi_dsub>
 8007920:	2200      	movs	r2, #0
 8007922:	4606      	mov	r6, r0
 8007924:	460f      	mov	r7, r1
 8007926:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800792a:	4620      	mov	r0, r4
 800792c:	4629      	mov	r1, r5
 800792e:	f7f8 fcad 	bl	800028c <__adddf3>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4630      	mov	r0, r6
 8007938:	4639      	mov	r1, r7
 800793a:	f7f8 ff87 	bl	800084c <__aeabi_ddiv>
 800793e:	f04f 0a00 	mov.w	sl, #0
 8007942:	4604      	mov	r4, r0
 8007944:	460d      	mov	r5, r1
 8007946:	4622      	mov	r2, r4
 8007948:	462b      	mov	r3, r5
 800794a:	4620      	mov	r0, r4
 800794c:	4629      	mov	r1, r5
 800794e:	f7f8 fe53 	bl	80005f8 <__aeabi_dmul>
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4680      	mov	r8, r0
 8007958:	4689      	mov	r9, r1
 800795a:	f7f8 fe4d 	bl	80005f8 <__aeabi_dmul>
 800795e:	a374      	add	r3, pc, #464	; (adr r3, 8007b30 <atan+0x2b8>)
 8007960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007964:	4606      	mov	r6, r0
 8007966:	460f      	mov	r7, r1
 8007968:	f7f8 fe46 	bl	80005f8 <__aeabi_dmul>
 800796c:	a372      	add	r3, pc, #456	; (adr r3, 8007b38 <atan+0x2c0>)
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	f7f8 fc8b 	bl	800028c <__adddf3>
 8007976:	4632      	mov	r2, r6
 8007978:	463b      	mov	r3, r7
 800797a:	f7f8 fe3d 	bl	80005f8 <__aeabi_dmul>
 800797e:	a370      	add	r3, pc, #448	; (adr r3, 8007b40 <atan+0x2c8>)
 8007980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007984:	f7f8 fc82 	bl	800028c <__adddf3>
 8007988:	4632      	mov	r2, r6
 800798a:	463b      	mov	r3, r7
 800798c:	f7f8 fe34 	bl	80005f8 <__aeabi_dmul>
 8007990:	a36d      	add	r3, pc, #436	; (adr r3, 8007b48 <atan+0x2d0>)
 8007992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007996:	f7f8 fc79 	bl	800028c <__adddf3>
 800799a:	4632      	mov	r2, r6
 800799c:	463b      	mov	r3, r7
 800799e:	f7f8 fe2b 	bl	80005f8 <__aeabi_dmul>
 80079a2:	a36b      	add	r3, pc, #428	; (adr r3, 8007b50 <atan+0x2d8>)
 80079a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a8:	f7f8 fc70 	bl	800028c <__adddf3>
 80079ac:	4632      	mov	r2, r6
 80079ae:	463b      	mov	r3, r7
 80079b0:	f7f8 fe22 	bl	80005f8 <__aeabi_dmul>
 80079b4:	a368      	add	r3, pc, #416	; (adr r3, 8007b58 <atan+0x2e0>)
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	f7f8 fc67 	bl	800028c <__adddf3>
 80079be:	4642      	mov	r2, r8
 80079c0:	464b      	mov	r3, r9
 80079c2:	f7f8 fe19 	bl	80005f8 <__aeabi_dmul>
 80079c6:	a366      	add	r3, pc, #408	; (adr r3, 8007b60 <atan+0x2e8>)
 80079c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079cc:	4680      	mov	r8, r0
 80079ce:	4689      	mov	r9, r1
 80079d0:	4630      	mov	r0, r6
 80079d2:	4639      	mov	r1, r7
 80079d4:	f7f8 fe10 	bl	80005f8 <__aeabi_dmul>
 80079d8:	a363      	add	r3, pc, #396	; (adr r3, 8007b68 <atan+0x2f0>)
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	f7f8 fc53 	bl	8000288 <__aeabi_dsub>
 80079e2:	4632      	mov	r2, r6
 80079e4:	463b      	mov	r3, r7
 80079e6:	f7f8 fe07 	bl	80005f8 <__aeabi_dmul>
 80079ea:	a361      	add	r3, pc, #388	; (adr r3, 8007b70 <atan+0x2f8>)
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	f7f8 fc4a 	bl	8000288 <__aeabi_dsub>
 80079f4:	4632      	mov	r2, r6
 80079f6:	463b      	mov	r3, r7
 80079f8:	f7f8 fdfe 	bl	80005f8 <__aeabi_dmul>
 80079fc:	a35e      	add	r3, pc, #376	; (adr r3, 8007b78 <atan+0x300>)
 80079fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a02:	f7f8 fc41 	bl	8000288 <__aeabi_dsub>
 8007a06:	4632      	mov	r2, r6
 8007a08:	463b      	mov	r3, r7
 8007a0a:	f7f8 fdf5 	bl	80005f8 <__aeabi_dmul>
 8007a0e:	a35c      	add	r3, pc, #368	; (adr r3, 8007b80 <atan+0x308>)
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	f7f8 fc38 	bl	8000288 <__aeabi_dsub>
 8007a18:	4632      	mov	r2, r6
 8007a1a:	463b      	mov	r3, r7
 8007a1c:	f7f8 fdec 	bl	80005f8 <__aeabi_dmul>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	4640      	mov	r0, r8
 8007a26:	4649      	mov	r1, r9
 8007a28:	f7f8 fc30 	bl	800028c <__adddf3>
 8007a2c:	4622      	mov	r2, r4
 8007a2e:	462b      	mov	r3, r5
 8007a30:	f7f8 fde2 	bl	80005f8 <__aeabi_dmul>
 8007a34:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	d14b      	bne.n	8007ad6 <atan+0x25e>
 8007a3e:	4620      	mov	r0, r4
 8007a40:	4629      	mov	r1, r5
 8007a42:	f7f8 fc21 	bl	8000288 <__aeabi_dsub>
 8007a46:	e72c      	b.n	80078a2 <atan+0x2a>
 8007a48:	ee10 0a10 	vmov	r0, s0
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	4b53      	ldr	r3, [pc, #332]	; (8007b9c <atan+0x324>)
 8007a50:	4629      	mov	r1, r5
 8007a52:	f7f8 fc19 	bl	8000288 <__aeabi_dsub>
 8007a56:	2200      	movs	r2, #0
 8007a58:	4606      	mov	r6, r0
 8007a5a:	460f      	mov	r7, r1
 8007a5c:	4b4f      	ldr	r3, [pc, #316]	; (8007b9c <atan+0x324>)
 8007a5e:	4620      	mov	r0, r4
 8007a60:	4629      	mov	r1, r5
 8007a62:	f7f8 fc13 	bl	800028c <__adddf3>
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	4639      	mov	r1, r7
 8007a6e:	f7f8 feed 	bl	800084c <__aeabi_ddiv>
 8007a72:	f04f 0a01 	mov.w	sl, #1
 8007a76:	4604      	mov	r4, r0
 8007a78:	460d      	mov	r5, r1
 8007a7a:	e764      	b.n	8007946 <atan+0xce>
 8007a7c:	4b49      	ldr	r3, [pc, #292]	; (8007ba4 <atan+0x32c>)
 8007a7e:	429e      	cmp	r6, r3
 8007a80:	dc1d      	bgt.n	8007abe <atan+0x246>
 8007a82:	ee10 0a10 	vmov	r0, s0
 8007a86:	2200      	movs	r2, #0
 8007a88:	4b47      	ldr	r3, [pc, #284]	; (8007ba8 <atan+0x330>)
 8007a8a:	4629      	mov	r1, r5
 8007a8c:	f7f8 fbfc 	bl	8000288 <__aeabi_dsub>
 8007a90:	2200      	movs	r2, #0
 8007a92:	4606      	mov	r6, r0
 8007a94:	460f      	mov	r7, r1
 8007a96:	4b44      	ldr	r3, [pc, #272]	; (8007ba8 <atan+0x330>)
 8007a98:	4620      	mov	r0, r4
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	f7f8 fdac 	bl	80005f8 <__aeabi_dmul>
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	4b3e      	ldr	r3, [pc, #248]	; (8007b9c <atan+0x324>)
 8007aa4:	f7f8 fbf2 	bl	800028c <__adddf3>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	4630      	mov	r0, r6
 8007aae:	4639      	mov	r1, r7
 8007ab0:	f7f8 fecc 	bl	800084c <__aeabi_ddiv>
 8007ab4:	f04f 0a02 	mov.w	sl, #2
 8007ab8:	4604      	mov	r4, r0
 8007aba:	460d      	mov	r5, r1
 8007abc:	e743      	b.n	8007946 <atan+0xce>
 8007abe:	462b      	mov	r3, r5
 8007ac0:	ee10 2a10 	vmov	r2, s0
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	4939      	ldr	r1, [pc, #228]	; (8007bac <atan+0x334>)
 8007ac8:	f7f8 fec0 	bl	800084c <__aeabi_ddiv>
 8007acc:	f04f 0a03 	mov.w	sl, #3
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	460d      	mov	r5, r1
 8007ad4:	e737      	b.n	8007946 <atan+0xce>
 8007ad6:	4b36      	ldr	r3, [pc, #216]	; (8007bb0 <atan+0x338>)
 8007ad8:	4e36      	ldr	r6, [pc, #216]	; (8007bb4 <atan+0x33c>)
 8007ada:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8007ade:	4456      	add	r6, sl
 8007ae0:	449a      	add	sl, r3
 8007ae2:	e9da 2300 	ldrd	r2, r3, [sl]
 8007ae6:	f7f8 fbcf 	bl	8000288 <__aeabi_dsub>
 8007aea:	4622      	mov	r2, r4
 8007aec:	462b      	mov	r3, r5
 8007aee:	f7f8 fbcb 	bl	8000288 <__aeabi_dsub>
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007afa:	f7f8 fbc5 	bl	8000288 <__aeabi_dsub>
 8007afe:	f1bb 0f00 	cmp.w	fp, #0
 8007b02:	4604      	mov	r4, r0
 8007b04:	460d      	mov	r5, r1
 8007b06:	f6bf aed6 	bge.w	80078b6 <atan+0x3e>
 8007b0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b0e:	461d      	mov	r5, r3
 8007b10:	e6d1      	b.n	80078b6 <atan+0x3e>
 8007b12:	a51d      	add	r5, pc, #116	; (adr r5, 8007b88 <atan+0x310>)
 8007b14:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007b18:	e6cd      	b.n	80078b6 <atan+0x3e>
 8007b1a:	bf00      	nop
 8007b1c:	f3af 8000 	nop.w
 8007b20:	54442d18 	.word	0x54442d18
 8007b24:	3ff921fb 	.word	0x3ff921fb
 8007b28:	8800759c 	.word	0x8800759c
 8007b2c:	7e37e43c 	.word	0x7e37e43c
 8007b30:	e322da11 	.word	0xe322da11
 8007b34:	3f90ad3a 	.word	0x3f90ad3a
 8007b38:	24760deb 	.word	0x24760deb
 8007b3c:	3fa97b4b 	.word	0x3fa97b4b
 8007b40:	a0d03d51 	.word	0xa0d03d51
 8007b44:	3fb10d66 	.word	0x3fb10d66
 8007b48:	c54c206e 	.word	0xc54c206e
 8007b4c:	3fb745cd 	.word	0x3fb745cd
 8007b50:	920083ff 	.word	0x920083ff
 8007b54:	3fc24924 	.word	0x3fc24924
 8007b58:	5555550d 	.word	0x5555550d
 8007b5c:	3fd55555 	.word	0x3fd55555
 8007b60:	2c6a6c2f 	.word	0x2c6a6c2f
 8007b64:	bfa2b444 	.word	0xbfa2b444
 8007b68:	52defd9a 	.word	0x52defd9a
 8007b6c:	3fadde2d 	.word	0x3fadde2d
 8007b70:	af749a6d 	.word	0xaf749a6d
 8007b74:	3fb3b0f2 	.word	0x3fb3b0f2
 8007b78:	fe231671 	.word	0xfe231671
 8007b7c:	3fbc71c6 	.word	0x3fbc71c6
 8007b80:	9998ebc4 	.word	0x9998ebc4
 8007b84:	3fc99999 	.word	0x3fc99999
 8007b88:	54442d18 	.word	0x54442d18
 8007b8c:	bff921fb 	.word	0xbff921fb
 8007b90:	440fffff 	.word	0x440fffff
 8007b94:	7ff00000 	.word	0x7ff00000
 8007b98:	3fdbffff 	.word	0x3fdbffff
 8007b9c:	3ff00000 	.word	0x3ff00000
 8007ba0:	3ff2ffff 	.word	0x3ff2ffff
 8007ba4:	40037fff 	.word	0x40037fff
 8007ba8:	3ff80000 	.word	0x3ff80000
 8007bac:	bff00000 	.word	0xbff00000
 8007bb0:	08008110 	.word	0x08008110
 8007bb4:	080080f0 	.word	0x080080f0

08007bb8 <fabs>:
 8007bb8:	ec51 0b10 	vmov	r0, r1, d0
 8007bbc:	ee10 2a10 	vmov	r2, s0
 8007bc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007bc4:	ec43 2b10 	vmov	d0, r2, r3
 8007bc8:	4770      	bx	lr

08007bca <finite>:
 8007bca:	ee10 3a90 	vmov	r3, s1
 8007bce:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8007bd2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007bd6:	0fc0      	lsrs	r0, r0, #31
 8007bd8:	4770      	bx	lr

08007bda <matherr>:
 8007bda:	2000      	movs	r0, #0
 8007bdc:	4770      	bx	lr
	...

08007be0 <nan>:
 8007be0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007be8 <nan+0x8>
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	00000000 	.word	0x00000000
 8007bec:	7ff80000 	.word	0x7ff80000

08007bf0 <rint>:
 8007bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bf2:	ec51 0b10 	vmov	r0, r1, d0
 8007bf6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007bfa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007bfe:	2e13      	cmp	r6, #19
 8007c00:	460b      	mov	r3, r1
 8007c02:	ee10 4a10 	vmov	r4, s0
 8007c06:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007c0a:	dc56      	bgt.n	8007cba <rint+0xca>
 8007c0c:	2e00      	cmp	r6, #0
 8007c0e:	da2b      	bge.n	8007c68 <rint+0x78>
 8007c10:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007c14:	4302      	orrs	r2, r0
 8007c16:	d023      	beq.n	8007c60 <rint+0x70>
 8007c18:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007c1c:	4302      	orrs	r2, r0
 8007c1e:	4254      	negs	r4, r2
 8007c20:	4314      	orrs	r4, r2
 8007c22:	0c4b      	lsrs	r3, r1, #17
 8007c24:	0b24      	lsrs	r4, r4, #12
 8007c26:	045b      	lsls	r3, r3, #17
 8007c28:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007c2c:	ea44 0103 	orr.w	r1, r4, r3
 8007c30:	460b      	mov	r3, r1
 8007c32:	492f      	ldr	r1, [pc, #188]	; (8007cf0 <rint+0x100>)
 8007c34:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8007c38:	e9d1 6700 	ldrd	r6, r7, [r1]
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	4639      	mov	r1, r7
 8007c40:	4630      	mov	r0, r6
 8007c42:	f7f8 fb23 	bl	800028c <__adddf3>
 8007c46:	e9cd 0100 	strd	r0, r1, [sp]
 8007c4a:	463b      	mov	r3, r7
 8007c4c:	4632      	mov	r2, r6
 8007c4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c52:	f7f8 fb19 	bl	8000288 <__aeabi_dsub>
 8007c56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007c5a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007c5e:	4639      	mov	r1, r7
 8007c60:	ec41 0b10 	vmov	d0, r0, r1
 8007c64:	b003      	add	sp, #12
 8007c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c68:	4a22      	ldr	r2, [pc, #136]	; (8007cf4 <rint+0x104>)
 8007c6a:	4132      	asrs	r2, r6
 8007c6c:	ea01 0702 	and.w	r7, r1, r2
 8007c70:	4307      	orrs	r7, r0
 8007c72:	d0f5      	beq.n	8007c60 <rint+0x70>
 8007c74:	0852      	lsrs	r2, r2, #1
 8007c76:	4011      	ands	r1, r2
 8007c78:	430c      	orrs	r4, r1
 8007c7a:	d00b      	beq.n	8007c94 <rint+0xa4>
 8007c7c:	ea23 0202 	bic.w	r2, r3, r2
 8007c80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007c84:	2e13      	cmp	r6, #19
 8007c86:	fa43 f306 	asr.w	r3, r3, r6
 8007c8a:	bf0c      	ite	eq
 8007c8c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007c90:	2400      	movne	r4, #0
 8007c92:	4313      	orrs	r3, r2
 8007c94:	4916      	ldr	r1, [pc, #88]	; (8007cf0 <rint+0x100>)
 8007c96:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007c9a:	4622      	mov	r2, r4
 8007c9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	f7f8 faf2 	bl	800028c <__adddf3>
 8007ca8:	e9cd 0100 	strd	r0, r1, [sp]
 8007cac:	4622      	mov	r2, r4
 8007cae:	462b      	mov	r3, r5
 8007cb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cb4:	f7f8 fae8 	bl	8000288 <__aeabi_dsub>
 8007cb8:	e7d2      	b.n	8007c60 <rint+0x70>
 8007cba:	2e33      	cmp	r6, #51	; 0x33
 8007cbc:	dd07      	ble.n	8007cce <rint+0xde>
 8007cbe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007cc2:	d1cd      	bne.n	8007c60 <rint+0x70>
 8007cc4:	ee10 2a10 	vmov	r2, s0
 8007cc8:	f7f8 fae0 	bl	800028c <__adddf3>
 8007ccc:	e7c8      	b.n	8007c60 <rint+0x70>
 8007cce:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8007cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd6:	40f2      	lsrs	r2, r6
 8007cd8:	4210      	tst	r0, r2
 8007cda:	d0c1      	beq.n	8007c60 <rint+0x70>
 8007cdc:	0852      	lsrs	r2, r2, #1
 8007cde:	4210      	tst	r0, r2
 8007ce0:	bf1f      	itttt	ne
 8007ce2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007ce6:	ea20 0202 	bicne.w	r2, r0, r2
 8007cea:	4134      	asrne	r4, r6
 8007cec:	4314      	orrne	r4, r2
 8007cee:	e7d1      	b.n	8007c94 <rint+0xa4>
 8007cf0:	08008130 	.word	0x08008130
 8007cf4:	000fffff 	.word	0x000fffff

08007cf8 <scalbn>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	ec55 4b10 	vmov	r4, r5, d0
 8007cfe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007d02:	4606      	mov	r6, r0
 8007d04:	462b      	mov	r3, r5
 8007d06:	b9aa      	cbnz	r2, 8007d34 <scalbn+0x3c>
 8007d08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007d0c:	4323      	orrs	r3, r4
 8007d0e:	d03b      	beq.n	8007d88 <scalbn+0x90>
 8007d10:	4b31      	ldr	r3, [pc, #196]	; (8007dd8 <scalbn+0xe0>)
 8007d12:	4629      	mov	r1, r5
 8007d14:	2200      	movs	r2, #0
 8007d16:	ee10 0a10 	vmov	r0, s0
 8007d1a:	f7f8 fc6d 	bl	80005f8 <__aeabi_dmul>
 8007d1e:	4b2f      	ldr	r3, [pc, #188]	; (8007ddc <scalbn+0xe4>)
 8007d20:	429e      	cmp	r6, r3
 8007d22:	4604      	mov	r4, r0
 8007d24:	460d      	mov	r5, r1
 8007d26:	da12      	bge.n	8007d4e <scalbn+0x56>
 8007d28:	a327      	add	r3, pc, #156	; (adr r3, 8007dc8 <scalbn+0xd0>)
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	f7f8 fc63 	bl	80005f8 <__aeabi_dmul>
 8007d32:	e009      	b.n	8007d48 <scalbn+0x50>
 8007d34:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007d38:	428a      	cmp	r2, r1
 8007d3a:	d10c      	bne.n	8007d56 <scalbn+0x5e>
 8007d3c:	ee10 2a10 	vmov	r2, s0
 8007d40:	4620      	mov	r0, r4
 8007d42:	4629      	mov	r1, r5
 8007d44:	f7f8 faa2 	bl	800028c <__adddf3>
 8007d48:	4604      	mov	r4, r0
 8007d4a:	460d      	mov	r5, r1
 8007d4c:	e01c      	b.n	8007d88 <scalbn+0x90>
 8007d4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007d52:	460b      	mov	r3, r1
 8007d54:	3a36      	subs	r2, #54	; 0x36
 8007d56:	4432      	add	r2, r6
 8007d58:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007d5c:	428a      	cmp	r2, r1
 8007d5e:	dd0b      	ble.n	8007d78 <scalbn+0x80>
 8007d60:	ec45 4b11 	vmov	d1, r4, r5
 8007d64:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007dd0 <scalbn+0xd8>
 8007d68:	f000 f83c 	bl	8007de4 <copysign>
 8007d6c:	a318      	add	r3, pc, #96	; (adr r3, 8007dd0 <scalbn+0xd8>)
 8007d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d72:	ec51 0b10 	vmov	r0, r1, d0
 8007d76:	e7da      	b.n	8007d2e <scalbn+0x36>
 8007d78:	2a00      	cmp	r2, #0
 8007d7a:	dd08      	ble.n	8007d8e <scalbn+0x96>
 8007d7c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d80:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007d88:	ec45 4b10 	vmov	d0, r4, r5
 8007d8c:	bd70      	pop	{r4, r5, r6, pc}
 8007d8e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007d92:	da0d      	bge.n	8007db0 <scalbn+0xb8>
 8007d94:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007d98:	429e      	cmp	r6, r3
 8007d9a:	ec45 4b11 	vmov	d1, r4, r5
 8007d9e:	dce1      	bgt.n	8007d64 <scalbn+0x6c>
 8007da0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007dc8 <scalbn+0xd0>
 8007da4:	f000 f81e 	bl	8007de4 <copysign>
 8007da8:	a307      	add	r3, pc, #28	; (adr r3, 8007dc8 <scalbn+0xd0>)
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	e7e0      	b.n	8007d72 <scalbn+0x7a>
 8007db0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007db4:	3236      	adds	r2, #54	; 0x36
 8007db6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007dba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	4b06      	ldr	r3, [pc, #24]	; (8007de0 <scalbn+0xe8>)
 8007dc6:	e7b2      	b.n	8007d2e <scalbn+0x36>
 8007dc8:	c2f8f359 	.word	0xc2f8f359
 8007dcc:	01a56e1f 	.word	0x01a56e1f
 8007dd0:	8800759c 	.word	0x8800759c
 8007dd4:	7e37e43c 	.word	0x7e37e43c
 8007dd8:	43500000 	.word	0x43500000
 8007ddc:	ffff3cb0 	.word	0xffff3cb0
 8007de0:	3c900000 	.word	0x3c900000

08007de4 <copysign>:
 8007de4:	ec51 0b10 	vmov	r0, r1, d0
 8007de8:	ee11 0a90 	vmov	r0, s3
 8007dec:	ee10 2a10 	vmov	r2, s0
 8007df0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007df8:	ea41 0300 	orr.w	r3, r1, r0
 8007dfc:	ec43 2b10 	vmov	d0, r2, r3
 8007e00:	4770      	bx	lr
	...

08007e04 <_init>:
 8007e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e06:	bf00      	nop
 8007e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e0a:	bc08      	pop	{r3}
 8007e0c:	469e      	mov	lr, r3
 8007e0e:	4770      	bx	lr

08007e10 <_fini>:
 8007e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e12:	bf00      	nop
 8007e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e16:	bc08      	pop	{r3}
 8007e18:	469e      	mov	lr, r3
 8007e1a:	4770      	bx	lr
