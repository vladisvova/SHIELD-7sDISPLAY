
7sdisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ba4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08007d38  08007d38  00017d38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008058  08008058  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008058  08008058  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008058  08008058  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008058  08008058  00018058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800805c  0800805c  0001805c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  200001e0  08008240  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08008240  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba6c  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023d7  00000000  00000000  0002bc7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007d8  00000000  00000000  0002e058  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006d0  00000000  00000000  0002e830  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001793a  00000000  00000000  0002ef00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007fde  00000000  00000000  0004683a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075ae0  00000000  00000000  0004e818  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c42f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b24  00000000  00000000  000c4374  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d1c 	.word	0x08007d1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08007d1c 	.word	0x08007d1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	619a      	str	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <setDigitOne>:
#include "digits.h"
#include "main.h"

//TODO: dopln do lavicy funkcie

void setDigitOne(void){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

	//LL_GPIO_ResetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
	LL_GPIO_ResetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
 8000c84:	2110      	movs	r1, #16
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f7ff ffeb 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
 8000c8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c96:	f7ff ffe5 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit_3_GPIO_Port , digit_3_Pin);
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca0:	f7ff ffe0 	bl	8000c64 <LL_GPIO_ResetOutputPin>

	LL_GPIO_SetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <setDigitOne+0x30>)
 8000ca8:	f7ff ffce 	bl	8000c48 <LL_GPIO_SetOutputPin>
	//LL_GPIO_SetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
	//LL_GPIO_SetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
	//LL_GPIO_SetOutputPin(digit_3_GPIO_Port , digit_3_Pin);


}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	48000400 	.word	0x48000400

08000cb4 <setDigitTwo>:

void setDigitTwo(void){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
 8000cb8:	2101      	movs	r1, #1
 8000cba:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <setDigitTwo+0x30>)
 8000cbc:	f7ff ffd2 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
	LL_GPIO_ResetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
 8000cc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f7ff ffcc 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit_3_GPIO_Port , digit_3_Pin);
 8000ccc:	2104      	movs	r1, #4
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f7ff ffc7 	bl	8000c64 <LL_GPIO_ResetOutputPin>

	//LL_GPIO_SetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
	LL_GPIO_SetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
 8000cd6:	2110      	movs	r1, #16
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cdc:	f7ff ffb4 	bl	8000c48 <LL_GPIO_SetOutputPin>
	//LL_GPIO_SetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
	//LL_GPIO_SetOutputPin(digit_3_GPIO_Port , digit_3_Pin);


}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	48000400 	.word	0x48000400

08000ce8 <setDigitThree>:

void setDigitThree(void){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
 8000cec:	2101      	movs	r1, #1
 8000cee:	480a      	ldr	r0, [pc, #40]	; (8000d18 <setDigitThree+0x30>)
 8000cf0:	f7ff ffb8 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfa:	f7ff ffb3 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
	LL_GPIO_ResetOutputPin(digit_3_GPIO_Port , digit_3_Pin);
 8000cfe:	2104      	movs	r1, #4
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	f7ff ffae 	bl	8000c64 <LL_GPIO_ResetOutputPin>


	//LL_GPIO_SetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
	//LL_GPIO_SetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
	LL_GPIO_SetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
 8000d08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d10:	f7ff ff9a 	bl	8000c48 <LL_GPIO_SetOutputPin>
	//LL_GPIO_SetOutputPin(digit_3_GPIO_Port , digit_3_Pin);


}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	48000400 	.word	0x48000400

08000d1c <setDigitFour>:


void setDigitFour(void){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
 8000d20:	2101      	movs	r1, #1
 8000d22:	480a      	ldr	r0, [pc, #40]	; (8000d4c <setDigitFour+0x30>)
 8000d24:	f7ff ff9e 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
 8000d28:	2110      	movs	r1, #16
 8000d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2e:	f7ff ff99 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
 8000d32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3a:	f7ff ff93 	bl	8000c64 <LL_GPIO_ResetOutputPin>


	//LL_GPIO_SetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
	//LL_GPIO_SetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
	//LL_GPIO_SetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
	LL_GPIO_SetOutputPin(digit_3_GPIO_Port , digit_3_Pin);
 8000d3e:	2104      	movs	r1, #4
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f7ff ff80 	bl	8000c48 <LL_GPIO_SetOutputPin>


}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	48000400 	.word	0x48000400

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	4907      	ldr	r1, [pc, #28]	; (8000da4 <__NVIC_EnableIRQ+0x38>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e6e:	695a      	ldr	r2, [r3, #20]
 8000e70:	4907      	ldr	r1, [pc, #28]	; (8000e90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e7a:	695a      	ldr	r2, [r3, #20]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e82:	68fb      	ldr	r3, [r7, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	40021000 	.word	0x40021000

08000e94 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000e9e:	4a13      	ldr	r2, [pc, #76]	; (8000eec <LL_SYSCFG_SetEXTISource+0x58>)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	0c1b      	lsrs	r3, r3, #16
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	ea02 0103 	and.w	r1, r2, r3
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	0c1b      	lsrs	r3, r3, #16
 8000eb8:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	fa93 f3a3 	rbit	r3, r3
 8000ec0:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	fab3 f383 	clz	r3, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	461a      	mov	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	fa03 f202 	lsl.w	r2, r3, r2
 8000ed2:	4806      	ldr	r0, [pc, #24]	; (8000eec <LL_SYSCFG_SetEXTISource+0x58>)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	3302      	adds	r3, #2
 8000edc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	40010000 	.word	0x40010000

08000ef0 <LL_GPIO_SetPinMode>:
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa93 f3a3 	rbit	r3, r3
 8000f0a:	613b      	str	r3, [r7, #16]
  return result;
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	fab3 f383 	clz	r3, r3
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2103      	movs	r1, #3
 8000f18:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	401a      	ands	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	fa93 f3a3 	rbit	r3, r3
 8000f2a:	61bb      	str	r3, [r7, #24]
  return result;
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	fab3 f383 	clz	r3, r3
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	601a      	str	r2, [r3, #0]
}
 8000f42:	bf00      	nop
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <LL_GPIO_SetPinPull>:
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b089      	sub	sp, #36	; 0x24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	fa93 f3a3 	rbit	r3, r3
 8000f68:	613b      	str	r3, [r7, #16]
  return result;
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	fab3 f383 	clz	r3, r3
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2103      	movs	r1, #3
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	401a      	ands	r2, r3
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa93 f3a3 	rbit	r3, r3
 8000f88:	61bb      	str	r3, [r7, #24]
  return result;
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	fab3 f383 	clz	r3, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	60da      	str	r2, [r3, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3724      	adds	r7, #36	; 0x24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <LL_GPIO_ResetOutputPin>:
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000fea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000fee:	f7ff ff39 	bl	8000e64 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000ff2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ff6:	f7ff ff35 	bl	8000e64 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segment_B_Pin|segment_A_Pin|digit_3_Pin|segment_F_Pin
 8000ffa:	f641 119f 	movw	r1, #6559	; 0x199f
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001002:	f7ff ffd3 	bl	8000fac <LL_GPIO_ResetOutputPin>
                          |digit_1_Pin|digit_time_Pin|segment_C_Pin|segment_E_Pin
                          |digit_2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, digit_0_Pin|segment_DP_Pin|segment_G_Pin|segment_D_Pin);
 8001006:	2133      	movs	r1, #51	; 0x33
 8001008:	482b      	ldr	r0, [pc, #172]	; (80010b8 <MX_GPIO_Init+0xf0>)
 800100a:	f7ff ffcf 	bl	8000fac <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segment_B_Pin|segment_A_Pin|digit_3_Pin|segment_F_Pin
 800100e:	f641 139f 	movw	r3, #6559	; 0x199f
 8001012:	607b      	str	r3, [r7, #4]
                          |digit_1_Pin|digit_time_Pin|segment_C_Pin|segment_E_Pin
                          |digit_2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001014:	2301      	movs	r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	4619      	mov	r1, r3
 8001028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102c:	f001 f907 	bl	800223e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = digit_0_Pin|segment_DP_Pin|segment_G_Pin|segment_D_Pin;
 8001030:	2333      	movs	r3, #51	; 0x33
 8001032:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001034:	2301      	movs	r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4619      	mov	r1, r3
 8001048:	481b      	ldr	r0, [pc, #108]	; (80010b8 <MX_GPIO_Init+0xf0>)
 800104a:	f001 f8f8 	bl	800223e <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 800104e:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff ff1e 	bl	8000e94 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(button_GPIO_Port, button_Pin, LL_GPIO_PULL_NO);
 8001058:	2200      	movs	r2, #0
 800105a:	2108      	movs	r1, #8
 800105c:	4816      	ldr	r0, [pc, #88]	; (80010b8 <MX_GPIO_Init+0xf0>)
 800105e:	f7ff ff76 	bl	8000f4e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(button_GPIO_Port, button_Pin, LL_GPIO_MODE_INPUT);
 8001062:	2200      	movs	r2, #0
 8001064:	2108      	movs	r1, #8
 8001066:	4814      	ldr	r0, [pc, #80]	; (80010b8 <MX_GPIO_Init+0xf0>)
 8001068:	f7ff ff42 	bl	8000ef0 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 800106c:	2308      	movs	r3, #8
 800106e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001074:	2301      	movs	r3, #1
 8001076:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800107a:	2300      	movs	r3, #0
 800107c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001080:	2301      	movs	r3, #1
 8001082:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4618      	mov	r0, r3
 800108c:	f000 feea 	bl	8001e64 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001090:	f7ff fe5e 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8001094:	4603      	mov	r3, r0
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff feae 	bl	8000dfc <NVIC_EncodePriority>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4619      	mov	r1, r3
 80010a4:	2009      	movs	r0, #9
 80010a6:	f7ff fe7f 	bl	8000da8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 80010aa:	2009      	movs	r0, #9
 80010ac:	f7ff fe5e 	bl	8000d6c <__NVIC_EnableIRQ>

}
 80010b0:	bf00      	nop
 80010b2:	3728      	adds	r7, #40	; 0x28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	48000400 	.word	0x48000400

080010bc <__NVIC_GetPriorityGrouping>:
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_EnableIRQ>:
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db0b      	blt.n	8001102 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4907      	ldr	r1, [pc, #28]	; (8001110 <__NVIC_EnableIRQ+0x38>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f043 0201 	orr.w	r2, r3, #1
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	601a      	str	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	601a      	str	r2, [r3, #0]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 800122e:	b480      	push	{r7}
 8001230:	b085      	sub	sp, #20
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001242:	f023 0306 	bic.w	r3, r3, #6
 8001246:	68b9      	ldr	r1, [r7, #8]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	430a      	orrs	r2, r1
 800124c:	431a      	orrs	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	60da      	str	r2, [r3, #12]
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60da      	str	r2, [r3, #12]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f043 0204 	orr.w	r2, r3, #4
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	601a      	str	r2, [r3, #0]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f023 0204 	bic.w	r2, r3, #4
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	601a      	str	r2, [r3, #0]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d101      	bne.n	80012d6 <LL_I2C_IsActiveFlag_TXIS+0x18>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d101      	bne.n	80012fc <LL_I2C_IsActiveFlag_RXNE+0x18>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <LL_I2C_IsActiveFlag_RXNE+0x1a>
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f003 0320 	and.w	r3, r3, #32
 800131a:	2b20      	cmp	r3, #32
 800131c:	d101      	bne.n	8001322 <LL_I2C_IsActiveFlag_STOP+0x18>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	f043 0220 	orr.w	r2, r3, #32
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	61da      	str	r2, [r3, #28]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	605a      	str	r2, [r3, #4]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	0d5b      	lsrs	r3, r3, #21
 8001386:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <LL_I2C_HandleTransfer+0x48>)
 800138c:	430b      	orrs	r3, r1
 800138e:	43db      	mvns	r3, r3
 8001390:	401a      	ands	r2, r3
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4319      	orrs	r1, r3
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	041b      	lsls	r3, r3, #16
 800139c:	4319      	orrs	r1, r3
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	4319      	orrs	r1, r3
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	430b      	orrs	r3, r1
 80013a6:	431a      	orrs	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	03ff7bff 	.word	0x03ff7bff

080013bc <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	b2db      	uxtb	r3, r3
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80013e2:	78fa      	ldrb	r2, [r7, #3]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_AHB1_GRP1_EnableClock>:
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013fe:	695a      	ldr	r2, [r3, #20]
 8001400:	4907      	ldr	r1, [pc, #28]	; (8001420 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4313      	orrs	r3, r2
 8001406:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800140a:	695a      	ldr	r2, [r3, #20]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4013      	ands	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40021000 	.word	0x40021000

08001424 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <LL_APB1_GRP1_EnableClock+0x2c>)
 800142e:	69da      	ldr	r2, [r3, #28]
 8001430:	4907      	ldr	r1, [pc, #28]	; (8001450 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4313      	orrs	r3, r2
 8001436:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <LL_APB1_GRP1_EnableClock+0x2c>)
 800143a:	69da      	ldr	r2, [r3, #28]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4013      	ands	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40021000 	.word	0x40021000

08001454 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08e      	sub	sp, #56	; 0x38
 8001458:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]
 800146a:	615a      	str	r2, [r3, #20]
 800146c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
 800147c:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800147e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001482:	f7ff ffb7 	bl	80013f4 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001486:	23c0      	movs	r3, #192	; 0xc0
 8001488:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800148a:	2302      	movs	r3, #2
 800148c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001492:	2301      	movs	r3, #1
 8001494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001496:	2301      	movs	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800149a:	2304      	movs	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4821      	ldr	r0, [pc, #132]	; (8001528 <MX_I2C1_Init+0xd4>)
 80014a4:	f000 fecb 	bl	800223e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80014a8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80014ac:	f7ff ffba 	bl	8001424 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014b0:	f7ff fe04 	bl	80010bc <__NVIC_GetPriorityGrouping>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fe54 	bl	8001168 <NVIC_EncodePriority>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4619      	mov	r1, r3
 80014c4:	201f      	movs	r0, #31
 80014c6:	f7ff fe25 	bl	8001114 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014ca:	201f      	movs	r0, #31
 80014cc:	f7ff fe04 	bl	80010d8 <__NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80014d0:	4816      	ldr	r0, [pc, #88]	; (800152c <MX_I2C1_Init+0xd8>)
 80014d2:	f7ff ff3d 	bl	8001350 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80014d6:	4815      	ldr	r0, [pc, #84]	; (800152c <MX_I2C1_Init+0xd8>)
 80014d8:	f7ff fec1 	bl	800125e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80014dc:	4813      	ldr	r0, [pc, #76]	; (800152c <MX_I2C1_Init+0xd8>)
 80014de:	f7ff fe96 	bl	800120e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80014e2:	4812      	ldr	r0, [pc, #72]	; (800152c <MX_I2C1_Init+0xd8>)
 80014e4:	f7ff fe83 	bl	80011ee <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <MX_I2C1_Init+0xdc>)
 80014ee:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001500:	2300      	movs	r3, #0
 8001502:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	4619      	mov	r1, r3
 800150a:	4808      	ldr	r0, [pc, #32]	; (800152c <MX_I2C1_Init+0xd8>)
 800150c:	f000 ffaa 	bl	8002464 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_I2C1_Init+0xd8>)
 8001516:	f7ff fe8a 	bl	800122e <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 800151a:	4804      	ldr	r0, [pc, #16]	; (800152c <MX_I2C1_Init+0xd8>)
 800151c:	f7ff fe57 	bl	80011ce <LL_I2C_Enable>
}
 8001520:	bf00      	nop
 8001522:	3738      	adds	r7, #56	; 0x38
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	48000400 	.word	0x48000400
 800152c:	40005400 	.word	0x40005400
 8001530:	2000090e 	.word	0x2000090e

08001534 <i2c_master_write>:


void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b085      	sub	sp, #20
 8001538:	af02      	add	r7, sp, #8
 800153a:	4604      	mov	r4, r0
 800153c:	4608      	mov	r0, r1
 800153e:	4611      	mov	r1, r2
 8001540:	461a      	mov	r2, r3
 8001542:	4623      	mov	r3, r4
 8001544:	71fb      	strb	r3, [r7, #7]
 8001546:	4603      	mov	r3, r0
 8001548:	71bb      	strb	r3, [r7, #6]
 800154a:	460b      	mov	r3, r1
 800154c:	717b      	strb	r3, [r7, #5]
 800154e:	4613      	mov	r3, r2
 8001550:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8001552:	793b      	ldrb	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800155e:	71bb      	strb	r3, [r7, #6]
	}
//startovacia podmienka:
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001560:	7979      	ldrb	r1, [r7, #5]
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <i2c_master_write+0x80>)
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2302      	movs	r3, #2
 800156e:	2200      	movs	r2, #0
 8001570:	4811      	ldr	r0, [pc, #68]	; (80015b8 <i2c_master_write+0x84>)
 8001572:	f7ff fefd 	bl	8001370 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8001576:	79bb      	ldrb	r3, [r7, #6]
 8001578:	4619      	mov	r1, r3
 800157a:	480f      	ldr	r0, [pc, #60]	; (80015b8 <i2c_master_write+0x84>)
 800157c:	f7ff ff2b 	bl	80013d6 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001580:	e00a      	b.n	8001598 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001582:	480d      	ldr	r0, [pc, #52]	; (80015b8 <i2c_master_write+0x84>)
 8001584:	f7ff fe9b 	bl	80012be <LL_I2C_IsActiveFlag_TXIS>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d004      	beq.n	8001598 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	4619      	mov	r1, r3
 8001592:	4809      	ldr	r0, [pc, #36]	; (80015b8 <i2c_master_write+0x84>)
 8001594:	f7ff ff1f 	bl	80013d6 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001598:	4807      	ldr	r0, [pc, #28]	; (80015b8 <i2c_master_write+0x84>)
 800159a:	f7ff feb6 	bl	800130a <LL_I2C_IsActiveFlag_STOP>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0ee      	beq.n	8001582 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <i2c_master_write+0x84>)
 80015a6:	f7ff fec3 	bl	8001330 <LL_I2C_ClearFlag_STOP>
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}
 80015b2:	bf00      	nop
 80015b4:	80002000 	.word	0x80002000
 80015b8:	40005400 	.word	0x40005400

080015bc <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	4608      	mov	r0, r1
 80015c6:	4611      	mov	r1, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	70fb      	strb	r3, [r7, #3]
 80015ce:	460b      	mov	r3, r1
 80015d0:	70bb      	strb	r3, [r7, #2]
 80015d2:	4613      	mov	r3, r2
 80015d4:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 80015d6:	4a31      	ldr	r2, [pc, #196]	; (800169c <i2c_master_read+0xe0>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6013      	str	r3, [r2, #0]

	if(read_flag)
 80015dc:	7c3b      	ldrb	r3, [r7, #16]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 80015e2:	78bb      	ldrb	r3, [r7, #2]
 80015e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015e8:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 80015ea:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <i2c_master_read+0xe4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 80015f0:	482c      	ldr	r0, [pc, #176]	; (80016a4 <i2c_master_read+0xe8>)
 80015f2:	f7ff fe44 	bl	800127e <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80015f6:	7879      	ldrb	r1, [r7, #1]
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <i2c_master_read+0xec>)
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2301      	movs	r3, #1
 8001604:	2200      	movs	r2, #0
 8001606:	4827      	ldr	r0, [pc, #156]	; (80016a4 <i2c_master_read+0xe8>)
 8001608:	f7ff feb2 	bl	8001370 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800160c:	e00a      	b.n	8001624 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800160e:	4825      	ldr	r0, [pc, #148]	; (80016a4 <i2c_master_read+0xe8>)
 8001610:	f7ff fe55 	bl	80012be <LL_I2C_IsActiveFlag_TXIS>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d004      	beq.n	8001624 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 800161a:	78bb      	ldrb	r3, [r7, #2]
 800161c:	4619      	mov	r1, r3
 800161e:	4821      	ldr	r0, [pc, #132]	; (80016a4 <i2c_master_read+0xe8>)
 8001620:	f7ff fed9 	bl	80013d6 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001624:	481f      	ldr	r0, [pc, #124]	; (80016a4 <i2c_master_read+0xe8>)
 8001626:	f7ff fe70 	bl	800130a <LL_I2C_IsActiveFlag_STOP>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0ee      	beq.n	800160e <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001630:	481c      	ldr	r0, [pc, #112]	; (80016a4 <i2c_master_read+0xe8>)
 8001632:	f7ff fe7d 	bl	8001330 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8001636:	bf00      	nop
 8001638:	481a      	ldr	r0, [pc, #104]	; (80016a4 <i2c_master_read+0xe8>)
 800163a:	f7ff fe66 	bl	800130a <LL_I2C_IsActiveFlag_STOP>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f9      	bne.n	8001638 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001644:	7879      	ldrb	r1, [r7, #1]
 8001646:	78fa      	ldrb	r2, [r7, #3]
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <i2c_master_read+0xf0>)
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	4613      	mov	r3, r2
 8001654:	2200      	movs	r2, #0
 8001656:	4813      	ldr	r0, [pc, #76]	; (80016a4 <i2c_master_read+0xe8>)
 8001658:	f7ff fe8a 	bl	8001370 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800165c:	bf00      	nop
 800165e:	4811      	ldr	r0, [pc, #68]	; (80016a4 <i2c_master_read+0xe8>)
 8001660:	f7ff fe53 	bl	800130a <LL_I2C_IsActiveFlag_STOP>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f9      	beq.n	800165e <i2c_master_read+0xa2>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 800166a:	480e      	ldr	r0, [pc, #56]	; (80016a4 <i2c_master_read+0xe8>)
 800166c:	f7ff fe60 	bl	8001330 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001670:	480c      	ldr	r0, [pc, #48]	; (80016a4 <i2c_master_read+0xe8>)
 8001672:	f7ff fe14 	bl	800129e <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <i2c_master_read+0xe8>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <i2c_master_read+0xe8>)
 800167c:	f043 0310 	orr.w	r3, r3, #16
 8001680:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <i2c_master_read+0xf4>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <i2c_master_read+0xe4>)
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 800168e:	4b03      	ldr	r3, [pc, #12]	; (800169c <i2c_master_read+0xe0>)
 8001690:	681b      	ldr	r3, [r3, #0]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000214 	.word	0x20000214
 80016a0:	200001fc 	.word	0x200001fc
 80016a4:	40005400 	.word	0x40005400
 80016a8:	80002000 	.word	0x80002000
 80016ac:	80002400 	.word	0x80002400
 80016b0:	200001fd 	.word	0x200001fd

080016b4 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80016b4:	b598      	push	{r3, r4, r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80016b8:	4812      	ldr	r0, [pc, #72]	; (8001704 <I2C1_EV_IRQHandler+0x50>)
 80016ba:	f7ff fe13 	bl	80012e4 <LL_I2C_IsActiveFlag_RXNE>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d01c      	beq.n	80016fe <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 80016c4:	4b10      	ldr	r3, [pc, #64]	; (8001708 <I2C1_EV_IRQHandler+0x54>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <I2C1_EV_IRQHandler+0x58>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	1c59      	adds	r1, r3, #1
 80016d0:	b2c8      	uxtb	r0, r1
 80016d2:	490e      	ldr	r1, [pc, #56]	; (800170c <I2C1_EV_IRQHandler+0x58>)
 80016d4:	7008      	strb	r0, [r1, #0]
 80016d6:	18d4      	adds	r4, r2, r3
 80016d8:	480a      	ldr	r0, [pc, #40]	; (8001704 <I2C1_EV_IRQHandler+0x50>)
 80016da:	f7ff fe6f 	bl	80013bc <LL_I2C_ReceiveData8>
 80016de:	4603      	mov	r3, r0
 80016e0:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <I2C1_EV_IRQHandler+0x58>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b13      	cmp	r3, #19
 80016ea:	d903      	bls.n	80016f4 <I2C1_EV_IRQHandler+0x40>
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <I2C1_EV_IRQHandler+0x58>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
 80016f2:	e001      	b.n	80016f8 <I2C1_EV_IRQHandler+0x44>
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <I2C1_EV_IRQHandler+0x58>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <I2C1_EV_IRQHandler+0x5c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
	}
}
 80016fe:	bf00      	nop
 8001700:	bd98      	pop	{r3, r4, r7, pc}
 8001702:	bf00      	nop
 8001704:	40005400 	.word	0x40005400
 8001708:	20000214 	.word	0x20000214
 800170c:	200001fd 	.word	0x200001fd
 8001710:	200001fc 	.word	0x200001fc

08001714 <__NVIC_SetPriorityGrouping>:
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001730:	4013      	ands	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800173c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001746:	4a04      	ldr	r2, [pc, #16]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	60d3      	str	r3, [r2, #12]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <LL_RCC_HSI_Enable+0x1c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <LL_RCC_HSI_Enable+0x1c>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6013      	str	r3, [r2, #0]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000

0800177c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <LL_RCC_HSI_IsReady+0x20>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b02      	cmp	r3, #2
 800178a:	bf0c      	ite	eq
 800178c:	2301      	moveq	r3, #1
 800178e:	2300      	movne	r3, #0
 8001790:	b2db      	uxtb	r3, r3
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40021000 	.word	0x40021000

080017a0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4904      	ldr	r1, [pc, #16]	; (80017c8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000

080017cc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <LL_RCC_SetSysClkSource+0x24>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f023 0203 	bic.w	r2, r3, #3
 80017dc:	4904      	ldr	r1, [pc, #16]	; (80017f0 <LL_RCC_SetSysClkSource+0x24>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40021000 	.word	0x40021000

080017f4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <LL_RCC_GetSysClkSource+0x18>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 030c 	and.w	r3, r3, #12
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000

08001810 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <LL_RCC_SetAHBPrescaler+0x24>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001820:	4904      	ldr	r1, [pc, #16]	; (8001834 <LL_RCC_SetAHBPrescaler+0x24>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	40021000 	.word	0x40021000

08001838 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001848:	4904      	ldr	r1, [pc, #16]	; (800185c <LL_RCC_SetAPB1Prescaler+0x24>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40021000 	.word	0x40021000

08001860 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <LL_RCC_SetAPB2Prescaler+0x24>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001870:	4904      	ldr	r1, [pc, #16]	; (8001884 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	40021000 	.word	0x40021000

08001888 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <LL_RCC_SetI2CClockSource+0x2c>)
 8001892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	0e1b      	lsrs	r3, r3, #24
 8001898:	43db      	mvns	r3, r3
 800189a:	401a      	ands	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80018a2:	4904      	ldr	r1, [pc, #16]	; (80018b4 <LL_RCC_SetI2CClockSource+0x2c>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	630b      	str	r3, [r1, #48]	; 0x30
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	40021000 	.word	0x40021000

080018b8 <LL_APB1_GRP1_EnableClock>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018c2:	69da      	ldr	r2, [r3, #28]
 80018c4:	4907      	ldr	r1, [pc, #28]	; (80018e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018ce:	69da      	ldr	r2, [r3, #28]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4013      	ands	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	40021000 	.word	0x40021000

080018e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018f2:	699a      	ldr	r2, [r3, #24]
 80018f4:	4907      	ldr	r1, [pc, #28]	; (8001914 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018fe:	699a      	ldr	r2, [r3, #24]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4013      	ands	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	40021000 	.word	0x40021000

08001918 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <LL_FLASH_SetLatency+0x24>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f023 0207 	bic.w	r2, r3, #7
 8001928:	4904      	ldr	r1, [pc, #16]	; (800193c <LL_FLASH_SetLatency+0x24>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4313      	orrs	r3, r2
 800192e:	600b      	str	r3, [r1, #0]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40022000 	.word	0x40022000

08001940 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <LL_FLASH_GetLatency+0x18>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40022000 	.word	0x40022000

0800195c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001960:	2001      	movs	r0, #1
 8001962:	f7ff ffc1 	bl	80018e8 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001966:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800196a:	f7ff ffa5 	bl	80018b8 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196e:	2003      	movs	r0, #3
 8001970:	f7ff fed0 	bl	8001714 <__NVIC_SetPriorityGrouping>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001974:	f000 f80e 	bl	8001994 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001978:	f7ff fb26 	bl	8000fc8 <MX_GPIO_Init>
	MX_I2C1_Init();
 800197c:	f7ff fd6a 	bl	8001454 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	LBS25HB_init();
 8001980:	f002 fdb0 	bl	80044e4 <LBS25HB_init>
	lis3mdl_init();
 8001984:	f000 fee8 	bl	8002758 <lis3mdl_init>
	state_init();
 8001988:	f000 ff3c 	bl	8002804 <state_init>
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */

		processToDisplay();
 800198c:	f000 ff78 	bl	8002880 <processToDisplay>
 8001990:	e7fc      	b.n	800198c <main+0x30>
	...

08001994 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff ffbd 	bl	8001918 <LL_FLASH_SetLatency>
	while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800199e:	bf00      	nop
 80019a0:	f7ff ffce 	bl	8001940 <LL_FLASH_GetLatency>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1fa      	bne.n	80019a0 <SystemClock_Config+0xc>
	{
	}
	LL_RCC_HSI_Enable();
 80019aa:	f7ff fed7 	bl	800175c <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while(LL_RCC_HSI_IsReady() != 1)
 80019ae:	bf00      	nop
 80019b0:	f7ff fee4 	bl	800177c <LL_RCC_HSI_IsReady>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d1fa      	bne.n	80019b0 <SystemClock_Config+0x1c>
	{

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 80019ba:	2010      	movs	r0, #16
 80019bc:	f7ff fef0 	bl	80017a0 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80019c0:	2000      	movs	r0, #0
 80019c2:	f7ff ff25 	bl	8001810 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80019c6:	2000      	movs	r0, #0
 80019c8:	f7ff ff36 	bl	8001838 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80019cc:	2000      	movs	r0, #0
 80019ce:	f7ff ff47 	bl	8001860 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80019d2:	2000      	movs	r0, #0
 80019d4:	f7ff fefa 	bl	80017cc <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80019d8:	bf00      	nop
 80019da:	f7ff ff0b 	bl	80017f4 <LL_RCC_GetSysClkSource>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1fa      	bne.n	80019da <SystemClock_Config+0x46>
	{

	}
	LL_Init1msTick(8000000);
 80019e4:	4805      	ldr	r0, [pc, #20]	; (80019fc <SystemClock_Config+0x68>)
 80019e6:	f000 fd93 	bl	8002510 <LL_Init1msTick>
	LL_SetSystemCoreClock(8000000);
 80019ea:	4804      	ldr	r0, [pc, #16]	; (80019fc <SystemClock_Config+0x68>)
 80019ec:	f000 fdc2 	bl	8002574 <LL_SetSystemCoreClock>
	LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80019f0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80019f4:	f7ff ff48 	bl	8001888 <LL_RCC_SetI2CClockSource>
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	007a1200 	.word	0x007a1200

08001a00 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	bf0c      	ite	eq
 8001a16:	2301      	moveq	r3, #1
 8001a18:	2300      	movne	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	40010400 	.word	0x40010400

08001a2c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6153      	str	r3, [r2, #20]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40010400 	.word	0x40010400

08001a4c <LL_GPIO_IsInputPinSet>:
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691a      	ldr	r2, [r3, #16]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	bf0c      	ite	eq
 8001a64:	2301      	moveq	r3, #1
 8001a66:	2300      	movne	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  break;
 8001a88:	bf00      	nop
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <MemManage_Handler+0x4>

08001a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <BusFault_Handler+0x4>

08001aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <UsageFault_Handler+0x4>

08001aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	LL_mDelay(1);
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f000 fd21 	bl	800252c <LL_mDelay>
	if(LL_GPIO_IsInputPinSet(button_GPIO_Port, button_Pin)){
 8001aea:	2108      	movs	r1, #8
 8001aec:	480a      	ldr	r0, [pc, #40]	; (8001b18 <EXTI3_IRQHandler+0x38>)
 8001aee:	f7ff ffad 	bl	8001a4c <LL_GPIO_IsInputPinSet>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <EXTI3_IRQHandler+0x22>
		change_state();
 8001af8:	f000 fe92 	bl	8002820 <change_state>
		state_changed = true;
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <EXTI3_IRQHandler+0x3c>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8001b02:	2008      	movs	r0, #8
 8001b04:	f7ff ff7c 	bl	8001a00 <LL_EXTI_IsActiveFlag_0_31>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <EXTI3_IRQHandler+0x34>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8001b0e:	2008      	movs	r0, #8
 8001b10:	f7ff ff8c 	bl	8001a2c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	48000400 	.word	0x48000400
 8001b1c:	20000204 	.word	0x20000204

08001b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b28:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <_sbrk+0x5c>)
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <_sbrk+0x60>)
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d102      	bne.n	8001b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <_sbrk+0x64>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <_sbrk+0x68>)
 8001b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d207      	bcs.n	8001b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b50:	f002 fd68 	bl	8004624 <__errno>
 8001b54:	4602      	mov	r2, r0
 8001b56:	230c      	movs	r3, #12
 8001b58:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	e009      	b.n	8001b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <_sbrk+0x64>)
 8001b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b72:	68fb      	ldr	r3, [r7, #12]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20003000 	.word	0x20003000
 8001b80:	00000400 	.word	0x00000400
 8001b84:	20000200 	.word	0x20000200
 8001b88:	20000220 	.word	0x20000220

08001b8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <SystemInit+0x20>)
 8001b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <SystemInit+0x20>)
 8001b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb4:	480d      	ldr	r0, [pc, #52]	; (8001bec <LoopForever+0x6>)
  ldr r1, =_edata
 8001bb6:	490e      	ldr	r1, [pc, #56]	; (8001bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bb8:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <LoopForever+0xe>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bbc:	e002      	b.n	8001bc4 <LoopCopyDataInit>

08001bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc2:	3304      	adds	r3, #4

08001bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc8:	d3f9      	bcc.n	8001bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bca:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bcc:	4c0b      	ldr	r4, [pc, #44]	; (8001bfc <LoopForever+0x16>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd0:	e001      	b.n	8001bd6 <LoopFillZerobss>

08001bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd4:	3204      	adds	r2, #4

08001bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd8:	d3fb      	bcc.n	8001bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bda:	f7ff ffd7 	bl	8001b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bde:	f002 fd27 	bl	8004630 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001be2:	f7ff febb 	bl	800195c <main>

08001be6 <LoopForever>:

LoopForever:
    b LoopForever
 8001be6:	e7fe      	b.n	8001be6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001be8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001bf4:	08008060 	.word	0x08008060
  ldr r2, =_sbss
 8001bf8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001bfc:	20000220 	.word	0x20000220

08001c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c00:	e7fe      	b.n	8001c00 <ADC1_2_IRQHandler>
	...

08001c04 <LL_EXTI_EnableIT_0_31>:
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <LL_EXTI_EnableIT_0_31+0x20>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4904      	ldr	r1, [pc, #16]	; (8001c24 <LL_EXTI_EnableIT_0_31+0x20>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	40010400 	.word	0x40010400

08001c28 <LL_EXTI_EnableIT_32_63>:
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <LL_EXTI_EnableIT_32_63+0x20>)
 8001c32:	6a1a      	ldr	r2, [r3, #32]
 8001c34:	4904      	ldr	r1, [pc, #16]	; (8001c48 <LL_EXTI_EnableIT_32_63+0x20>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	620b      	str	r3, [r1, #32]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40010400 	.word	0x40010400

08001c4c <LL_EXTI_DisableIT_0_31>:
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <LL_EXTI_DisableIT_0_31+0x24>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	4904      	ldr	r1, [pc, #16]	; (8001c70 <LL_EXTI_DisableIT_0_31+0x24>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40010400 	.word	0x40010400

08001c74 <LL_EXTI_DisableIT_32_63>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <LL_EXTI_DisableIT_32_63+0x24>)
 8001c7e:	6a1a      	ldr	r2, [r3, #32]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	4904      	ldr	r1, [pc, #16]	; (8001c98 <LL_EXTI_DisableIT_32_63+0x24>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	620b      	str	r3, [r1, #32]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40010400 	.word	0x40010400

08001c9c <LL_EXTI_EnableEvent_0_31>:
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <LL_EXTI_EnableEvent_0_31+0x20>)
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4904      	ldr	r1, [pc, #16]	; (8001cbc <LL_EXTI_EnableEvent_0_31+0x20>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	40010400 	.word	0x40010400

08001cc0 <LL_EXTI_EnableEvent_32_63>:
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ccc:	4904      	ldr	r1, [pc, #16]	; (8001ce0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	40010400 	.word	0x40010400

08001ce4 <LL_EXTI_DisableEvent_0_31>:
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	4904      	ldr	r1, [pc, #16]	; (8001d08 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40010400 	.word	0x40010400

08001d0c <LL_EXTI_DisableEvent_32_63>:
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001d16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	4904      	ldr	r1, [pc, #16]	; (8001d30 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40010400 	.word	0x40010400

08001d34 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	4904      	ldr	r1, [pc, #16]	; (8001d54 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40010400 	.word	0x40010400

08001d58 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001d62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d64:	4904      	ldr	r1, [pc, #16]	; (8001d78 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	40010400 	.word	0x40010400

08001d7c <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	4904      	ldr	r1, [pc, #16]	; (8001da0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40010400 	.word	0x40010400

08001da4 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001dae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	4904      	ldr	r1, [pc, #16]	; (8001dc8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40010400 	.word	0x40010400

08001dcc <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	4904      	ldr	r1, [pc, #16]	; (8001dec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	60cb      	str	r3, [r1, #12]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40010400 	.word	0x40010400

08001df0 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dfc:	4904      	ldr	r1, [pc, #16]	; (8001e10 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	40010400 	.word	0x40010400

08001e14 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	4904      	ldr	r1, [pc, #16]	; (8001e38 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	60cb      	str	r3, [r1, #12]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40010400 	.word	0x40010400

08001e3c <LL_EXTI_DisableFallingTrig_32_63>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	4904      	ldr	r1, [pc, #16]	; (8001e60 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40010400 	.word	0x40010400

08001e64 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	7a1b      	ldrb	r3, [r3, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80c2 	beq.w	8001ffe <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d05b      	beq.n	8001f3a <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7a5b      	ldrb	r3, [r3, #9]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d00e      	beq.n	8001ea8 <LL_EXTI_Init+0x44>
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d017      	beq.n	8001ebe <LL_EXTI_Init+0x5a>
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d120      	bne.n	8001ed4 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ff24 	bl	8001ce4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff feaf 	bl	8001c04 <LL_EXTI_EnableIT_0_31>
          break;
 8001ea6:	e018      	b.n	8001eda <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fecd 	bl	8001c4c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fef0 	bl	8001c9c <LL_EXTI_EnableEvent_0_31>
          break;
 8001ebc:	e00d      	b.n	8001eda <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fe9e 	bl	8001c04 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fee5 	bl	8001c9c <LL_EXTI_EnableEvent_0_31>
          break;
 8001ed2:	e002      	b.n	8001eda <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
          break;
 8001ed8:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7a9b      	ldrb	r3, [r3, #10]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d02b      	beq.n	8001f3a <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7a9b      	ldrb	r3, [r3, #10]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d00e      	beq.n	8001f08 <LL_EXTI_Init+0xa4>
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d017      	beq.n	8001f1e <LL_EXTI_Init+0xba>
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d120      	bne.n	8001f34 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ff8c 	bl	8001e14 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff17 	bl	8001d34 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001f06:	e019      	b.n	8001f3c <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff35 	bl	8001d7c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff58 	bl	8001dcc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001f1c:	e00e      	b.n	8001f3c <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ff06 	bl	8001d34 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff4d 	bl	8001dcc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001f32:	e003      	b.n	8001f3c <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
            break;
 8001f38:	e000      	b.n	8001f3c <LL_EXTI_Init+0xd8>
        }
      }
 8001f3a:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d071      	beq.n	8002028 <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7a5b      	ldrb	r3, [r3, #9]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d00e      	beq.n	8001f6a <LL_EXTI_Init+0x106>
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d017      	beq.n	8001f80 <LL_EXTI_Init+0x11c>
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d120      	bne.n	8001f96 <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fed7 	bl	8001d0c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fe60 	bl	8001c28 <LL_EXTI_EnableIT_32_63>
          break;
 8001f68:	e018      	b.n	8001f9c <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fe80 	bl	8001c74 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fea1 	bl	8001cc0 <LL_EXTI_EnableEvent_32_63>
          break;
 8001f7e:	e00d      	b.n	8001f9c <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fe4f 	bl	8001c28 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fe96 	bl	8001cc0 <LL_EXTI_EnableEvent_32_63>
          break;
 8001f94:	e002      	b.n	8001f9c <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
          break;
 8001f9a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7a9b      	ldrb	r3, [r3, #10]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d041      	beq.n	8002028 <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	7a9b      	ldrb	r3, [r3, #10]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d00e      	beq.n	8001fca <LL_EXTI_Init+0x166>
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d017      	beq.n	8001fe0 <LL_EXTI_Init+0x17c>
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d120      	bne.n	8001ff6 <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff3f 	bl	8001e3c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fec8 	bl	8001d58 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001fc8:	e02f      	b.n	800202a <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fee8 	bl	8001da4 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff09 	bl	8001df0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001fde:	e024      	b.n	800202a <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff feb7 	bl	8001d58 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fefe 	bl	8001df0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001ff4:	e019      	b.n	800202a <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	73fb      	strb	r3, [r7, #15]
            break;
 8001ffa:	bf00      	nop
 8001ffc:	e015      	b.n	800202a <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fe22 	bl	8001c4c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fe69 	bl	8001ce4 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fe2c 	bl	8001c74 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fe73 	bl	8001d0c <LL_EXTI_DisableEvent_32_63>
 8002026:	e000      	b.n	800202a <LL_EXTI_Init+0x1c6>
      }
 8002028:	bf00      	nop
#endif
  }
  return status;
 800202a:	7bfb      	ldrb	r3, [r7, #15]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <LL_GPIO_SetPinMode>:
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	613b      	str	r3, [r7, #16]
  return result;
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2103      	movs	r1, #3
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	401a      	ands	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	61bb      	str	r3, [r7, #24]
  return result;
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	431a      	orrs	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	601a      	str	r2, [r3, #0]
}
 8002086:	bf00      	nop
 8002088:	3724      	adds	r7, #36	; 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_GPIO_SetPinOutputType>:
{
 8002092:	b480      	push	{r7}
 8002094:	b085      	sub	sp, #20
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	401a      	ands	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	fb01 f303 	mul.w	r3, r1, r3
 80020b0:	431a      	orrs	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	605a      	str	r2, [r3, #4]
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <LL_GPIO_SetPinSpeed>:
{
 80020c2:	b480      	push	{r7}
 80020c4:	b089      	sub	sp, #36	; 0x24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	613b      	str	r3, [r7, #16]
  return result;
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2103      	movs	r1, #3
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	401a      	ands	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	61bb      	str	r3, [r7, #24]
  return result;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	431a      	orrs	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	609a      	str	r2, [r3, #8]
}
 8002114:	bf00      	nop
 8002116:	3724      	adds	r7, #36	; 0x24
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_GPIO_SetPinPull>:
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	613b      	str	r3, [r7, #16]
  return result;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2103      	movs	r1, #3
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	401a      	ands	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	61bb      	str	r3, [r7, #24]
  return result;
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	431a      	orrs	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	60da      	str	r2, [r3, #12]
}
 8002172:	bf00      	nop
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_GPIO_SetAFPin_0_7>:
{
 800217e:	b480      	push	{r7}
 8002180:	b089      	sub	sp, #36	; 0x24
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a1a      	ldr	r2, [r3, #32]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	613b      	str	r3, [r7, #16]
  return result;
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	210f      	movs	r1, #15
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	401a      	ands	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	61bb      	str	r3, [r7, #24]
  return result;
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ca:	431a      	orrs	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	621a      	str	r2, [r3, #32]
}
 80021d0:	bf00      	nop
 80021d2:	3724      	adds	r7, #36	; 0x24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_GPIO_SetAFPin_8_15>:
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	613b      	str	r3, [r7, #16]
  return result;
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	b2db      	uxtb	r3, r3
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	210f      	movs	r1, #15
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	401a      	ands	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	61bb      	str	r3, [r7, #24]
  return result;
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	431a      	orrs	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002232:	bf00      	nop
 8002234:	3724      	adds	r7, #36	; 0x24
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b088      	sub	sp, #32
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	613b      	str	r3, [r7, #16]
  return result;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002260:	e051      	b.n	8002306 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	2101      	movs	r1, #1
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d043      	beq.n	8002300 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d003      	beq.n	8002288 <LL_GPIO_Init+0x4a>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d10e      	bne.n	80022a6 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	461a      	mov	r2, r3
 800228e:	69b9      	ldr	r1, [r7, #24]
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ff16 	bl	80020c2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6819      	ldr	r1, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	461a      	mov	r2, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff fef6 	bl	8002092 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	461a      	mov	r2, r3
 80022ac:	69b9      	ldr	r1, [r7, #24]
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ff36 	bl	8002120 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d11a      	bne.n	80022f2 <LL_GPIO_Init+0xb4>
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	60bb      	str	r3, [r7, #8]
  return result;
 80022c8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b07      	cmp	r3, #7
 80022d2:	d807      	bhi.n	80022e4 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	461a      	mov	r2, r3
 80022da:	69b9      	ldr	r1, [r7, #24]
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff4e 	bl	800217e <LL_GPIO_SetAFPin_0_7>
 80022e2:	e006      	b.n	80022f2 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	461a      	mov	r2, r3
 80022ea:	69b9      	ldr	r1, [r7, #24]
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff75 	bl	80021dc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	461a      	mov	r2, r3
 80022f8:	69b9      	ldr	r1, [r7, #24]
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fe9a 	bl	8002034 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	3301      	adds	r3, #1
 8002304:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa22 f303 	lsr.w	r3, r2, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1a6      	bne.n	8002262 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3720      	adds	r7, #32
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <LL_I2C_Enable>:
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f043 0201 	orr.w	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	601a      	str	r2, [r3, #0]
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <LL_I2C_Disable>:
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 0201 	bic.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	601a      	str	r2, [r3, #0]
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <LL_I2C_ConfigFilters>:
{
 800235e:	b480      	push	{r7}
 8002360:	b085      	sub	sp, #20
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	0219      	lsls	r1, r3, #8
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	430b      	orrs	r3, r1
 800237a:	431a      	orrs	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	601a      	str	r2, [r3, #0]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_I2C_SetOwnAddress1>:
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80023a0:	f023 0307 	bic.w	r3, r3, #7
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	431a      	orrs	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	609a      	str	r2, [r3, #8]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_I2C_EnableOwnAddress1>:
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	609a      	str	r2, [r3, #8]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_I2C_DisableOwnAddress1>:
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	609a      	str	r2, [r3, #8]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_I2C_SetTiming>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	611a      	str	r2, [r3, #16]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_I2C_SetMode>:
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	601a      	str	r2, [r3, #0]
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_I2C_AcknowledgeNextData>:
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	605a      	str	r2, [r3, #4]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ff65 	bl	800233e <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6899      	ldr	r1, [r3, #8]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	461a      	mov	r2, r3
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ff6d 	bl	800235e <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffb6 	bl	80023fc <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff ff44 	bl	800231e <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffa0 	bl	80023dc <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	6919      	ldr	r1, [r3, #16]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	461a      	mov	r2, r3
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ff70 	bl	800238c <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ff81 	bl	80023bc <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4619      	mov	r1, r3
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ffa9 	bl	8002418 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	4619      	mov	r1, r3
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ffb6 	bl	800243e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <LL_InitTick+0x30>)
 80024f0:	3b01      	subs	r3, #1
 80024f2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <LL_InitTick+0x30>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024fa:	4b04      	ldr	r3, [pc, #16]	; (800250c <LL_InitTick+0x30>)
 80024fc:	2205      	movs	r2, #5
 80024fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000e010 	.word	0xe000e010

08002510 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002518:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ffdd 	bl	80024dc <LL_InitTick>
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002534:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <LL_mDelay+0x44>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800253a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002542:	d00c      	beq.n	800255e <LL_mDelay+0x32>
  {
    Delay++;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3301      	adds	r3, #1
 8002548:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800254a:	e008      	b.n	800255e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800254c:	4b08      	ldr	r3, [pc, #32]	; (8002570 <LL_mDelay+0x44>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <LL_mDelay+0x32>
    {
      Delay--;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f3      	bne.n	800254c <LL_mDelay+0x20>
    }
  }
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000e010 	.word	0xe000e010

08002574 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800257c:	4a04      	ldr	r2, [pc, #16]	; (8002590 <LL_SetSystemCoreClock+0x1c>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6013      	str	r3, [r2, #0]
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000000 	.word	0x20000000

08002594 <lis3mdl_read_byte>:
static uint8_t sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS;

uint64_t lastMovementTick = 0;

uint8_t lis3mdl_read_byte(uint8_t reg_addr)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af02      	add	r7, sp, #8
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, sLIS3MDLI2Caddress, 0));
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <lis3mdl_read_byte+0x30>)
 80025a4:	7819      	ldrb	r1, [r3, #0]
 80025a6:	79fa      	ldrb	r2, [r7, #7]
 80025a8:	f107 000f 	add.w	r0, r7, #15
 80025ac:	2300      	movs	r3, #0
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	460b      	mov	r3, r1
 80025b2:	2101      	movs	r1, #1
 80025b4:	f7ff f802 	bl	80015bc <i2c_master_read>
 80025b8:	4603      	mov	r3, r0
 80025ba:	781b      	ldrb	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000004 	.word	0x20000004

080025c8 <lis3mdl_write_byte>:

void lis3mdl_write_byte(uint8_t reg_addr, uint8_t value)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	460a      	mov	r2, r1
 80025d2:	71fb      	strb	r3, [r7, #7]
 80025d4:	4613      	mov	r3, r2
 80025d6:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, sLIS3MDLI2Caddress, 0);
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <lis3mdl_write_byte+0x28>)
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	79f9      	ldrb	r1, [r7, #7]
 80025de:	79b8      	ldrb	r0, [r7, #6]
 80025e0:	2300      	movs	r3, #0
 80025e2:	f7fe ffa7 	bl	8001534 <i2c_master_write>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000004 	.word	0x20000004

080025f4 <lis3mdl_readArray>:

void lis3mdl_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	70fb      	strb	r3, [r7, #3]
 8002600:	4613      	mov	r3, r2
 8002602:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, sLIS3MDLI2Caddress, 1);
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <lis3mdl_readArray+0x2c>)
 8002606:	7818      	ldrb	r0, [r3, #0]
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	78b9      	ldrb	r1, [r7, #2]
 800260c:	2301      	movs	r3, #1
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	4603      	mov	r3, r0
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7fe ffd2 	bl	80015bc <i2c_master_read>
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000004 	.word	0x20000004

08002624 <lis3mdl_get_mag>:

	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}

void lis3mdl_get_mag(float* x, float* y, float* z)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
	int16_t xx, yy, zz;

	uint8_t temp;

	//get current scale and use it for final calculation
    temp = lis3mdl_read_byte(LIS3MDL_ADDRESS_CTRL3);
 8002630:	2022      	movs	r0, #34	; 0x22
 8002632:	f7ff ffaf 	bl	8002594 <lis3mdl_read_byte>
 8002636:	4603      	mov	r3, r0
 8002638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	temp = temp >> 5;
 800263c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    temp &= 0x03;			//full scale bits exctracted
 8002646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	lis3mdl_readArray(data, LIS3MDL_ADDRESS_XL, 6);
 8002652:	f107 0314 	add.w	r3, r7, #20
 8002656:	2206      	movs	r2, #6
 8002658:	2128      	movs	r1, #40	; 0x28
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff ffca 	bl	80025f4 <lis3mdl_readArray>

	xx = ((uint16_t)data[1]) << 8 | data[0];
 8002660:	7d7b      	ldrb	r3, [r7, #21]
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	b21a      	sxth	r2, r3
 8002666:	7d3b      	ldrb	r3, [r7, #20]
 8002668:	b21b      	sxth	r3, r3
 800266a:	4313      	orrs	r3, r2
 800266c:	84bb      	strh	r3, [r7, #36]	; 0x24
	yy = ((uint16_t)data[3]) << 8 | data[2];
 800266e:	7dfb      	ldrb	r3, [r7, #23]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	b21a      	sxth	r2, r3
 8002674:	7dbb      	ldrb	r3, [r7, #22]
 8002676:	b21b      	sxth	r3, r3
 8002678:	4313      	orrs	r3, r2
 800267a:	847b      	strh	r3, [r7, #34]	; 0x22
	zz = ((uint16_t)data[5]) << 8 | data[4];
 800267c:	7e7b      	ldrb	r3, [r7, #25]
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	b21a      	sxth	r2, r3
 8002682:	7e3b      	ldrb	r3, [r7, #24]
 8002684:	b21b      	sxth	r3, r3
 8002686:	4313      	orrs	r3, r2
 8002688:	843b      	strh	r3, [r7, #32]

    const float range_scale = 6842.0f; //range +-4gaus
 800268a:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <lis3mdl_get_mag+0xc0>)
 800268c:	61fb      	str	r3, [r7, #28]

	*x = (float)(xx/range_scale);
 800268e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002692:	ee07 3a90 	vmov	s15, r3
 8002696:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800269a:	ed97 7a07 	vldr	s14, [r7, #28]
 800269e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)(yy/range_scale);
 80026a8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80026ac:	ee07 3a90 	vmov	s15, r3
 80026b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80026b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)(zz/range_scale);
 80026c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80026d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	edc3 7a00 	vstr	s15, [r3]
}
 80026dc:	bf00      	nop
 80026de:	3728      	adds	r7, #40	; 0x28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	45d5d000 	.word	0x45d5d000

080026e8 <lis3mdl_get_azimut>:

float  lis3mdl_get_azimut(){
 80026e8:	b5b0      	push	{r4, r5, r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0

	float mag[3];

	lis3mdl_get_mag(mag,mag+1,mag+2);
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	3304      	adds	r3, #4
 80026f2:	1d3a      	adds	r2, r7, #4
 80026f4:	3208      	adds	r2, #8
 80026f6:	1d38      	adds	r0, r7, #4
 80026f8:	4619      	mov	r1, r3
 80026fa:	f7ff ff93 	bl	8002624 <lis3mdl_get_mag>

	return atan2(mag[0],mag[1])*(180/3.14);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4618      	mov	r0, r3
 8002702:	f7fd ff21 	bl	8000548 <__aeabi_f2d>
 8002706:	4604      	mov	r4, r0
 8002708:	460d      	mov	r5, r1
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd ff1b 	bl	8000548 <__aeabi_f2d>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	ec43 2b11 	vmov	d1, r2, r3
 800271a:	ec45 4b10 	vmov	d0, r4, r5
 800271e:	f004 f823 	bl	8006768 <atan2>
 8002722:	ec51 0b10 	vmov	r0, r1, d0
 8002726:	a30a      	add	r3, pc, #40	; (adr r3, 8002750 <lis3mdl_get_azimut+0x68>)
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	f7fd ff64 	bl	80005f8 <__aeabi_dmul>
 8002730:	4603      	mov	r3, r0
 8002732:	460c      	mov	r4, r1
 8002734:	4618      	mov	r0, r3
 8002736:	4621      	mov	r1, r4
 8002738:	f7fe fa36 	bl	8000ba8 <__aeabi_d2f>
 800273c:	4603      	mov	r3, r0
 800273e:	ee07 3a90 	vmov	s15, r3
}
 8002742:	eeb0 0a67 	vmov.f32	s0, s15
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bdb0      	pop	{r4, r5, r7, pc}
 800274c:	f3af 8000 	nop.w
 8002750:	61d59ae7 	.word	0x61d59ae7
 8002754:	404ca994 	.word	0x404ca994

08002758 <lis3mdl_init>:

uint8_t lis3mdl_init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 800275e:	2301      	movs	r3, #1
 8002760:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8002762:	2064      	movs	r0, #100	; 0x64
 8002764:	f7ff fee2 	bl	800252c <LL_mDelay>

	uint8_t val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 8002768:	200f      	movs	r0, #15
 800276a:	f7ff ff13 	bl	8002594 <lis3mdl_read_byte>
 800276e:	4603      	mov	r3, r0
 8002770:	71bb      	strb	r3, [r7, #6]

	if(val == LIS3MDL_WHO_AM_I_VALUE)
 8002772:	79bb      	ldrb	r3, [r7, #6]
 8002774:	2b3d      	cmp	r3, #61	; 0x3d
 8002776:	d102      	bne.n	800277e <lis3mdl_init+0x26>
	{
		status = 1;
 8002778:	2301      	movs	r3, #1
 800277a:	71fb      	strb	r3, [r7, #7]
 800277c:	e011      	b.n	80027a2 <lis3mdl_init+0x4a>
	}
	else			//if the device is not found on one address, try another one
	{
		sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS_ALTERNATIVE;
 800277e:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <lis3mdl_init+0x8c>)
 8002780:	223c      	movs	r2, #60	; 0x3c
 8002782:	701a      	strb	r2, [r3, #0]
		val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 8002784:	200f      	movs	r0, #15
 8002786:	f7ff ff05 	bl	8002594 <lis3mdl_read_byte>
 800278a:	4603      	mov	r3, r0
 800278c:	71bb      	strb	r3, [r7, #6]
		if(val == LIS3MDL_WHO_AM_I_VALUE)
 800278e:	79bb      	ldrb	r3, [r7, #6]
 8002790:	2b3d      	cmp	r3, #61	; 0x3d
 8002792:	d102      	bne.n	800279a <lis3mdl_init+0x42>
		{
			status = 1;
 8002794:	2301      	movs	r3, #1
 8002796:	71fb      	strb	r3, [r7, #7]
 8002798:	e003      	b.n	80027a2 <lis3mdl_init+0x4a>
		}
		else
		{
			status = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	71fb      	strb	r3, [r7, #7]
			return status;
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	e01c      	b.n	80027dc <lis3mdl_init+0x84>
		}
	}

	//acc device init

	uint8_t ctrl1 = LIS3MDL_CTRL1_OM_UHP | LIS3MDL_CTRL1_DO_80HZ | (1 << 7);
 80027a2:	23fc      	movs	r3, #252	; 0xfc
 80027a4:	717b      	strb	r3, [r7, #5]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL1, ctrl1);
 80027a6:	797b      	ldrb	r3, [r7, #5]
 80027a8:	4619      	mov	r1, r3
 80027aa:	2020      	movs	r0, #32
 80027ac:	f7ff ff0c 	bl	80025c8 <lis3mdl_write_byte>

	uint8_t ctrl2 = LIS3MDL_CTRL2_FS_4GAUS;
 80027b0:	2300      	movs	r3, #0
 80027b2:	713b      	strb	r3, [r7, #4]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL2, ctrl2);
 80027b4:	793b      	ldrb	r3, [r7, #4]
 80027b6:	4619      	mov	r1, r3
 80027b8:	2021      	movs	r0, #33	; 0x21
 80027ba:	f7ff ff05 	bl	80025c8 <lis3mdl_write_byte>

	uint8_t ctrl3 = LIS3MDL_CTRL3_MD_CONTINUES;
 80027be:	2300      	movs	r3, #0
 80027c0:	70fb      	strb	r3, [r7, #3]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL3, ctrl3);
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	4619      	mov	r1, r3
 80027c6:	2022      	movs	r0, #34	; 0x22
 80027c8:	f7ff fefe 	bl	80025c8 <lis3mdl_write_byte>

	uint8_t ctrl4 = LIS3MDL_CTRL4_OMZ_UHP;
 80027cc:	230c      	movs	r3, #12
 80027ce:	70bb      	strb	r3, [r7, #2]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL4, ctrl4);
 80027d0:	78bb      	ldrb	r3, [r7, #2]
 80027d2:	4619      	mov	r1, r3
 80027d4:	2023      	movs	r0, #35	; 0x23
 80027d6:	f7ff fef7 	bl	80025c8 <lis3mdl_write_byte>

	return status;
 80027da:	79fb      	ldrb	r3, [r7, #7]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000004 	.word	0x20000004

080027e8 <LL_GPIO_SetOutputPin>:
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	619a      	str	r2, [r3, #24]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <state_init>:

enum move {LEFT,RIGHT};
enum move moving = RIGHT;


uint8_t state_init(){
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0

	button_state = MAG;
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <state_init+0x18>)
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]

	return 1;
 800280e:	2301      	movs	r3, #1
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20000210 	.word	0x20000210

08002820 <change_state>:


void change_state(void){//tuto funkciu pouzi v interapte na tlacidlo
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0


	if(button_state==MAG){
 8002824:	4b15      	ldr	r3, [pc, #84]	; (800287c <change_state+0x5c>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d103      	bne.n	8002834 <change_state+0x14>
		button_state=TEMP;
 800282c:	4b13      	ldr	r3, [pc, #76]	; (800287c <change_state+0x5c>)
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
	}else if(button_state==ALT){
		button_state=MAG;
	}


}
 8002832:	e01e      	b.n	8002872 <change_state+0x52>
	}else if(button_state==TEMP){
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <change_state+0x5c>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d103      	bne.n	8002844 <change_state+0x24>
		button_state=HUM;
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <change_state+0x5c>)
 800283e:	2202      	movs	r2, #2
 8002840:	701a      	strb	r2, [r3, #0]
}
 8002842:	e016      	b.n	8002872 <change_state+0x52>
	}else if(button_state==HUM){
 8002844:	4b0d      	ldr	r3, [pc, #52]	; (800287c <change_state+0x5c>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d103      	bne.n	8002854 <change_state+0x34>
		button_state=BAR;
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <change_state+0x5c>)
 800284e:	2203      	movs	r2, #3
 8002850:	701a      	strb	r2, [r3, #0]
}
 8002852:	e00e      	b.n	8002872 <change_state+0x52>
	}else if(button_state==BAR){
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <change_state+0x5c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b03      	cmp	r3, #3
 800285a:	d103      	bne.n	8002864 <change_state+0x44>
		button_state=ALT;
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <change_state+0x5c>)
 800285e:	2204      	movs	r2, #4
 8002860:	701a      	strb	r2, [r3, #0]
}
 8002862:	e006      	b.n	8002872 <change_state+0x52>
	}else if(button_state==ALT){
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <change_state+0x5c>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b04      	cmp	r3, #4
 800286a:	d102      	bne.n	8002872 <change_state+0x52>
		button_state=MAG;
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <change_state+0x5c>)
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
}
 8002872:	bf00      	nop
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	20000210 	.word	0x20000210

08002880 <processToDisplay>:



void processToDisplay(void){
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b08d      	sub	sp, #52	; 0x34
 8002884:	af02      	add	r7, sp, #8
	static uint8_t position2 = 0;
	static uint8_t position3 = 1;
	static uint8_t position4 = 2;


	if(start){
 8002886:	4b7e      	ldr	r3, [pc, #504]	; (8002a80 <processToDisplay+0x200>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d02c      	beq.n	80028e8 <processToDisplay+0x68>

		size_t needed = snprintf(NULL, 0, "MAG_%2.2f",lis3mdl_get_azimut());
 800288e:	f7ff ff2b 	bl	80026e8 <lis3mdl_get_azimut>
 8002892:	ee10 3a10 	vmov	r3, s0
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fe56 	bl	8000548 <__aeabi_f2d>
 800289c:	4603      	mov	r3, r0
 800289e:	460c      	mov	r4, r1
 80028a0:	e9cd 3400 	strd	r3, r4, [sp]
 80028a4:	4a77      	ldr	r2, [pc, #476]	; (8002a84 <processToDisplay+0x204>)
 80028a6:	2100      	movs	r1, #0
 80028a8:	2000      	movs	r0, #0
 80028aa:	f002 fc09 	bl	80050c0 <sniprintf>
 80028ae:	4603      	mov	r3, r0
 80028b0:	61fb      	str	r3, [r7, #28]
		text = (char*)malloc((needed+1)*sizeof(char));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3301      	adds	r3, #1
 80028b6:	4618      	mov	r0, r3
 80028b8:	f001 fede 	bl	8004678 <malloc>
 80028bc:	4603      	mov	r3, r0
 80028be:	461a      	mov	r2, r3
 80028c0:	4b71      	ldr	r3, [pc, #452]	; (8002a88 <processToDisplay+0x208>)
 80028c2:	601a      	str	r2, [r3, #0]
		sprintf(text, "MAG_%2.2f",lis3mdl_get_azimut());
 80028c4:	4b70      	ldr	r3, [pc, #448]	; (8002a88 <processToDisplay+0x208>)
 80028c6:	681c      	ldr	r4, [r3, #0]
 80028c8:	f7ff ff0e 	bl	80026e8 <lis3mdl_get_azimut>
 80028cc:	ee10 3a10 	vmov	r3, s0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fe39 	bl	8000548 <__aeabi_f2d>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	496a      	ldr	r1, [pc, #424]	; (8002a84 <processToDisplay+0x204>)
 80028dc:	4620      	mov	r0, r4
 80028de:	f002 fc23 	bl	8005128 <siprintf>
		len = needed+1;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3301      	adds	r3, #1
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
	}




	if(state_changed){
 80028e8:	4b68      	ldr	r3, [pc, #416]	; (8002a8c <processToDisplay+0x20c>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 811c 	beq.w	8002b2a <processToDisplay+0x2aa>

		if(button_state == ALT){
 80028f2:	4b67      	ldr	r3, [pc, #412]	; (8002a90 <processToDisplay+0x210>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d139      	bne.n	800296e <processToDisplay+0xee>

			size_t needed = snprintf(NULL, 0, "ALT_%4.2f",LBS25HB_calculate_altitude(LBS25HB_get_pres()));
 80028fa:	f001 fe25 	bl	8004548 <LBS25HB_get_pres>
 80028fe:	eef0 7a40 	vmov.f32	s15, s0
 8002902:	eeb0 0a67 	vmov.f32	s0, s15
 8002906:	f001 fe47 	bl	8004598 <LBS25HB_calculate_altitude>
 800290a:	ee10 3a10 	vmov	r3, s0
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fe1a 	bl	8000548 <__aeabi_f2d>
 8002914:	4603      	mov	r3, r0
 8002916:	460c      	mov	r4, r1
 8002918:	e9cd 3400 	strd	r3, r4, [sp]
 800291c:	4a5d      	ldr	r2, [pc, #372]	; (8002a94 <processToDisplay+0x214>)
 800291e:	2100      	movs	r1, #0
 8002920:	2000      	movs	r0, #0
 8002922:	f002 fbcd 	bl	80050c0 <sniprintf>
 8002926:	4603      	mov	r3, r0
 8002928:	60bb      	str	r3, [r7, #8]
			text = (char*)malloc((needed+1)*sizeof(char));
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	3301      	adds	r3, #1
 800292e:	4618      	mov	r0, r3
 8002930:	f001 fea2 	bl	8004678 <malloc>
 8002934:	4603      	mov	r3, r0
 8002936:	461a      	mov	r2, r3
 8002938:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <processToDisplay+0x208>)
 800293a:	601a      	str	r2, [r3, #0]
			sprintf(text, "ALT_%4.2f",LBS25HB_calculate_altitude(LBS25HB_get_pres()));
 800293c:	4b52      	ldr	r3, [pc, #328]	; (8002a88 <processToDisplay+0x208>)
 800293e:	681c      	ldr	r4, [r3, #0]
 8002940:	f001 fe02 	bl	8004548 <LBS25HB_get_pres>
 8002944:	eef0 7a40 	vmov.f32	s15, s0
 8002948:	eeb0 0a67 	vmov.f32	s0, s15
 800294c:	f001 fe24 	bl	8004598 <LBS25HB_calculate_altitude>
 8002950:	ee10 3a10 	vmov	r3, s0
 8002954:	4618      	mov	r0, r3
 8002956:	f7fd fdf7 	bl	8000548 <__aeabi_f2d>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	494d      	ldr	r1, [pc, #308]	; (8002a94 <processToDisplay+0x214>)
 8002960:	4620      	mov	r0, r4
 8002962:	f002 fbe1 	bl	8005128 <siprintf>
			len = needed+1;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	3301      	adds	r3, #1
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
 800296c:	e0cb      	b.n	8002b06 <processToDisplay+0x286>

		} else if(button_state == BAR){
 800296e:	4b48      	ldr	r3, [pc, #288]	; (8002a90 <processToDisplay+0x210>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b03      	cmp	r3, #3
 8002974:	d12d      	bne.n	80029d2 <processToDisplay+0x152>

			size_t needed = snprintf(NULL, 0, "BAR_%4.2f",LBS25HB_get_pres());
 8002976:	f001 fde7 	bl	8004548 <LBS25HB_get_pres>
 800297a:	ee10 3a10 	vmov	r3, s0
 800297e:	4618      	mov	r0, r3
 8002980:	f7fd fde2 	bl	8000548 <__aeabi_f2d>
 8002984:	4603      	mov	r3, r0
 8002986:	460c      	mov	r4, r1
 8002988:	e9cd 3400 	strd	r3, r4, [sp]
 800298c:	4a42      	ldr	r2, [pc, #264]	; (8002a98 <processToDisplay+0x218>)
 800298e:	2100      	movs	r1, #0
 8002990:	2000      	movs	r0, #0
 8002992:	f002 fb95 	bl	80050c0 <sniprintf>
 8002996:	4603      	mov	r3, r0
 8002998:	60fb      	str	r3, [r7, #12]
			text = (char*)malloc((needed+1)*sizeof(char));
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	3301      	adds	r3, #1
 800299e:	4618      	mov	r0, r3
 80029a0:	f001 fe6a 	bl	8004678 <malloc>
 80029a4:	4603      	mov	r3, r0
 80029a6:	461a      	mov	r2, r3
 80029a8:	4b37      	ldr	r3, [pc, #220]	; (8002a88 <processToDisplay+0x208>)
 80029aa:	601a      	str	r2, [r3, #0]
			sprintf(text, "BAR_%4.2f",LBS25HB_get_pres());
 80029ac:	4b36      	ldr	r3, [pc, #216]	; (8002a88 <processToDisplay+0x208>)
 80029ae:	681c      	ldr	r4, [r3, #0]
 80029b0:	f001 fdca 	bl	8004548 <LBS25HB_get_pres>
 80029b4:	ee10 3a10 	vmov	r3, s0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fdc5 	bl	8000548 <__aeabi_f2d>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4935      	ldr	r1, [pc, #212]	; (8002a98 <processToDisplay+0x218>)
 80029c4:	4620      	mov	r0, r4
 80029c6:	f002 fbaf 	bl	8005128 <siprintf>
			len = needed+1;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3301      	adds	r3, #1
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
 80029d0:	e099      	b.n	8002b06 <processToDisplay+0x286>

		} else if(button_state == TEMP){
 80029d2:	4b2f      	ldr	r3, [pc, #188]	; (8002a90 <processToDisplay+0x210>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d12d      	bne.n	8002a36 <processToDisplay+0x1b6>


			size_t needed = snprintf(NULL, 0, "TEMP_%2.1f",HTS221_get_temp());
 80029da:	f001 fbf9 	bl	80041d0 <HTS221_get_temp>
 80029de:	ee10 3a10 	vmov	r3, s0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fdb0 	bl	8000548 <__aeabi_f2d>
 80029e8:	4603      	mov	r3, r0
 80029ea:	460c      	mov	r4, r1
 80029ec:	e9cd 3400 	strd	r3, r4, [sp]
 80029f0:	4a2a      	ldr	r2, [pc, #168]	; (8002a9c <processToDisplay+0x21c>)
 80029f2:	2100      	movs	r1, #0
 80029f4:	2000      	movs	r0, #0
 80029f6:	f002 fb63 	bl	80050c0 <sniprintf>
 80029fa:	4603      	mov	r3, r0
 80029fc:	613b      	str	r3, [r7, #16]
			text = (char*)malloc((needed+1)*sizeof(char));
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	3301      	adds	r3, #1
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 fe38 	bl	8004678 <malloc>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <processToDisplay+0x208>)
 8002a0e:	601a      	str	r2, [r3, #0]
			sprintf(text, "TEMP_%2.1f",HTS221_get_temp());
 8002a10:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <processToDisplay+0x208>)
 8002a12:	681c      	ldr	r4, [r3, #0]
 8002a14:	f001 fbdc 	bl	80041d0 <HTS221_get_temp>
 8002a18:	ee10 3a10 	vmov	r3, s0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fd fd93 	bl	8000548 <__aeabi_f2d>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	491d      	ldr	r1, [pc, #116]	; (8002a9c <processToDisplay+0x21c>)
 8002a28:	4620      	mov	r0, r4
 8002a2a:	f002 fb7d 	bl	8005128 <siprintf>
			len = needed+1;
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	3301      	adds	r3, #1
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
 8002a34:	e067      	b.n	8002b06 <processToDisplay+0x286>

		} else if(button_state == HUM){
 8002a36:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <processToDisplay+0x210>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d132      	bne.n	8002aa4 <processToDisplay+0x224>


			size_t needed = snprintf(NULL, 0, "HUM_%2d",HTS221_get_relhum());
 8002a3e:	f001 fc8d 	bl	800435c <HTS221_get_relhum>
 8002a42:	4603      	mov	r3, r0
 8002a44:	4a16      	ldr	r2, [pc, #88]	; (8002aa0 <processToDisplay+0x220>)
 8002a46:	2100      	movs	r1, #0
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f002 fb39 	bl	80050c0 <sniprintf>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	617b      	str	r3, [r7, #20]
			text = (char*)malloc((needed+1)*sizeof(char));
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	3301      	adds	r3, #1
 8002a56:	4618      	mov	r0, r3
 8002a58:	f001 fe0e 	bl	8004678 <malloc>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <processToDisplay+0x208>)
 8002a62:	601a      	str	r2, [r3, #0]
			sprintf(text, "HUM_%2d",HTS221_get_relhum());
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <processToDisplay+0x208>)
 8002a66:	681c      	ldr	r4, [r3, #0]
 8002a68:	f001 fc78 	bl	800435c <HTS221_get_relhum>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	461a      	mov	r2, r3
 8002a70:	490b      	ldr	r1, [pc, #44]	; (8002aa0 <processToDisplay+0x220>)
 8002a72:	4620      	mov	r0, r4
 8002a74:	f002 fb58 	bl	8005128 <siprintf>
			len = needed+1;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7e:	e042      	b.n	8002b06 <processToDisplay+0x286>
 8002a80:	20000006 	.word	0x20000006
 8002a84:	08007d38 	.word	0x08007d38
 8002a88:	20000218 	.word	0x20000218
 8002a8c:	20000204 	.word	0x20000204
 8002a90:	20000210 	.word	0x20000210
 8002a94:	08007d44 	.word	0x08007d44
 8002a98:	08007d50 	.word	0x08007d50
 8002a9c:	08007d5c 	.word	0x08007d5c
 8002aa0:	08007d68 	.word	0x08007d68

		}else if(button_state == MAG){
 8002aa4:	4ba3      	ldr	r3, [pc, #652]	; (8002d34 <processToDisplay+0x4b4>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d12c      	bne.n	8002b06 <processToDisplay+0x286>

			size_t needed = snprintf(NULL, 0, "MAG_%2.2f",lis3mdl_get_azimut());
 8002aac:	f7ff fe1c 	bl	80026e8 <lis3mdl_get_azimut>
 8002ab0:	ee10 3a10 	vmov	r3, s0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fd47 	bl	8000548 <__aeabi_f2d>
 8002aba:	4603      	mov	r3, r0
 8002abc:	460c      	mov	r4, r1
 8002abe:	e9cd 3400 	strd	r3, r4, [sp]
 8002ac2:	4a9d      	ldr	r2, [pc, #628]	; (8002d38 <processToDisplay+0x4b8>)
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f002 fafa 	bl	80050c0 <sniprintf>
 8002acc:	4603      	mov	r3, r0
 8002ace:	61bb      	str	r3, [r7, #24]
			text = (char*)malloc((needed+1)*sizeof(char));
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f001 fdcf 	bl	8004678 <malloc>
 8002ada:	4603      	mov	r3, r0
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b97      	ldr	r3, [pc, #604]	; (8002d3c <processToDisplay+0x4bc>)
 8002ae0:	601a      	str	r2, [r3, #0]
			sprintf(text, "MAG_%2.2f",lis3mdl_get_azimut());
 8002ae2:	4b96      	ldr	r3, [pc, #600]	; (8002d3c <processToDisplay+0x4bc>)
 8002ae4:	681c      	ldr	r4, [r3, #0]
 8002ae6:	f7ff fdff 	bl	80026e8 <lis3mdl_get_azimut>
 8002aea:	ee10 3a10 	vmov	r3, s0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fd fd2a 	bl	8000548 <__aeabi_f2d>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	498f      	ldr	r1, [pc, #572]	; (8002d38 <processToDisplay+0x4b8>)
 8002afa:	4620      	mov	r0, r4
 8002afc:	f002 fb14 	bl	8005128 <siprintf>
			len = needed+1;
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	3301      	adds	r3, #1
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24

		}

		state_changed = false;
 8002b06:	4b8e      	ldr	r3, [pc, #568]	; (8002d40 <processToDisplay+0x4c0>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]

		position1 = -1;
 8002b0c:	4b8d      	ldr	r3, [pc, #564]	; (8002d44 <processToDisplay+0x4c4>)
 8002b0e:	22ff      	movs	r2, #255	; 0xff
 8002b10:	701a      	strb	r2, [r3, #0]
		position2 = 0;
 8002b12:	4b8d      	ldr	r3, [pc, #564]	; (8002d48 <processToDisplay+0x4c8>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
		position3 = 1;
 8002b18:	4b8c      	ldr	r3, [pc, #560]	; (8002d4c <processToDisplay+0x4cc>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
		position4 = 2;
 8002b1e:	4b8c      	ldr	r3, [pc, #560]	; (8002d50 <processToDisplay+0x4d0>)
 8002b20:	2202      	movs	r2, #2
 8002b22:	701a      	strb	r2, [r3, #0]

		moving = RIGHT;
 8002b24:	4b8b      	ldr	r3, [pc, #556]	; (8002d54 <processToDisplay+0x4d4>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]





	bool activeDP[] = {false,false,false,false};
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	607b      	str	r3, [r7, #4]

	if(moving == RIGHT && start == false){
 8002b2e:	4b89      	ldr	r3, [pc, #548]	; (8002d54 <processToDisplay+0x4d4>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	f040 80af 	bne.w	8002c96 <processToDisplay+0x416>
 8002b38:	4b87      	ldr	r3, [pc, #540]	; (8002d58 <processToDisplay+0x4d8>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	f083 0301 	eor.w	r3, r3, #1
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 80a7 	beq.w	8002c96 <processToDisplay+0x416>

		position1+=1;
 8002b48:	4b7e      	ldr	r3, [pc, #504]	; (8002d44 <processToDisplay+0x4c4>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	4b7c      	ldr	r3, [pc, #496]	; (8002d44 <processToDisplay+0x4c4>)
 8002b52:	701a      	strb	r2, [r3, #0]
		position2+=1;
 8002b54:	4b7c      	ldr	r3, [pc, #496]	; (8002d48 <processToDisplay+0x4c8>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	4b7a      	ldr	r3, [pc, #488]	; (8002d48 <processToDisplay+0x4c8>)
 8002b5e:	701a      	strb	r2, [r3, #0]
		position3+=1;
 8002b60:	4b7a      	ldr	r3, [pc, #488]	; (8002d4c <processToDisplay+0x4cc>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	3301      	adds	r3, #1
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	4b78      	ldr	r3, [pc, #480]	; (8002d4c <processToDisplay+0x4cc>)
 8002b6a:	701a      	strb	r2, [r3, #0]
		position4+=1;
 8002b6c:	4b78      	ldr	r3, [pc, #480]	; (8002d50 <processToDisplay+0x4d0>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	3301      	adds	r3, #1
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	4b76      	ldr	r3, [pc, #472]	; (8002d50 <processToDisplay+0x4d0>)
 8002b76:	701a      	strb	r2, [r3, #0]

		if(position4 < len-1){
 8002b78:	4b75      	ldr	r3, [pc, #468]	; (8002d50 <processToDisplay+0x4d0>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	3b01      	subs	r3, #1
 8002b82:	429a      	cmp	r2, r3
 8002b84:	da2b      	bge.n	8002bde <processToDisplay+0x35e>

			if(text[position4+1]=='.'){
 8002b86:	4b6d      	ldr	r3, [pc, #436]	; (8002d3c <processToDisplay+0x4bc>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4b71      	ldr	r3, [pc, #452]	; (8002d50 <processToDisplay+0x4d0>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	4413      	add	r3, r2
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b2e      	cmp	r3, #46	; 0x2e
 8002b96:	d101      	bne.n	8002b9c <processToDisplay+0x31c>

				activeDP[3]=true;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	71fb      	strb	r3, [r7, #7]
			}

			if(text[position3+1]=='.'){
 8002b9c:	4b67      	ldr	r3, [pc, #412]	; (8002d3c <processToDisplay+0x4bc>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b6a      	ldr	r3, [pc, #424]	; (8002d4c <processToDisplay+0x4cc>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b2e      	cmp	r3, #46	; 0x2e
 8002bac:	d101      	bne.n	8002bb2 <processToDisplay+0x332>

				activeDP[2]=true;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	71bb      	strb	r3, [r7, #6]

			}

			if(text[position2+1]=='.'){
 8002bb2:	4b62      	ldr	r3, [pc, #392]	; (8002d3c <processToDisplay+0x4bc>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4b64      	ldr	r3, [pc, #400]	; (8002d48 <processToDisplay+0x4c8>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b2e      	cmp	r3, #46	; 0x2e
 8002bc2:	d101      	bne.n	8002bc8 <processToDisplay+0x348>

				activeDP[1]=true;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	717b      	strb	r3, [r7, #5]

			}

			if(text[position1+1]=='.'){
 8002bc8:	4b5c      	ldr	r3, [pc, #368]	; (8002d3c <processToDisplay+0x4bc>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b5d      	ldr	r3, [pc, #372]	; (8002d44 <processToDisplay+0x4c4>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b2e      	cmp	r3, #46	; 0x2e
 8002bd8:	d101      	bne.n	8002bde <processToDisplay+0x35e>

				activeDP[0]=true;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	713b      	strb	r3, [r7, #4]
		}




		if(text[position1]=='.'){
 8002bde:	4b57      	ldr	r3, [pc, #348]	; (8002d3c <processToDisplay+0x4bc>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a58      	ldr	r2, [pc, #352]	; (8002d44 <processToDisplay+0x4c4>)
 8002be4:	7812      	ldrb	r2, [r2, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b2e      	cmp	r3, #46	; 0x2e
 8002bec:	d117      	bne.n	8002c1e <processToDisplay+0x39e>

			position1+=1;
 8002bee:	4b55      	ldr	r3, [pc, #340]	; (8002d44 <processToDisplay+0x4c4>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	4b53      	ldr	r3, [pc, #332]	; (8002d44 <processToDisplay+0x4c4>)
 8002bf8:	701a      	strb	r2, [r3, #0]
			position2+=1;
 8002bfa:	4b53      	ldr	r3, [pc, #332]	; (8002d48 <processToDisplay+0x4c8>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	4b51      	ldr	r3, [pc, #324]	; (8002d48 <processToDisplay+0x4c8>)
 8002c04:	701a      	strb	r2, [r3, #0]
			position3+=1;
 8002c06:	4b51      	ldr	r3, [pc, #324]	; (8002d4c <processToDisplay+0x4cc>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	4b4f      	ldr	r3, [pc, #316]	; (8002d4c <processToDisplay+0x4cc>)
 8002c10:	701a      	strb	r2, [r3, #0]
			position4+=1;
 8002c12:	4b4f      	ldr	r3, [pc, #316]	; (8002d50 <processToDisplay+0x4d0>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	3301      	adds	r3, #1
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	4b4d      	ldr	r3, [pc, #308]	; (8002d50 <processToDisplay+0x4d0>)
 8002c1c:	701a      	strb	r2, [r3, #0]

		}

		if(text[position2]=='.'){
 8002c1e:	4b47      	ldr	r3, [pc, #284]	; (8002d3c <processToDisplay+0x4bc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a49      	ldr	r2, [pc, #292]	; (8002d48 <processToDisplay+0x4c8>)
 8002c24:	7812      	ldrb	r2, [r2, #0]
 8002c26:	4413      	add	r3, r2
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b2e      	cmp	r3, #46	; 0x2e
 8002c2c:	d111      	bne.n	8002c52 <processToDisplay+0x3d2>

			position2+=1;
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <processToDisplay+0x4c8>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	3301      	adds	r3, #1
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	4b44      	ldr	r3, [pc, #272]	; (8002d48 <processToDisplay+0x4c8>)
 8002c38:	701a      	strb	r2, [r3, #0]
			position3+=1;
 8002c3a:	4b44      	ldr	r3, [pc, #272]	; (8002d4c <processToDisplay+0x4cc>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	4b42      	ldr	r3, [pc, #264]	; (8002d4c <processToDisplay+0x4cc>)
 8002c44:	701a      	strb	r2, [r3, #0]
			position4+=1;
 8002c46:	4b42      	ldr	r3, [pc, #264]	; (8002d50 <processToDisplay+0x4d0>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4b40      	ldr	r3, [pc, #256]	; (8002d50 <processToDisplay+0x4d0>)
 8002c50:	701a      	strb	r2, [r3, #0]
		}

		if(text[position3]=='.'){
 8002c52:	4b3a      	ldr	r3, [pc, #232]	; (8002d3c <processToDisplay+0x4bc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a3d      	ldr	r2, [pc, #244]	; (8002d4c <processToDisplay+0x4cc>)
 8002c58:	7812      	ldrb	r2, [r2, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b2e      	cmp	r3, #46	; 0x2e
 8002c60:	d10b      	bne.n	8002c7a <processToDisplay+0x3fa>


			position3+=1;
 8002c62:	4b3a      	ldr	r3, [pc, #232]	; (8002d4c <processToDisplay+0x4cc>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	4b38      	ldr	r3, [pc, #224]	; (8002d4c <processToDisplay+0x4cc>)
 8002c6c:	701a      	strb	r2, [r3, #0]
			position4+=1;
 8002c6e:	4b38      	ldr	r3, [pc, #224]	; (8002d50 <processToDisplay+0x4d0>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	3301      	adds	r3, #1
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	4b36      	ldr	r3, [pc, #216]	; (8002d50 <processToDisplay+0x4d0>)
 8002c78:	701a      	strb	r2, [r3, #0]
		}


		if(text[position4]=='.'){
 8002c7a:	4b30      	ldr	r3, [pc, #192]	; (8002d3c <processToDisplay+0x4bc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a34      	ldr	r2, [pc, #208]	; (8002d50 <processToDisplay+0x4d0>)
 8002c80:	7812      	ldrb	r2, [r2, #0]
 8002c82:	4413      	add	r3, r2
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b2e      	cmp	r3, #46	; 0x2e
 8002c88:	d105      	bne.n	8002c96 <processToDisplay+0x416>

			position4+=1;
 8002c8a:	4b31      	ldr	r3, [pc, #196]	; (8002d50 <processToDisplay+0x4d0>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	4b2f      	ldr	r3, [pc, #188]	; (8002d50 <processToDisplay+0x4d0>)
 8002c94:	701a      	strb	r2, [r3, #0]
		}


	}

	if(moving == LEFT && start == false){
 8002c96:	4b2f      	ldr	r3, [pc, #188]	; (8002d54 <processToDisplay+0x4d4>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f040 80c2 	bne.w	8002e24 <processToDisplay+0x5a4>
 8002ca0:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <processToDisplay+0x4d8>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	f083 0301 	eor.w	r3, r3, #1
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 80ba 	beq.w	8002e24 <processToDisplay+0x5a4>



		if(position1 > 0){
 8002cb0:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <processToDisplay+0x4c4>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d02b      	beq.n	8002d10 <processToDisplay+0x490>

			if(text[position4-1]=='.'){
 8002cb8:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <processToDisplay+0x4bc>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	4b24      	ldr	r3, [pc, #144]	; (8002d50 <processToDisplay+0x4d0>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	4413      	add	r3, r2
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8002cc8:	d101      	bne.n	8002cce <processToDisplay+0x44e>

				activeDP[3]=true;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	71fb      	strb	r3, [r7, #7]
			}

			if(text[position3-1]=='.'){
 8002cce:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <processToDisplay+0x4bc>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	; (8002d4c <processToDisplay+0x4cc>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	4413      	add	r3, r2
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b2e      	cmp	r3, #46	; 0x2e
 8002cde:	d101      	bne.n	8002ce4 <processToDisplay+0x464>

				activeDP[2]=true;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	71bb      	strb	r3, [r7, #6]

			}

			if(text[position2-1]=='.'){
 8002ce4:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <processToDisplay+0x4bc>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4b17      	ldr	r3, [pc, #92]	; (8002d48 <processToDisplay+0x4c8>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8002cf4:	d101      	bne.n	8002cfa <processToDisplay+0x47a>

				activeDP[1]=true;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	717b      	strb	r3, [r7, #5]

			}

			if(text[position1-1]=='.'){
 8002cfa:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <processToDisplay+0x4bc>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <processToDisplay+0x4c4>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	4413      	add	r3, r2
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b2e      	cmp	r3, #46	; 0x2e
 8002d0a:	d101      	bne.n	8002d10 <processToDisplay+0x490>

				activeDP[0]=true;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	713b      	strb	r3, [r7, #4]

			}

		}

		position1-=1;
 8002d10:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <processToDisplay+0x4c4>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <processToDisplay+0x4c4>)
 8002d1a:	701a      	strb	r2, [r3, #0]
		position2-=1;
 8002d1c:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <processToDisplay+0x4c8>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <processToDisplay+0x4c8>)
 8002d26:	701a      	strb	r2, [r3, #0]
		position3-=1;
 8002d28:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <processToDisplay+0x4cc>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	e014      	b.n	8002d5c <processToDisplay+0x4dc>
 8002d32:	bf00      	nop
 8002d34:	20000210 	.word	0x20000210
 8002d38:	08007d38 	.word	0x08007d38
 8002d3c:	20000218 	.word	0x20000218
 8002d40:	20000204 	.word	0x20000204
 8002d44:	20000007 	.word	0x20000007
 8002d48:	20000205 	.word	0x20000205
 8002d4c:	20000008 	.word	0x20000008
 8002d50:	20000009 	.word	0x20000009
 8002d54:	20000005 	.word	0x20000005
 8002d58:	20000006 	.word	0x20000006
 8002d5c:	4b67      	ldr	r3, [pc, #412]	; (8002efc <processToDisplay+0x67c>)
 8002d5e:	701a      	strb	r2, [r3, #0]
		position4-=1;
 8002d60:	4b67      	ldr	r3, [pc, #412]	; (8002f00 <processToDisplay+0x680>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	4b65      	ldr	r3, [pc, #404]	; (8002f00 <processToDisplay+0x680>)
 8002d6a:	701a      	strb	r2, [r3, #0]

		if(text[position1]=='.'){
 8002d6c:	4b65      	ldr	r3, [pc, #404]	; (8002f04 <processToDisplay+0x684>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a65      	ldr	r2, [pc, #404]	; (8002f08 <processToDisplay+0x688>)
 8002d72:	7812      	ldrb	r2, [r2, #0]
 8002d74:	4413      	add	r3, r2
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b2e      	cmp	r3, #46	; 0x2e
 8002d7a:	d117      	bne.n	8002dac <processToDisplay+0x52c>

			position1-=1;
 8002d7c:	4b62      	ldr	r3, [pc, #392]	; (8002f08 <processToDisplay+0x688>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	4b60      	ldr	r3, [pc, #384]	; (8002f08 <processToDisplay+0x688>)
 8002d86:	701a      	strb	r2, [r3, #0]
			position2-=1;
 8002d88:	4b60      	ldr	r3, [pc, #384]	; (8002f0c <processToDisplay+0x68c>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	4b5e      	ldr	r3, [pc, #376]	; (8002f0c <processToDisplay+0x68c>)
 8002d92:	701a      	strb	r2, [r3, #0]
			position3-=1;
 8002d94:	4b59      	ldr	r3, [pc, #356]	; (8002efc <processToDisplay+0x67c>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	4b57      	ldr	r3, [pc, #348]	; (8002efc <processToDisplay+0x67c>)
 8002d9e:	701a      	strb	r2, [r3, #0]
			position4-=1;
 8002da0:	4b57      	ldr	r3, [pc, #348]	; (8002f00 <processToDisplay+0x680>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	4b55      	ldr	r3, [pc, #340]	; (8002f00 <processToDisplay+0x680>)
 8002daa:	701a      	strb	r2, [r3, #0]

		}

		if(text[position2]=='.'){
 8002dac:	4b55      	ldr	r3, [pc, #340]	; (8002f04 <processToDisplay+0x684>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a56      	ldr	r2, [pc, #344]	; (8002f0c <processToDisplay+0x68c>)
 8002db2:	7812      	ldrb	r2, [r2, #0]
 8002db4:	4413      	add	r3, r2
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b2e      	cmp	r3, #46	; 0x2e
 8002dba:	d111      	bne.n	8002de0 <processToDisplay+0x560>

			position2-=1;
 8002dbc:	4b53      	ldr	r3, [pc, #332]	; (8002f0c <processToDisplay+0x68c>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	4b51      	ldr	r3, [pc, #324]	; (8002f0c <processToDisplay+0x68c>)
 8002dc6:	701a      	strb	r2, [r3, #0]
			position3-=1;
 8002dc8:	4b4c      	ldr	r3, [pc, #304]	; (8002efc <processToDisplay+0x67c>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	4b4a      	ldr	r3, [pc, #296]	; (8002efc <processToDisplay+0x67c>)
 8002dd2:	701a      	strb	r2, [r3, #0]
			position4-=1;
 8002dd4:	4b4a      	ldr	r3, [pc, #296]	; (8002f00 <processToDisplay+0x680>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	4b48      	ldr	r3, [pc, #288]	; (8002f00 <processToDisplay+0x680>)
 8002dde:	701a      	strb	r2, [r3, #0]
		}

		if(text[position3]=='.'){
 8002de0:	4b48      	ldr	r3, [pc, #288]	; (8002f04 <processToDisplay+0x684>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a45      	ldr	r2, [pc, #276]	; (8002efc <processToDisplay+0x67c>)
 8002de6:	7812      	ldrb	r2, [r2, #0]
 8002de8:	4413      	add	r3, r2
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b2e      	cmp	r3, #46	; 0x2e
 8002dee:	d10b      	bne.n	8002e08 <processToDisplay+0x588>


			position3-=1;
 8002df0:	4b42      	ldr	r3, [pc, #264]	; (8002efc <processToDisplay+0x67c>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	4b40      	ldr	r3, [pc, #256]	; (8002efc <processToDisplay+0x67c>)
 8002dfa:	701a      	strb	r2, [r3, #0]
			position4-=1;
 8002dfc:	4b40      	ldr	r3, [pc, #256]	; (8002f00 <processToDisplay+0x680>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	4b3e      	ldr	r3, [pc, #248]	; (8002f00 <processToDisplay+0x680>)
 8002e06:	701a      	strb	r2, [r3, #0]
		}


		if(text[position4]=='.'){
 8002e08:	4b3e      	ldr	r3, [pc, #248]	; (8002f04 <processToDisplay+0x684>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a3c      	ldr	r2, [pc, #240]	; (8002f00 <processToDisplay+0x680>)
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	4413      	add	r3, r2
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b2e      	cmp	r3, #46	; 0x2e
 8002e16:	d105      	bne.n	8002e24 <processToDisplay+0x5a4>

			position4-=1;
 8002e18:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <processToDisplay+0x680>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	4b37      	ldr	r3, [pc, #220]	; (8002f00 <processToDisplay+0x680>)
 8002e22:	701a      	strb	r2, [r3, #0]

	}



	if(position1 == 0)
 8002e24:	4b38      	ldr	r3, [pc, #224]	; (8002f08 <processToDisplay+0x688>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d102      	bne.n	8002e32 <processToDisplay+0x5b2>
		moving = RIGHT;
 8002e2c:	4b38      	ldr	r3, [pc, #224]	; (8002f10 <processToDisplay+0x690>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	701a      	strb	r2, [r3, #0]


	if(position4 == len-1 || position4 == len-2)
 8002e32:	4b33      	ldr	r3, [pc, #204]	; (8002f00 <processToDisplay+0x680>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d006      	beq.n	8002e4e <processToDisplay+0x5ce>
 8002e40:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <processToDisplay+0x680>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	3b02      	subs	r3, #2
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d102      	bne.n	8002e54 <processToDisplay+0x5d4>
		moving = LEFT;
 8002e4e:	4b30      	ldr	r3, [pc, #192]	; (8002f10 <processToDisplay+0x690>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	while(i<65){
 8002e5a:	e044      	b.n	8002ee6 <processToDisplay+0x666>

		setDigitOne();
 8002e5c:	f7fd ff10 	bl	8000c80 <setDigitOne>
		lightTheChar(text[position1],activeDP[0]);
 8002e60:	4b28      	ldr	r3, [pc, #160]	; (8002f04 <processToDisplay+0x684>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a28      	ldr	r2, [pc, #160]	; (8002f08 <processToDisplay+0x688>)
 8002e66:	7812      	ldrb	r2, [r2, #0]
 8002e68:	4413      	add	r3, r2
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	793a      	ldrb	r2, [r7, #4]
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 f851 	bl	8002f18 <lightTheChar>
		LL_mDelay(1);
 8002e76:	2001      	movs	r0, #1
 8002e78:	f7ff fb58 	bl	800252c <LL_mDelay>
		setDigitTwo();
 8002e7c:	f7fd ff1a 	bl	8000cb4 <setDigitTwo>
		lightTheChar(text[position2],activeDP[1]);
 8002e80:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <processToDisplay+0x684>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a21      	ldr	r2, [pc, #132]	; (8002f0c <processToDisplay+0x68c>)
 8002e86:	7812      	ldrb	r2, [r2, #0]
 8002e88:	4413      	add	r3, r2
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	797a      	ldrb	r2, [r7, #5]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 f841 	bl	8002f18 <lightTheChar>
		LL_mDelay(1);
 8002e96:	2001      	movs	r0, #1
 8002e98:	f7ff fb48 	bl	800252c <LL_mDelay>
		setDigitThree();
 8002e9c:	f7fd ff24 	bl	8000ce8 <setDigitThree>
		lightTheChar(text[position3],activeDP[2]);
 8002ea0:	4b18      	ldr	r3, [pc, #96]	; (8002f04 <processToDisplay+0x684>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a15      	ldr	r2, [pc, #84]	; (8002efc <processToDisplay+0x67c>)
 8002ea6:	7812      	ldrb	r2, [r2, #0]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	79ba      	ldrb	r2, [r7, #6]
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 f831 	bl	8002f18 <lightTheChar>
		LL_mDelay(1);
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	f7ff fb38 	bl	800252c <LL_mDelay>
		setDigitFour();
 8002ebc:	f7fd ff2e 	bl	8000d1c <setDigitFour>
		lightTheChar(text[position4],activeDP[3]);
 8002ec0:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <processToDisplay+0x684>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a0e      	ldr	r2, [pc, #56]	; (8002f00 <processToDisplay+0x680>)
 8002ec6:	7812      	ldrb	r2, [r2, #0]
 8002ec8:	4413      	add	r3, r2
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	79fa      	ldrb	r2, [r7, #7]
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 f821 	bl	8002f18 <lightTheChar>
		LL_mDelay(1);
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	f7ff fb28 	bl	800252c <LL_mDelay>

		i++;
 8002edc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	while(i<65){
 8002ee6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002eea:	2b40      	cmp	r3, #64	; 0x40
 8002eec:	d9b6      	bls.n	8002e5c <processToDisplay+0x5dc>





	start = false;
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <processToDisplay+0x694>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]

}
 8002ef4:	bf00      	nop
 8002ef6:	372c      	adds	r7, #44	; 0x2c
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd90      	pop	{r4, r7, pc}
 8002efc:	20000008 	.word	0x20000008
 8002f00:	20000009 	.word	0x20000009
 8002f04:	20000218 	.word	0x20000218
 8002f08:	20000007 	.word	0x20000007
 8002f0c:	20000205 	.word	0x20000205
 8002f10:	20000005 	.word	0x20000005
 8002f14:	20000006 	.word	0x20000006

08002f18 <lightTheChar>:



void lightTheChar(uint8_t ch, bool active_DP){
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	460a      	mov	r2, r1
 8002f22:	71fb      	strb	r3, [r7, #7]
 8002f24:	4613      	mov	r3, r2
 8002f26:	71bb      	strb	r3, [r7, #6]

	LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8002f28:	2102      	movs	r1, #2
 8002f2a:	486c      	ldr	r0, [pc, #432]	; (80030dc <lightTheChar+0x1c4>)
 8002f2c:	f7ff fc5c 	bl	80027e8 <LL_GPIO_SetOutputPin>

	if(ch=='V')
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	2b56      	cmp	r3, #86	; 0x56
 8002f34:	d103      	bne.n	8002f3e <lightTheChar+0x26>
		V(active_DP);
 8002f36:	79bb      	ldrb	r3, [r7, #6]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 f8ed 	bl	8003118 <V>

	if(ch=='l' || ch=='L')
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	2b6c      	cmp	r3, #108	; 0x6c
 8002f42:	d002      	beq.n	8002f4a <lightTheChar+0x32>
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	2b4c      	cmp	r3, #76	; 0x4c
 8002f48:	d103      	bne.n	8002f52 <lightTheChar+0x3a>
		L(active_DP);
 8002f4a:	79bb      	ldrb	r3, [r7, #6]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 f92b 	bl	80031a8 <L>

	if(ch=='a' || ch=='A' )
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	2b61      	cmp	r3, #97	; 0x61
 8002f56:	d002      	beq.n	8002f5e <lightTheChar+0x46>
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	2b41      	cmp	r3, #65	; 0x41
 8002f5c:	d103      	bne.n	8002f66 <lightTheChar+0x4e>
		A(active_DP);
 8002f5e:	79bb      	ldrb	r3, [r7, #6]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 f96b 	bl	800323c <A>

	if(ch=='d')
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	2b64      	cmp	r3, #100	; 0x64
 8002f6a:	d103      	bne.n	8002f74 <lightTheChar+0x5c>
		D(active_DP);
 8002f6c:	79bb      	ldrb	r3, [r7, #6]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f9be 	bl	80032f0 <D>

	if(ch=='i')
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	2b69      	cmp	r3, #105	; 0x69
 8002f78:	d103      	bne.n	8002f82 <lightTheChar+0x6a>
		I(active_DP);
 8002f7a:	79bb      	ldrb	r3, [r7, #6]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fa0b 	bl	8003398 <I>

	if(ch=='m'|| ch=='M')
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	2b6d      	cmp	r3, #109	; 0x6d
 8002f86:	d002      	beq.n	8002f8e <lightTheChar+0x76>
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	2b4d      	cmp	r3, #77	; 0x4d
 8002f8c:	d103      	bne.n	8002f96 <lightTheChar+0x7e>
		M(active_DP);
 8002f8e:	79bb      	ldrb	r3, [r7, #6]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fa47 	bl	8003424 <M>

	if(ch=='r'|| ch=='R')
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	2b72      	cmp	r3, #114	; 0x72
 8002f9a:	d002      	beq.n	8002fa2 <lightTheChar+0x8a>
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	2b52      	cmp	r3, #82	; 0x52
 8002fa0:	d103      	bne.n	8002faa <lightTheChar+0x92>
		R(active_DP);
 8002fa2:	79bb      	ldrb	r3, [r7, #6]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fa8b 	bl	80034c0 <R>

	if(ch=='B')
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	2b42      	cmp	r3, #66	; 0x42
 8002fae:	d103      	bne.n	8002fb8 <lightTheChar+0xa0>
		B(active_DP);
 8002fb0:	79bb      	ldrb	r3, [r7, #6]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fb38 	bl	8003628 <B>

	if(ch=='e' || ch=='E')
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	2b65      	cmp	r3, #101	; 0x65
 8002fbc:	d002      	beq.n	8002fc4 <lightTheChar+0xac>
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	2b45      	cmp	r3, #69	; 0x45
 8002fc2:	d103      	bne.n	8002fcc <lightTheChar+0xb4>
		E(active_DP);
 8002fc4:	79bb      	ldrb	r3, [r7, #6]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fb82 	bl	80036d0 <E>

	if(ch=='n')
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	2b6e      	cmp	r3, #110	; 0x6e
 8002fd0:	d103      	bne.n	8002fda <lightTheChar+0xc2>
		N(active_DP);
 8002fd2:	79bb      	ldrb	r3, [r7, #6]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fbcd 	bl	8003774 <N>

	if(ch=='k')
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	2b6b      	cmp	r3, #107	; 0x6b
 8002fde:	d103      	bne.n	8002fe8 <lightTheChar+0xd0>
		K(active_DP);
 8002fe0:	79bb      	ldrb	r3, [r7, #6]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fc10 	bl	8003808 <K>

	if(ch=='8')
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	2b38      	cmp	r3, #56	; 0x38
 8002fec:	d103      	bne.n	8002ff6 <lightTheChar+0xde>
		eight(active_DP);
 8002fee:	79bb      	ldrb	r3, [r7, #6]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fe8f 	bl	8003d14 <eight>

	if(ch =='6')
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	2b36      	cmp	r3, #54	; 0x36
 8002ffa:	d103      	bne.n	8003004 <lightTheChar+0xec>
		six(active_DP);
 8002ffc:	79bb      	ldrb	r3, [r7, #6]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fee6 	bl	8003dd0 <six>

	if(ch=='4')
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	2b34      	cmp	r3, #52	; 0x34
 8003008:	d103      	bne.n	8003012 <lightTheChar+0xfa>
		four(active_DP);
 800300a:	79bb      	ldrb	r3, [r7, #6]
 800300c:	4618      	mov	r0, r3
 800300e:	f000 ff37 	bl	8003e80 <four>

	if(ch =='2')
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	2b32      	cmp	r3, #50	; 0x32
 8003016:	d103      	bne.n	8003020 <lightTheChar+0x108>
		two(active_DP);
 8003018:	79bb      	ldrb	r3, [r7, #6]
 800301a:	4618      	mov	r0, r3
 800301c:	f000 ff7e 	bl	8003f1c <two>

	if(ch =='_')
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	2b5f      	cmp	r3, #95	; 0x5f
 8003024:	d103      	bne.n	800302e <lightTheChar+0x116>
		_(active_DP);
 8003026:	79bb      	ldrb	r3, [r7, #6]
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fa8d 	bl	8003548 <_>
	///

	if(ch=='G')
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	2b47      	cmp	r3, #71	; 0x47
 8003032:	d103      	bne.n	800303c <lightTheChar+0x124>
		G(active_DP);
 8003034:	79bb      	ldrb	r3, [r7, #6]
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fc3a 	bl	80038b0 <G>

	if(ch=='T'|| ch=='t')
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	2b54      	cmp	r3, #84	; 0x54
 8003040:	d002      	beq.n	8003048 <lightTheChar+0x130>
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	2b74      	cmp	r3, #116	; 0x74
 8003046:	d103      	bne.n	8003050 <lightTheChar+0x138>
		T(active_DP);
 8003048:	79bb      	ldrb	r3, [r7, #6]
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fc84 	bl	8003958 <T>

	if(ch=='P'|| ch=='p')
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	2b50      	cmp	r3, #80	; 0x50
 8003054:	d002      	beq.n	800305c <lightTheChar+0x144>
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	2b70      	cmp	r3, #112	; 0x70
 800305a:	d103      	bne.n	8003064 <lightTheChar+0x14c>
		P(active_DP);
 800305c:	79bb      	ldrb	r3, [r7, #6]
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fcc8 	bl	80039f4 <P>

	if(ch=='H')
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	2b48      	cmp	r3, #72	; 0x48
 8003068:	d103      	bne.n	8003072 <lightTheChar+0x15a>
		H(active_DP);
 800306a:	79bb      	ldrb	r3, [r7, #6]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fd15 	bl	8003a9c <H>

	if(ch =='U')
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	2b55      	cmp	r3, #85	; 0x55
 8003076:	d103      	bne.n	8003080 <lightTheChar+0x168>
		U(active_DP);
 8003078:	79bb      	ldrb	r3, [r7, #6]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fd5e 	bl	8003b3c <U>

	if(ch=='1')
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	2b31      	cmp	r3, #49	; 0x31
 8003084:	d103      	bne.n	800308e <lightTheChar+0x176>
		one(active_DP);
 8003086:	79bb      	ldrb	r3, [r7, #6]
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fdab 	bl	8003be4 <one>

	if(ch =='3')
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	2b33      	cmp	r3, #51	; 0x33
 8003092:	d103      	bne.n	800309c <lightTheChar+0x184>
		three(active_DP);
 8003094:	79bb      	ldrb	r3, [r7, #6]
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fdea 	bl	8003c70 <three>

	if(ch =='-')
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	2b2d      	cmp	r3, #45	; 0x2d
 80030a0:	d103      	bne.n	80030aa <lightTheChar+0x192>
		dash(active_DP);
 80030a2:	79bb      	ldrb	r3, [r7, #6]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fa8d 	bl	80035c4 <dash>

	if(ch =='5')
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	2b35      	cmp	r3, #53	; 0x35
 80030ae:	d103      	bne.n	80030b8 <lightTheChar+0x1a0>
		five(active_DP);
 80030b0:	79bb      	ldrb	r3, [r7, #6]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 ff84 	bl	8003fc0 <five>

	if(ch =='7')
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	2b37      	cmp	r3, #55	; 0x37
 80030bc:	d103      	bne.n	80030c6 <lightTheChar+0x1ae>
		seven(active_DP);
 80030be:	79bb      	ldrb	r3, [r7, #6]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 ffcf 	bl	8004064 <seven>

	if(ch =='9')
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	2b39      	cmp	r3, #57	; 0x39
 80030ca:	d103      	bne.n	80030d4 <lightTheChar+0x1bc>
		nine(active_DP);
 80030cc:	79bb      	ldrb	r3, [r7, #6]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f001 f812 	bl	80040f8 <nine>



}
 80030d4:	bf00      	nop
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	48000400 	.word	0x48000400

080030e0 <LL_GPIO_SetOutputPin>:
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	619a      	str	r2, [r3, #24]
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_GPIO_ResetOutputPin>:
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <V>:
#include "main.h"

//letters:


void V(bool activeDP){
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	71fb      	strb	r3, [r7, #7]


	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003122:	2102      	movs	r1, #2
 8003124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003128:	f7ff ffda 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 800312c:	2101      	movs	r1, #1
 800312e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003132:	f7ff ffd5 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003136:	f44f 7180 	mov.w	r1, #256	; 0x100
 800313a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800313e:	f7ff ffcf 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003142:	2120      	movs	r1, #32
 8003144:	4817      	ldr	r0, [pc, #92]	; (80031a4 <V+0x8c>)
 8003146:	f7ff ffcb 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800314a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800314e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003152:	f7ff ffc5 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003156:	2108      	movs	r1, #8
 8003158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800315c:	f7ff ffc0 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003160:	2110      	movs	r1, #16
 8003162:	4810      	ldr	r0, [pc, #64]	; (80031a4 <V+0x8c>)
 8003164:	f7ff ffbc 	bl	80030e0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003168:	2101      	movs	r1, #1
 800316a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800316e:	f7ff ffc5 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003172:	2120      	movs	r1, #32
 8003174:	480b      	ldr	r0, [pc, #44]	; (80031a4 <V+0x8c>)
 8003176:	f7ff ffc1 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800317a:	2108      	movs	r1, #8
 800317c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003180:	f7ff ffbc 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);

if(activeDP)
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d004      	beq.n	8003194 <V+0x7c>
	LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 800318a:	2102      	movs	r1, #2
 800318c:	4805      	ldr	r0, [pc, #20]	; (80031a4 <V+0x8c>)
 800318e:	f7ff ffb5 	bl	80030fc <LL_GPIO_ResetOutputPin>
else
	LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);


}
 8003192:	e003      	b.n	800319c <V+0x84>
	LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003194:	2102      	movs	r1, #2
 8003196:	4803      	ldr	r0, [pc, #12]	; (80031a4 <V+0x8c>)
 8003198:	f7ff ffa2 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	48000400 	.word	0x48000400

080031a8 <L>:

void L(bool activeDP){
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80031b2:	2102      	movs	r1, #2
 80031b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031b8:	f7ff ff92 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80031bc:	2101      	movs	r1, #1
 80031be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031c2:	f7ff ff8d 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80031c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031ce:	f7ff ff87 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80031d2:	2120      	movs	r1, #32
 80031d4:	4818      	ldr	r0, [pc, #96]	; (8003238 <L+0x90>)
 80031d6:	f7ff ff83 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80031da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031e2:	f7ff ff7d 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80031e6:	2108      	movs	r1, #8
 80031e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031ec:	f7ff ff78 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80031f0:	2110      	movs	r1, #16
 80031f2:	4811      	ldr	r0, [pc, #68]	; (8003238 <L+0x90>)
 80031f4:	f7ff ff74 	bl	80030e0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80031f8:	2120      	movs	r1, #32
 80031fa:	480f      	ldr	r0, [pc, #60]	; (8003238 <L+0x90>)
 80031fc:	f7ff ff7e 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003200:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003208:	f7ff ff78 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800320c:	2108      	movs	r1, #8
 800320e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003212:	f7ff ff73 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);

	if(activeDP)
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d004      	beq.n	8003226 <L+0x7e>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 800321c:	2102      	movs	r1, #2
 800321e:	4806      	ldr	r0, [pc, #24]	; (8003238 <L+0x90>)
 8003220:	f7ff ff6c 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003224:	e003      	b.n	800322e <L+0x86>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003226:	2102      	movs	r1, #2
 8003228:	4803      	ldr	r0, [pc, #12]	; (8003238 <L+0x90>)
 800322a:	f7ff ff59 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	48000400 	.word	0x48000400

0800323c <A>:


void A(bool activeDP){
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003246:	2102      	movs	r1, #2
 8003248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800324c:	f7ff ff48 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003250:	2101      	movs	r1, #1
 8003252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003256:	f7ff ff43 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800325a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800325e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003262:	f7ff ff3d 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003266:	2120      	movs	r1, #32
 8003268:	4820      	ldr	r0, [pc, #128]	; (80032ec <A+0xb0>)
 800326a:	f7ff ff39 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800326e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003276:	f7ff ff33 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800327a:	2108      	movs	r1, #8
 800327c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003280:	f7ff ff2e 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003284:	2110      	movs	r1, #16
 8003286:	4819      	ldr	r0, [pc, #100]	; (80032ec <A+0xb0>)
 8003288:	f7ff ff2a 	bl	80030e0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 800328c:	2102      	movs	r1, #2
 800328e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003292:	f7ff ff33 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003296:	2101      	movs	r1, #1
 8003298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800329c:	f7ff ff2e 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80032a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032a8:	f7ff ff28 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80032ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032b4:	f7ff ff22 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80032b8:	2108      	movs	r1, #8
 80032ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032be:	f7ff ff1d 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80032c2:	2110      	movs	r1, #16
 80032c4:	4809      	ldr	r0, [pc, #36]	; (80032ec <A+0xb0>)
 80032c6:	f7ff ff19 	bl	80030fc <LL_GPIO_ResetOutputPin>

	if(activeDP)
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d004      	beq.n	80032da <A+0x9e>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80032d0:	2102      	movs	r1, #2
 80032d2:	4806      	ldr	r0, [pc, #24]	; (80032ec <A+0xb0>)
 80032d4:	f7ff ff12 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 80032d8:	e003      	b.n	80032e2 <A+0xa6>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80032da:	2102      	movs	r1, #2
 80032dc:	4803      	ldr	r0, [pc, #12]	; (80032ec <A+0xb0>)
 80032de:	f7ff feff 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	48000400 	.word	0x48000400

080032f0 <D>:


void D(bool activeDP){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80032fa:	2102      	movs	r1, #2
 80032fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003300:	f7ff feee 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003304:	2101      	movs	r1, #1
 8003306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800330a:	f7ff fee9 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800330e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003316:	f7ff fee3 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800331a:	2120      	movs	r1, #32
 800331c:	481d      	ldr	r0, [pc, #116]	; (8003394 <D+0xa4>)
 800331e:	f7ff fedf 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003322:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800332a:	f7ff fed9 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800332e:	2108      	movs	r1, #8
 8003330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003334:	f7ff fed4 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003338:	2110      	movs	r1, #16
 800333a:	4816      	ldr	r0, [pc, #88]	; (8003394 <D+0xa4>)
 800333c:	f7ff fed0 	bl	80030e0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003340:	2101      	movs	r1, #1
 8003342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003346:	f7ff fed9 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800334a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800334e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003352:	f7ff fed3 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003356:	2120      	movs	r1, #32
 8003358:	480e      	ldr	r0, [pc, #56]	; (8003394 <D+0xa4>)
 800335a:	f7ff fecf 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800335e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003366:	f7ff fec9 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800336a:	2110      	movs	r1, #16
 800336c:	4809      	ldr	r0, [pc, #36]	; (8003394 <D+0xa4>)
 800336e:	f7ff fec5 	bl	80030fc <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d004      	beq.n	8003382 <D+0x92>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003378:	2102      	movs	r1, #2
 800337a:	4806      	ldr	r0, [pc, #24]	; (8003394 <D+0xa4>)
 800337c:	f7ff febe 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003380:	e003      	b.n	800338a <D+0x9a>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003382:	2102      	movs	r1, #2
 8003384:	4803      	ldr	r0, [pc, #12]	; (8003394 <D+0xa4>)
 8003386:	f7ff feab 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	48000400 	.word	0x48000400

08003398 <I>:


void I(bool activeDP){
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80033a2:	2102      	movs	r1, #2
 80033a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033a8:	f7ff fe9a 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80033ac:	2101      	movs	r1, #1
 80033ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033b2:	f7ff fe95 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80033b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033be:	f7ff fe8f 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80033c2:	2120      	movs	r1, #32
 80033c4:	4816      	ldr	r0, [pc, #88]	; (8003420 <I+0x88>)
 80033c6:	f7ff fe8b 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80033ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033d2:	f7ff fe85 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80033d6:	2108      	movs	r1, #8
 80033d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033dc:	f7ff fe80 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80033e0:	2110      	movs	r1, #16
 80033e2:	480f      	ldr	r0, [pc, #60]	; (8003420 <I+0x88>)
 80033e4:	f7ff fe7c 	bl	80030e0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80033e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033f0:	f7ff fe84 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80033f4:	2108      	movs	r1, #8
 80033f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033fa:	f7ff fe7f 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);

	if(activeDP)
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d004      	beq.n	800340e <I+0x76>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003404:	2102      	movs	r1, #2
 8003406:	4806      	ldr	r0, [pc, #24]	; (8003420 <I+0x88>)
 8003408:	f7ff fe78 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 800340c:	e003      	b.n	8003416 <I+0x7e>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 800340e:	2102      	movs	r1, #2
 8003410:	4803      	ldr	r0, [pc, #12]	; (8003420 <I+0x88>)
 8003412:	f7ff fe65 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	48000400 	.word	0x48000400

08003424 <M>:

void M(bool activeDP){
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 800342e:	2102      	movs	r1, #2
 8003430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003434:	f7ff fe54 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003438:	2101      	movs	r1, #1
 800343a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800343e:	f7ff fe4f 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800344a:	f7ff fe49 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800344e:	2120      	movs	r1, #32
 8003450:	481a      	ldr	r0, [pc, #104]	; (80034bc <M+0x98>)
 8003452:	f7ff fe45 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003456:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800345a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800345e:	f7ff fe3f 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003462:	2108      	movs	r1, #8
 8003464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003468:	f7ff fe3a 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800346c:	2110      	movs	r1, #16
 800346e:	4813      	ldr	r0, [pc, #76]	; (80034bc <M+0x98>)
 8003470:	f7ff fe36 	bl	80030e0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003474:	2102      	movs	r1, #2
 8003476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800347a:	f7ff fe3f 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 800347e:	2101      	movs	r1, #1
 8003480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003484:	f7ff fe3a 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003488:	2120      	movs	r1, #32
 800348a:	480c      	ldr	r0, [pc, #48]	; (80034bc <M+0x98>)
 800348c:	f7ff fe36 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003490:	2108      	movs	r1, #8
 8003492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003496:	f7ff fe31 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);

	if(activeDP)
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d004      	beq.n	80034aa <M+0x86>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80034a0:	2102      	movs	r1, #2
 80034a2:	4806      	ldr	r0, [pc, #24]	; (80034bc <M+0x98>)
 80034a4:	f7ff fe2a 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 80034a8:	e003      	b.n	80034b2 <M+0x8e>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80034aa:	2102      	movs	r1, #2
 80034ac:	4803      	ldr	r0, [pc, #12]	; (80034bc <M+0x98>)
 80034ae:	f7ff fe17 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	48000400 	.word	0x48000400

080034c0 <R>:

void R(bool activeDP){
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80034ca:	2102      	movs	r1, #2
 80034cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034d0:	f7ff fe06 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80034d4:	2101      	movs	r1, #1
 80034d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034da:	f7ff fe01 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80034de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034e6:	f7ff fdfb 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80034ea:	2120      	movs	r1, #32
 80034ec:	4815      	ldr	r0, [pc, #84]	; (8003544 <R+0x84>)
 80034ee:	f7ff fdf7 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80034f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034fa:	f7ff fdf1 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80034fe:	2108      	movs	r1, #8
 8003500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003504:	f7ff fdec 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003508:	2110      	movs	r1, #16
 800350a:	480e      	ldr	r0, [pc, #56]	; (8003544 <R+0x84>)
 800350c:	f7ff fde8 	bl	80030e0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003510:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003518:	f7ff fdf0 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800351c:	2110      	movs	r1, #16
 800351e:	4809      	ldr	r0, [pc, #36]	; (8003544 <R+0x84>)
 8003520:	f7ff fdec 	bl	80030fc <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d004      	beq.n	8003534 <R+0x74>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 800352a:	2102      	movs	r1, #2
 800352c:	4805      	ldr	r0, [pc, #20]	; (8003544 <R+0x84>)
 800352e:	f7ff fde5 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003532:	e003      	b.n	800353c <R+0x7c>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003534:	2102      	movs	r1, #2
 8003536:	4803      	ldr	r0, [pc, #12]	; (8003544 <R+0x84>)
 8003538:	f7ff fdd2 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 800353c:	bf00      	nop
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	48000400 	.word	0x48000400

08003548 <_>:



void _(bool activeDP){
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003552:	2102      	movs	r1, #2
 8003554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003558:	f7ff fdc2 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 800355c:	2101      	movs	r1, #1
 800355e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003562:	f7ff fdbd 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800356a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800356e:	f7ff fdb7 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003572:	2120      	movs	r1, #32
 8003574:	4812      	ldr	r0, [pc, #72]	; (80035c0 <_+0x78>)
 8003576:	f7ff fdb3 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800357a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800357e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003582:	f7ff fdad 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003586:	2108      	movs	r1, #8
 8003588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800358c:	f7ff fda8 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003590:	2110      	movs	r1, #16
 8003592:	480b      	ldr	r0, [pc, #44]	; (80035c0 <_+0x78>)
 8003594:	f7ff fda4 	bl	80030e0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003598:	2120      	movs	r1, #32
 800359a:	4809      	ldr	r0, [pc, #36]	; (80035c0 <_+0x78>)
 800359c:	f7ff fdae 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);

	if(activeDP)
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <_+0x68>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80035a6:	2102      	movs	r1, #2
 80035a8:	4805      	ldr	r0, [pc, #20]	; (80035c0 <_+0x78>)
 80035aa:	f7ff fda7 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 80035ae:	e003      	b.n	80035b8 <_+0x70>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80035b0:	2102      	movs	r1, #2
 80035b2:	4803      	ldr	r0, [pc, #12]	; (80035c0 <_+0x78>)
 80035b4:	f7ff fd94 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 80035b8:	bf00      	nop
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	48000400 	.word	0x48000400

080035c4 <dash>:
///// potialto si dal actiDP
void dash(bool activeDP){
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80035ce:	2102      	movs	r1, #2
 80035d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035d4:	f7ff fd84 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80035d8:	2101      	movs	r1, #1
 80035da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035de:	f7ff fd7f 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80035e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035ea:	f7ff fd79 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80035ee:	2120      	movs	r1, #32
 80035f0:	480c      	ldr	r0, [pc, #48]	; (8003624 <dash+0x60>)
 80035f2:	f7ff fd75 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80035f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035fe:	f7ff fd6f 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003602:	2108      	movs	r1, #8
 8003604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003608:	f7ff fd6a 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800360c:	2110      	movs	r1, #16
 800360e:	4805      	ldr	r0, [pc, #20]	; (8003624 <dash+0x60>)
 8003610:	f7ff fd66 	bl	80030e0 <LL_GPIO_SetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003614:	2110      	movs	r1, #16
 8003616:	4803      	ldr	r0, [pc, #12]	; (8003624 <dash+0x60>)
 8003618:	f7ff fd70 	bl	80030fc <LL_GPIO_ResetOutputPin>



}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	48000400 	.word	0x48000400

08003628 <B>:





void B(bool activeDP){
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003632:	2102      	movs	r1, #2
 8003634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003638:	f7ff fd52 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 800363c:	2101      	movs	r1, #1
 800363e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003642:	f7ff fd4d 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003646:	f44f 7180 	mov.w	r1, #256	; 0x100
 800364a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800364e:	f7ff fd47 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003652:	2120      	movs	r1, #32
 8003654:	481d      	ldr	r0, [pc, #116]	; (80036cc <B+0xa4>)
 8003656:	f7ff fd43 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800365a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800365e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003662:	f7ff fd3d 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003666:	2108      	movs	r1, #8
 8003668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800366c:	f7ff fd38 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003670:	2110      	movs	r1, #16
 8003672:	4816      	ldr	r0, [pc, #88]	; (80036cc <B+0xa4>)
 8003674:	f7ff fd34 	bl	80030e0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800367c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003680:	f7ff fd3c 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003684:	2120      	movs	r1, #32
 8003686:	4811      	ldr	r0, [pc, #68]	; (80036cc <B+0xa4>)
 8003688:	f7ff fd38 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800368c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003694:	f7ff fd32 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003698:	2108      	movs	r1, #8
 800369a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800369e:	f7ff fd2d 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80036a2:	2110      	movs	r1, #16
 80036a4:	4809      	ldr	r0, [pc, #36]	; (80036cc <B+0xa4>)
 80036a6:	f7ff fd29 	bl	80030fc <LL_GPIO_ResetOutputPin>

	if(activeDP)
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d004      	beq.n	80036ba <B+0x92>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80036b0:	2102      	movs	r1, #2
 80036b2:	4806      	ldr	r0, [pc, #24]	; (80036cc <B+0xa4>)
 80036b4:	f7ff fd22 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 80036b8:	e003      	b.n	80036c2 <B+0x9a>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80036ba:	2102      	movs	r1, #2
 80036bc:	4803      	ldr	r0, [pc, #12]	; (80036cc <B+0xa4>)
 80036be:	f7ff fd0f 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	48000400 	.word	0x48000400

080036d0 <E>:
void E(bool activeDP){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80036da:	2102      	movs	r1, #2
 80036dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036e0:	f7ff fcfe 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80036e4:	2101      	movs	r1, #1
 80036e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036ea:	f7ff fcf9 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80036ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036f6:	f7ff fcf3 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80036fa:	2120      	movs	r1, #32
 80036fc:	481c      	ldr	r0, [pc, #112]	; (8003770 <E+0xa0>)
 80036fe:	f7ff fcef 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003702:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800370a:	f7ff fce9 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800370e:	2108      	movs	r1, #8
 8003710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003714:	f7ff fce4 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003718:	2110      	movs	r1, #16
 800371a:	4815      	ldr	r0, [pc, #84]	; (8003770 <E+0xa0>)
 800371c:	f7ff fce0 	bl	80030e0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003720:	2102      	movs	r1, #2
 8003722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003726:	f7ff fce9 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800372a:	2120      	movs	r1, #32
 800372c:	4810      	ldr	r0, [pc, #64]	; (8003770 <E+0xa0>)
 800372e:	f7ff fce5 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003732:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800373a:	f7ff fcdf 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800373e:	2108      	movs	r1, #8
 8003740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003744:	f7ff fcda 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003748:	2110      	movs	r1, #16
 800374a:	4809      	ldr	r0, [pc, #36]	; (8003770 <E+0xa0>)
 800374c:	f7ff fcd6 	bl	80030fc <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d004      	beq.n	8003760 <E+0x90>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003756:	2102      	movs	r1, #2
 8003758:	4805      	ldr	r0, [pc, #20]	; (8003770 <E+0xa0>)
 800375a:	f7ff fccf 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 800375e:	e003      	b.n	8003768 <E+0x98>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003760:	2102      	movs	r1, #2
 8003762:	4803      	ldr	r0, [pc, #12]	; (8003770 <E+0xa0>)
 8003764:	f7ff fcbc 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	48000400 	.word	0x48000400

08003774 <N>:
void N(bool activeDP){
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 800377e:	2102      	movs	r1, #2
 8003780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003784:	f7ff fcac 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003788:	2101      	movs	r1, #1
 800378a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800378e:	f7ff fca7 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003792:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800379a:	f7ff fca1 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800379e:	2120      	movs	r1, #32
 80037a0:	4818      	ldr	r0, [pc, #96]	; (8003804 <N+0x90>)
 80037a2:	f7ff fc9d 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80037a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037ae:	f7ff fc97 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80037b2:	2108      	movs	r1, #8
 80037b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037b8:	f7ff fc92 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80037bc:	2110      	movs	r1, #16
 80037be:	4811      	ldr	r0, [pc, #68]	; (8003804 <N+0x90>)
 80037c0:	f7ff fc8e 	bl	80030e0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80037c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037cc:	f7ff fc96 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80037d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037d8:	f7ff fc90 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80037dc:	2110      	movs	r1, #16
 80037de:	4809      	ldr	r0, [pc, #36]	; (8003804 <N+0x90>)
 80037e0:	f7ff fc8c 	bl	80030fc <LL_GPIO_ResetOutputPin>

	if(activeDP)
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d004      	beq.n	80037f4 <N+0x80>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80037ea:	2102      	movs	r1, #2
 80037ec:	4805      	ldr	r0, [pc, #20]	; (8003804 <N+0x90>)
 80037ee:	f7ff fc85 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 80037f2:	e003      	b.n	80037fc <N+0x88>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80037f4:	2102      	movs	r1, #2
 80037f6:	4803      	ldr	r0, [pc, #12]	; (8003804 <N+0x90>)
 80037f8:	f7ff fc72 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	48000400 	.word	0x48000400

08003808 <K>:
void K(bool activeDP){
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003812:	2102      	movs	r1, #2
 8003814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003818:	f7ff fc62 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 800381c:	2101      	movs	r1, #1
 800381e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003822:	f7ff fc5d 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800382a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800382e:	f7ff fc57 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003832:	2120      	movs	r1, #32
 8003834:	481d      	ldr	r0, [pc, #116]	; (80038ac <K+0xa4>)
 8003836:	f7ff fc53 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800383a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800383e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003842:	f7ff fc4d 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003846:	2108      	movs	r1, #8
 8003848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800384c:	f7ff fc48 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003850:	2110      	movs	r1, #16
 8003852:	4816      	ldr	r0, [pc, #88]	; (80038ac <K+0xa4>)
 8003854:	f7ff fc44 	bl	80030e0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003858:	2102      	movs	r1, #2
 800385a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800385e:	f7ff fc4d 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003862:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800386a:	f7ff fc47 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800386e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003876:	f7ff fc41 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800387a:	2108      	movs	r1, #8
 800387c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003880:	f7ff fc3c 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003884:	2110      	movs	r1, #16
 8003886:	4809      	ldr	r0, [pc, #36]	; (80038ac <K+0xa4>)
 8003888:	f7ff fc38 	bl	80030fc <LL_GPIO_ResetOutputPin>

	if(activeDP)
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d004      	beq.n	800389c <K+0x94>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003892:	2102      	movs	r1, #2
 8003894:	4805      	ldr	r0, [pc, #20]	; (80038ac <K+0xa4>)
 8003896:	f7ff fc31 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 800389a:	e003      	b.n	80038a4 <K+0x9c>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 800389c:	2102      	movs	r1, #2
 800389e:	4803      	ldr	r0, [pc, #12]	; (80038ac <K+0xa4>)
 80038a0:	f7ff fc1e 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 80038a4:	bf00      	nop
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	48000400 	.word	0x48000400

080038b0 <G>:


void G(bool activeDP){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80038ba:	2102      	movs	r1, #2
 80038bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038c0:	f7ff fc0e 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80038c4:	2101      	movs	r1, #1
 80038c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038ca:	f7ff fc09 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80038ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038d6:	f7ff fc03 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80038da:	2120      	movs	r1, #32
 80038dc:	481d      	ldr	r0, [pc, #116]	; (8003954 <G+0xa4>)
 80038de:	f7ff fbff 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80038e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038ea:	f7ff fbf9 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80038ee:	2108      	movs	r1, #8
 80038f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038f4:	f7ff fbf4 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80038f8:	2110      	movs	r1, #16
 80038fa:	4816      	ldr	r0, [pc, #88]	; (8003954 <G+0xa4>)
 80038fc:	f7ff fbf0 	bl	80030e0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003900:	2102      	movs	r1, #2
 8003902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003906:	f7ff fbf9 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800390a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800390e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003912:	f7ff fbf3 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003916:	2120      	movs	r1, #32
 8003918:	480e      	ldr	r0, [pc, #56]	; (8003954 <G+0xa4>)
 800391a:	f7ff fbef 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800391e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003926:	f7ff fbe9 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800392a:	2108      	movs	r1, #8
 800392c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003930:	f7ff fbe4 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);

	if(activeDP)
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d004      	beq.n	8003944 <G+0x94>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 800393a:	2102      	movs	r1, #2
 800393c:	4805      	ldr	r0, [pc, #20]	; (8003954 <G+0xa4>)
 800393e:	f7ff fbdd 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003942:	e003      	b.n	800394c <G+0x9c>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003944:	2102      	movs	r1, #2
 8003946:	4803      	ldr	r0, [pc, #12]	; (8003954 <G+0xa4>)
 8003948:	f7ff fbca 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	48000400 	.word	0x48000400

08003958 <T>:


void T(bool activeDP){
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003962:	2102      	movs	r1, #2
 8003964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003968:	f7ff fbba 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 800396c:	2101      	movs	r1, #1
 800396e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003972:	f7ff fbb5 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800397a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800397e:	f7ff fbaf 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003982:	2120      	movs	r1, #32
 8003984:	481a      	ldr	r0, [pc, #104]	; (80039f0 <T+0x98>)
 8003986:	f7ff fbab 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800398a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800398e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003992:	f7ff fba5 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003996:	2108      	movs	r1, #8
 8003998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800399c:	f7ff fba0 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80039a0:	2110      	movs	r1, #16
 80039a2:	4813      	ldr	r0, [pc, #76]	; (80039f0 <T+0x98>)
 80039a4:	f7ff fb9c 	bl	80030e0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80039a8:	2120      	movs	r1, #32
 80039aa:	4811      	ldr	r0, [pc, #68]	; (80039f0 <T+0x98>)
 80039ac:	f7ff fba6 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80039b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80039b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039b8:	f7ff fba0 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80039bc:	2108      	movs	r1, #8
 80039be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039c2:	f7ff fb9b 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80039c6:	2110      	movs	r1, #16
 80039c8:	4809      	ldr	r0, [pc, #36]	; (80039f0 <T+0x98>)
 80039ca:	f7ff fb97 	bl	80030fc <LL_GPIO_ResetOutputPin>

	if(activeDP)
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d004      	beq.n	80039de <T+0x86>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80039d4:	2102      	movs	r1, #2
 80039d6:	4806      	ldr	r0, [pc, #24]	; (80039f0 <T+0x98>)
 80039d8:	f7ff fb90 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 80039dc:	e003      	b.n	80039e6 <T+0x8e>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80039de:	2102      	movs	r1, #2
 80039e0:	4803      	ldr	r0, [pc, #12]	; (80039f0 <T+0x98>)
 80039e2:	f7ff fb7d 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	48000400 	.word	0x48000400

080039f4 <P>:


void P(bool activeDP){
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80039fe:	2102      	movs	r1, #2
 8003a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a04:	f7ff fb6c 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003a08:	2101      	movs	r1, #1
 8003a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a0e:	f7ff fb67 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003a12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a1a:	f7ff fb61 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003a1e:	2120      	movs	r1, #32
 8003a20:	481d      	ldr	r0, [pc, #116]	; (8003a98 <P+0xa4>)
 8003a22:	f7ff fb5d 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003a26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a2e:	f7ff fb57 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003a32:	2108      	movs	r1, #8
 8003a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a38:	f7ff fb52 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003a3c:	2110      	movs	r1, #16
 8003a3e:	4816      	ldr	r0, [pc, #88]	; (8003a98 <P+0xa4>)
 8003a40:	f7ff fb4e 	bl	80030e0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003a44:	2102      	movs	r1, #2
 8003a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a4a:	f7ff fb57 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003a4e:	2101      	movs	r1, #1
 8003a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a54:	f7ff fb52 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003a58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a60:	f7ff fb4c 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003a64:	2108      	movs	r1, #8
 8003a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a6a:	f7ff fb47 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003a6e:	2110      	movs	r1, #16
 8003a70:	4809      	ldr	r0, [pc, #36]	; (8003a98 <P+0xa4>)
 8003a72:	f7ff fb43 	bl	80030fc <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d004      	beq.n	8003a86 <P+0x92>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	4806      	ldr	r0, [pc, #24]	; (8003a98 <P+0xa4>)
 8003a80:	f7ff fb3c 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003a84:	e003      	b.n	8003a8e <P+0x9a>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003a86:	2102      	movs	r1, #2
 8003a88:	4803      	ldr	r0, [pc, #12]	; (8003a98 <P+0xa4>)
 8003a8a:	f7ff fb29 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	48000400 	.word	0x48000400

08003a9c <H>:



void H(bool activeDP){
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003aa6:	2102      	movs	r1, #2
 8003aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aac:	f7ff fb18 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ab6:	f7ff fb13 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003aba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ac2:	f7ff fb0d 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003ac6:	2120      	movs	r1, #32
 8003ac8:	481b      	ldr	r0, [pc, #108]	; (8003b38 <H+0x9c>)
 8003aca:	f7ff fb09 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003ace:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ad6:	f7ff fb03 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003ada:	2108      	movs	r1, #8
 8003adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ae0:	f7ff fafe 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003ae4:	2110      	movs	r1, #16
 8003ae6:	4814      	ldr	r0, [pc, #80]	; (8003b38 <H+0x9c>)
 8003ae8:	f7ff fafa 	bl	80030e0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003aec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003af4:	f7ff fb02 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003af8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b00:	f7ff fafc 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003b04:	2108      	movs	r1, #8
 8003b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b0a:	f7ff faf7 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003b0e:	2110      	movs	r1, #16
 8003b10:	4809      	ldr	r0, [pc, #36]	; (8003b38 <H+0x9c>)
 8003b12:	f7ff faf3 	bl	80030fc <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <H+0x8a>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003b1c:	2102      	movs	r1, #2
 8003b1e:	4806      	ldr	r0, [pc, #24]	; (8003b38 <H+0x9c>)
 8003b20:	f7ff faec 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003b24:	e003      	b.n	8003b2e <H+0x92>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003b26:	2102      	movs	r1, #2
 8003b28:	4803      	ldr	r0, [pc, #12]	; (8003b38 <H+0x9c>)
 8003b2a:	f7ff fad9 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	48000400 	.word	0x48000400

08003b3c <U>:


void U(bool activeDP){
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003b46:	2102      	movs	r1, #2
 8003b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b4c:	f7ff fac8 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003b50:	2101      	movs	r1, #1
 8003b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b56:	f7ff fac3 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003b5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b62:	f7ff fabd 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003b66:	2120      	movs	r1, #32
 8003b68:	481d      	ldr	r0, [pc, #116]	; (8003be0 <U+0xa4>)
 8003b6a:	f7ff fab9 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003b6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b76:	f7ff fab3 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003b7a:	2108      	movs	r1, #8
 8003b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b80:	f7ff faae 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003b84:	2110      	movs	r1, #16
 8003b86:	4816      	ldr	r0, [pc, #88]	; (8003be0 <U+0xa4>)
 8003b88:	f7ff faaa 	bl	80030e0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b92:	f7ff fab3 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003b96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b9e:	f7ff faad 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003ba2:	2120      	movs	r1, #32
 8003ba4:	480e      	ldr	r0, [pc, #56]	; (8003be0 <U+0xa4>)
 8003ba6:	f7ff faa9 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003baa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bb2:	f7ff faa3 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003bb6:	2108      	movs	r1, #8
 8003bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bbc:	f7ff fa9e 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);

	if(activeDP)
 8003bc0:	79fb      	ldrb	r3, [r7, #7]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d004      	beq.n	8003bd0 <U+0x94>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003bc6:	2102      	movs	r1, #2
 8003bc8:	4805      	ldr	r0, [pc, #20]	; (8003be0 <U+0xa4>)
 8003bca:	f7ff fa97 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003bce:	e003      	b.n	8003bd8 <U+0x9c>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003bd0:	2102      	movs	r1, #2
 8003bd2:	4803      	ldr	r0, [pc, #12]	; (8003be0 <U+0xa4>)
 8003bd4:	f7ff fa84 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	48000400 	.word	0x48000400

08003be4 <one>:
//numbers:




void one(bool activeDP){
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003bee:	2102      	movs	r1, #2
 8003bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bf4:	f7ff fa74 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bfe:	f7ff fa6f 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c0a:	f7ff fa69 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003c0e:	2120      	movs	r1, #32
 8003c10:	4816      	ldr	r0, [pc, #88]	; (8003c6c <one+0x88>)
 8003c12:	f7ff fa65 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003c16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c1e:	f7ff fa5f 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003c22:	2108      	movs	r1, #8
 8003c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c28:	f7ff fa5a 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003c2c:	2110      	movs	r1, #16
 8003c2e:	480f      	ldr	r0, [pc, #60]	; (8003c6c <one+0x88>)
 8003c30:	f7ff fa56 	bl	80030e0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003c34:	2101      	movs	r1, #1
 8003c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c3a:	f7ff fa5f 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c46:	f7ff fa59 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);

	if(activeDP)
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d004      	beq.n	8003c5a <one+0x76>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003c50:	2102      	movs	r1, #2
 8003c52:	4806      	ldr	r0, [pc, #24]	; (8003c6c <one+0x88>)
 8003c54:	f7ff fa52 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003c58:	e003      	b.n	8003c62 <one+0x7e>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	4803      	ldr	r0, [pc, #12]	; (8003c6c <one+0x88>)
 8003c5e:	f7ff fa3f 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 8003c62:	bf00      	nop
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	48000400 	.word	0x48000400

08003c70 <three>:

void three(bool activeDP){
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003c7a:	2102      	movs	r1, #2
 8003c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c80:	f7ff fa2e 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003c84:	2101      	movs	r1, #1
 8003c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c8a:	f7ff fa29 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003c8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c96:	f7ff fa23 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003c9a:	2120      	movs	r1, #32
 8003c9c:	481c      	ldr	r0, [pc, #112]	; (8003d10 <three+0xa0>)
 8003c9e:	f7ff fa1f 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003ca2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003caa:	f7ff fa19 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003cae:	2108      	movs	r1, #8
 8003cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cb4:	f7ff fa14 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003cb8:	2110      	movs	r1, #16
 8003cba:	4815      	ldr	r0, [pc, #84]	; (8003d10 <three+0xa0>)
 8003cbc:	f7ff fa10 	bl	80030e0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003cc0:	2102      	movs	r1, #2
 8003cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cc6:	f7ff fa19 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003cca:	2101      	movs	r1, #1
 8003ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cd0:	f7ff fa14 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003cd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cdc:	f7ff fa0e 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003ce0:	2120      	movs	r1, #32
 8003ce2:	480b      	ldr	r0, [pc, #44]	; (8003d10 <three+0xa0>)
 8003ce4:	f7ff fa0a 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003ce8:	2110      	movs	r1, #16
 8003cea:	4809      	ldr	r0, [pc, #36]	; (8003d10 <three+0xa0>)
 8003cec:	f7ff fa06 	bl	80030fc <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d004      	beq.n	8003d00 <three+0x90>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	4805      	ldr	r0, [pc, #20]	; (8003d10 <three+0xa0>)
 8003cfa:	f7ff f9ff 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003cfe:	e003      	b.n	8003d08 <three+0x98>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003d00:	2102      	movs	r1, #2
 8003d02:	4803      	ldr	r0, [pc, #12]	; (8003d10 <three+0xa0>)
 8003d04:	f7ff f9ec 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 8003d08:	bf00      	nop
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	48000400 	.word	0x48000400

08003d14 <eight>:

void eight(bool activeDP){
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003d1e:	2102      	movs	r1, #2
 8003d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d24:	f7ff f9dc 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003d28:	2101      	movs	r1, #1
 8003d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d2e:	f7ff f9d7 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003d32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d3a:	f7ff f9d1 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003d3e:	2120      	movs	r1, #32
 8003d40:	4822      	ldr	r0, [pc, #136]	; (8003dcc <eight+0xb8>)
 8003d42:	f7ff f9cd 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003d46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d4e:	f7ff f9c7 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003d52:	2108      	movs	r1, #8
 8003d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d58:	f7ff f9c2 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003d5c:	2110      	movs	r1, #16
 8003d5e:	481b      	ldr	r0, [pc, #108]	; (8003dcc <eight+0xb8>)
 8003d60:	f7ff f9be 	bl	80030e0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003d64:	2102      	movs	r1, #2
 8003d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d6a:	f7ff f9c7 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003d6e:	2101      	movs	r1, #1
 8003d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d74:	f7ff f9c2 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003d78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d80:	f7ff f9bc 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003d84:	2120      	movs	r1, #32
 8003d86:	4811      	ldr	r0, [pc, #68]	; (8003dcc <eight+0xb8>)
 8003d88:	f7ff f9b8 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003d8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d94:	f7ff f9b2 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003d98:	2108      	movs	r1, #8
 8003d9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d9e:	f7ff f9ad 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003da2:	2110      	movs	r1, #16
 8003da4:	4809      	ldr	r0, [pc, #36]	; (8003dcc <eight+0xb8>)
 8003da6:	f7ff f9a9 	bl	80030fc <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d004      	beq.n	8003dba <eight+0xa6>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003db0:	2102      	movs	r1, #2
 8003db2:	4806      	ldr	r0, [pc, #24]	; (8003dcc <eight+0xb8>)
 8003db4:	f7ff f9a2 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003db8:	e003      	b.n	8003dc2 <eight+0xae>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003dba:	2102      	movs	r1, #2
 8003dbc:	4803      	ldr	r0, [pc, #12]	; (8003dcc <eight+0xb8>)
 8003dbe:	f7ff f98f 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	48000400 	.word	0x48000400

08003dd0 <six>:
void six(bool activeDP){
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003dda:	2102      	movs	r1, #2
 8003ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003de0:	f7ff f97e 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003de4:	2101      	movs	r1, #1
 8003de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dea:	f7ff f979 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003df6:	f7ff f973 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003dfa:	2120      	movs	r1, #32
 8003dfc:	481f      	ldr	r0, [pc, #124]	; (8003e7c <six+0xac>)
 8003dfe:	f7ff f96f 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003e02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e0a:	f7ff f969 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003e0e:	2108      	movs	r1, #8
 8003e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e14:	f7ff f964 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003e18:	2110      	movs	r1, #16
 8003e1a:	4818      	ldr	r0, [pc, #96]	; (8003e7c <six+0xac>)
 8003e1c:	f7ff f960 	bl	80030e0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003e20:	2102      	movs	r1, #2
 8003e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e26:	f7ff f969 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003e2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e32:	f7ff f963 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003e36:	2120      	movs	r1, #32
 8003e38:	4810      	ldr	r0, [pc, #64]	; (8003e7c <six+0xac>)
 8003e3a:	f7ff f95f 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003e3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e46:	f7ff f959 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003e4a:	2108      	movs	r1, #8
 8003e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e50:	f7ff f954 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003e54:	2110      	movs	r1, #16
 8003e56:	4809      	ldr	r0, [pc, #36]	; (8003e7c <six+0xac>)
 8003e58:	f7ff f950 	bl	80030fc <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d004      	beq.n	8003e6c <six+0x9c>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003e62:	2102      	movs	r1, #2
 8003e64:	4805      	ldr	r0, [pc, #20]	; (8003e7c <six+0xac>)
 8003e66:	f7ff f949 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003e6a:	e003      	b.n	8003e74 <six+0xa4>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003e6c:	2102      	movs	r1, #2
 8003e6e:	4803      	ldr	r0, [pc, #12]	; (8003e7c <six+0xac>)
 8003e70:	f7ff f936 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	48000400 	.word	0x48000400

08003e80 <four>:


void four(bool activeDP){
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e90:	f7ff f926 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003e94:	2101      	movs	r1, #1
 8003e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e9a:	f7ff f921 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003e9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ea6:	f7ff f91b 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003eaa:	2120      	movs	r1, #32
 8003eac:	481a      	ldr	r0, [pc, #104]	; (8003f18 <four+0x98>)
 8003eae:	f7ff f917 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003eb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eba:	f7ff f911 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003ebe:	2108      	movs	r1, #8
 8003ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ec4:	f7ff f90c 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003ec8:	2110      	movs	r1, #16
 8003eca:	4813      	ldr	r0, [pc, #76]	; (8003f18 <four+0x98>)
 8003ecc:	f7ff f908 	bl	80030e0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ed6:	f7ff f911 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003eda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ee2:	f7ff f90b 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003ee6:	2108      	movs	r1, #8
 8003ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eec:	f7ff f906 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003ef0:	2110      	movs	r1, #16
 8003ef2:	4809      	ldr	r0, [pc, #36]	; (8003f18 <four+0x98>)
 8003ef4:	f7ff f902 	bl	80030fc <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003ef8:	79fb      	ldrb	r3, [r7, #7]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d004      	beq.n	8003f08 <four+0x88>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003efe:	2102      	movs	r1, #2
 8003f00:	4805      	ldr	r0, [pc, #20]	; (8003f18 <four+0x98>)
 8003f02:	f7ff f8fb 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003f06:	e003      	b.n	8003f10 <four+0x90>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003f08:	2102      	movs	r1, #2
 8003f0a:	4803      	ldr	r0, [pc, #12]	; (8003f18 <four+0x98>)
 8003f0c:	f7ff f8e8 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	48000400 	.word	0x48000400

08003f1c <two>:

void two(bool activeDP){
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003f26:	2102      	movs	r1, #2
 8003f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f2c:	f7ff f8d8 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003f30:	2101      	movs	r1, #1
 8003f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f36:	f7ff f8d3 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003f3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f42:	f7ff f8cd 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003f46:	2120      	movs	r1, #32
 8003f48:	481c      	ldr	r0, [pc, #112]	; (8003fbc <two+0xa0>)
 8003f4a:	f7ff f8c9 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003f4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f56:	f7ff f8c3 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003f5a:	2108      	movs	r1, #8
 8003f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f60:	f7ff f8be 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003f64:	2110      	movs	r1, #16
 8003f66:	4815      	ldr	r0, [pc, #84]	; (8003fbc <two+0xa0>)
 8003f68:	f7ff f8ba 	bl	80030e0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f72:	f7ff f8c3 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003f76:	2101      	movs	r1, #1
 8003f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f7c:	f7ff f8be 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003f80:	2120      	movs	r1, #32
 8003f82:	480e      	ldr	r0, [pc, #56]	; (8003fbc <two+0xa0>)
 8003f84:	f7ff f8ba 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003f88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f90:	f7ff f8b4 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8003f94:	2110      	movs	r1, #16
 8003f96:	4809      	ldr	r0, [pc, #36]	; (8003fbc <two+0xa0>)
 8003f98:	f7ff f8b0 	bl	80030fc <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d004      	beq.n	8003fac <two+0x90>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003fa2:	2102      	movs	r1, #2
 8003fa4:	4805      	ldr	r0, [pc, #20]	; (8003fbc <two+0xa0>)
 8003fa6:	f7ff f8a9 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8003faa:	e003      	b.n	8003fb4 <two+0x98>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8003fac:	2102      	movs	r1, #2
 8003fae:	4803      	ldr	r0, [pc, #12]	; (8003fbc <two+0xa0>)
 8003fb0:	f7ff f896 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	48000400 	.word	0x48000400

08003fc0 <five>:

void five(bool activeDP){
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8003fca:	2102      	movs	r1, #2
 8003fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fd0:	f7ff f886 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fda:	f7ff f881 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8003fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fe6:	f7ff f87b 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8003fea:	2120      	movs	r1, #32
 8003fec:	481c      	ldr	r0, [pc, #112]	; (8004060 <five+0xa0>)
 8003fee:	f7ff f877 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8003ff2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ffa:	f7ff f871 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8003ffe:	2108      	movs	r1, #8
 8004000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004004:	f7ff f86c 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8004008:	2110      	movs	r1, #16
 800400a:	4815      	ldr	r0, [pc, #84]	; (8004060 <five+0xa0>)
 800400c:	f7ff f868 	bl	80030e0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8004010:	2102      	movs	r1, #2
 8004012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004016:	f7ff f871 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800401a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800401e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004022:	f7ff f86b 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8004026:	2120      	movs	r1, #32
 8004028:	480d      	ldr	r0, [pc, #52]	; (8004060 <five+0xa0>)
 800402a:	f7ff f867 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800402e:	2108      	movs	r1, #8
 8004030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004034:	f7ff f862 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8004038:	2110      	movs	r1, #16
 800403a:	4809      	ldr	r0, [pc, #36]	; (8004060 <five+0xa0>)
 800403c:	f7ff f85e 	bl	80030fc <LL_GPIO_ResetOutputPin>

	if(activeDP)
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d004      	beq.n	8004050 <five+0x90>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8004046:	2102      	movs	r1, #2
 8004048:	4805      	ldr	r0, [pc, #20]	; (8004060 <five+0xa0>)
 800404a:	f7ff f857 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 800404e:	e003      	b.n	8004058 <five+0x98>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8004050:	2102      	movs	r1, #2
 8004052:	4803      	ldr	r0, [pc, #12]	; (8004060 <five+0xa0>)
 8004054:	f7ff f844 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	48000400 	.word	0x48000400

08004064 <seven>:


void seven(bool activeDP){
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	4603      	mov	r3, r0
 800406c:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 800406e:	2102      	movs	r1, #2
 8004070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004074:	f7ff f834 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8004078:	2101      	movs	r1, #1
 800407a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800407e:	f7ff f82f 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8004082:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800408a:	f7ff f829 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800408e:	2120      	movs	r1, #32
 8004090:	4818      	ldr	r0, [pc, #96]	; (80040f4 <seven+0x90>)
 8004092:	f7ff f825 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8004096:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800409a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800409e:	f7ff f81f 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80040a2:	2108      	movs	r1, #8
 80040a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040a8:	f7ff f81a 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80040ac:	2110      	movs	r1, #16
 80040ae:	4811      	ldr	r0, [pc, #68]	; (80040f4 <seven+0x90>)
 80040b0:	f7ff f816 	bl	80030e0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80040b4:	2102      	movs	r1, #2
 80040b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040ba:	f7ff f81f 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80040be:	2101      	movs	r1, #1
 80040c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040c4:	f7ff f81a 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80040c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040d0:	f7ff f814 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);

	if(activeDP)
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d004      	beq.n	80040e4 <seven+0x80>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80040da:	2102      	movs	r1, #2
 80040dc:	4805      	ldr	r0, [pc, #20]	; (80040f4 <seven+0x90>)
 80040de:	f7ff f80d 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 80040e2:	e003      	b.n	80040ec <seven+0x88>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 80040e4:	2102      	movs	r1, #2
 80040e6:	4803      	ldr	r0, [pc, #12]	; (80040f4 <seven+0x90>)
 80040e8:	f7fe fffa 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 80040ec:	bf00      	nop
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	48000400 	.word	0x48000400

080040f8 <nine>:



void nine(bool activeDP){
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	4603      	mov	r3, r0
 8004100:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8004102:	2102      	movs	r1, #2
 8004104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004108:	f7fe ffea 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 800410c:	2101      	movs	r1, #1
 800410e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004112:	f7fe ffe5 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8004116:	f44f 7180 	mov.w	r1, #256	; 0x100
 800411a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800411e:	f7fe ffdf 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8004122:	2120      	movs	r1, #32
 8004124:	481d      	ldr	r0, [pc, #116]	; (800419c <nine+0xa4>)
 8004126:	f7fe ffdb 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800412a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800412e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004132:	f7fe ffd5 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8004136:	2108      	movs	r1, #8
 8004138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800413c:	f7fe ffd0 	bl	80030e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8004140:	2110      	movs	r1, #16
 8004142:	4816      	ldr	r0, [pc, #88]	; (800419c <nine+0xa4>)
 8004144:	f7fe ffcc 	bl	80030e0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8004148:	2102      	movs	r1, #2
 800414a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800414e:	f7fe ffd5 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8004152:	2101      	movs	r1, #1
 8004154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004158:	f7fe ffd0 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800415c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004164:	f7fe ffca 	bl	80030fc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8004168:	2108      	movs	r1, #8
 800416a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800416e:	f7fe ffc5 	bl	80030fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8004172:	2110      	movs	r1, #16
 8004174:	4809      	ldr	r0, [pc, #36]	; (800419c <nine+0xa4>)
 8004176:	f7fe ffc1 	bl	80030fc <LL_GPIO_ResetOutputPin>

	if(activeDP)
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d004      	beq.n	800418a <nine+0x92>
		LL_GPIO_ResetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 8004180:	2102      	movs	r1, #2
 8004182:	4806      	ldr	r0, [pc, #24]	; (800419c <nine+0xa4>)
 8004184:	f7fe ffba 	bl	80030fc <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);

}
 8004188:	e003      	b.n	8004192 <nine+0x9a>
		LL_GPIO_SetOutputPin(segment_DP_GPIO_Port, segment_DP_Pin);
 800418a:	2102      	movs	r1, #2
 800418c:	4803      	ldr	r0, [pc, #12]	; (800419c <nine+0xa4>)
 800418e:	f7fe ffa7 	bl	80030e0 <LL_GPIO_SetOutputPin>
}
 8004192:	bf00      	nop
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	48000400 	.word	0x48000400

080041a0 <HTS221_readArray>:
	i2c_master_write(value, reg_addr, addres_hts221, 0);
}


void HTS221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	70fb      	strb	r3, [r7, #3]
 80041ac:	4613      	mov	r3, r2
 80041ae:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres_hts221, 1);
 80041b0:	4b06      	ldr	r3, [pc, #24]	; (80041cc <HTS221_readArray+0x2c>)
 80041b2:	7818      	ldrb	r0, [r3, #0]
 80041b4:	78fa      	ldrb	r2, [r7, #3]
 80041b6:	78b9      	ldrb	r1, [r7, #2]
 80041b8:	2301      	movs	r3, #1
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	4603      	mov	r3, r0
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fd f9fc 	bl	80015bc <i2c_master_read>
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	2000000a 	.word	0x2000000a

080041d0 <HTS221_get_temp>:


float HTS221_get_temp()
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0
	int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
	int16_t T0_degC, T1_degC;
	uint8_t data[4], tmp;
	int32_t tmp1;

	HTS221_readArray(data, 0x32, 2);
 80041d6:	f107 0308 	add.w	r3, r7, #8
 80041da:	2202      	movs	r2, #2
 80041dc:	2132      	movs	r1, #50	; 0x32
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff ffde 	bl	80041a0 <HTS221_readArray>
    HTS221_readArray(&tmp, 0x35, 1);
 80041e4:	1dfb      	adds	r3, r7, #7
 80041e6:	2201      	movs	r2, #1
 80041e8:	2135      	movs	r1, #53	; 0x35
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff ffd8 	bl	80041a0 <HTS221_readArray>

    T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)data[0]);
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	021b      	lsls	r3, r3, #8
 80041f4:	b21b      	sxth	r3, r3
 80041f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fa:	b21a      	sxth	r2, r3
 80041fc:	7a3b      	ldrb	r3, [r7, #8]
 80041fe:	b21b      	sxth	r3, r3
 8004200:	4313      	orrs	r3, r2
 8004202:	83fb      	strh	r3, [r7, #30]
    T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)data[1]);
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	019b      	lsls	r3, r3, #6
 8004208:	b21b      	sxth	r3, r3
 800420a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420e:	b21a      	sxth	r2, r3
 8004210:	7a7b      	ldrb	r3, [r7, #9]
 8004212:	b21b      	sxth	r3, r3
 8004214:	4313      	orrs	r3, r2
 8004216:	83bb      	strh	r3, [r7, #28]
    T0_degC = T0_degC_x8_u16>>3;
 8004218:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800421c:	10db      	asrs	r3, r3, #3
 800421e:	837b      	strh	r3, [r7, #26]
    T1_degC = T1_degC_x8_u16>>3;
 8004220:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004224:	10db      	asrs	r3, r3, #3
 8004226:	833b      	strh	r3, [r7, #24]


    HTS221_readArray(data, 0x3C, 4);
 8004228:	f107 0308 	add.w	r3, r7, #8
 800422c:	2204      	movs	r2, #4
 800422e:	213c      	movs	r1, #60	; 0x3c
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff ffb5 	bl	80041a0 <HTS221_readArray>

    T0_out = (((uint16_t)data[1])<<8) | (uint16_t)data[0];
 8004236:	7a7b      	ldrb	r3, [r7, #9]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	b21a      	sxth	r2, r3
 800423c:	7a3b      	ldrb	r3, [r7, #8]
 800423e:	b21b      	sxth	r3, r3
 8004240:	4313      	orrs	r3, r2
 8004242:	82fb      	strh	r3, [r7, #22]
    T1_out = (((uint16_t)data[3])<<8) | (uint16_t)data[2];
 8004244:	7afb      	ldrb	r3, [r7, #11]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	b21a      	sxth	r2, r3
 800424a:	7abb      	ldrb	r3, [r7, #10]
 800424c:	b21b      	sxth	r3, r3
 800424e:	4313      	orrs	r3, r2
 8004250:	82bb      	strh	r3, [r7, #20]

    HTS221_readArray(data, 0x2A, 2);
 8004252:	f107 0308 	add.w	r3, r7, #8
 8004256:	2202      	movs	r2, #2
 8004258:	212a      	movs	r1, #42	; 0x2a
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff ffa0 	bl	80041a0 <HTS221_readArray>

    T_out = (((uint16_t)data[1])<<8) | (uint16_t)data[0];
 8004260:	7a7b      	ldrb	r3, [r7, #9]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	b21a      	sxth	r2, r3
 8004266:	7a3b      	ldrb	r3, [r7, #8]
 8004268:	b21b      	sxth	r3, r3
 800426a:	4313      	orrs	r3, r2
 800426c:	827b      	strh	r3, [r7, #18]


    tmp1 = ((T_out - T0_out)) * ((int32_t)(T1_degC - T0_degC)*10);
 800426e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004272:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004276:	1ad1      	subs	r1, r2, r3
 8004278:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800427c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004280:	1ad2      	subs	r2, r2, r3
 8004282:	4613      	mov	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	fb03 f301 	mul.w	r3, r3, r1
 800428e:	60fb      	str	r3, [r7, #12]


    if(((tmp1 /(T1_out - T0_out) + T0_degC*10) / 10.0f) >= 100)
 8004290:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004294:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	fb92 f1f3 	sdiv	r1, r2, r3
 80042a0:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	440b      	add	r3, r1
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042b6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80042ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042be:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800434c <HTS221_get_temp+0x17c>
 80042c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ca:	db02      	blt.n	80042d2 <HTS221_get_temp+0x102>
		return 99.9;
 80042cc:	eddf 7a20 	vldr	s15, [pc, #128]	; 8004350 <HTS221_get_temp+0x180>
 80042d0:	e037      	b.n	8004342 <HTS221_get_temp+0x172>


	if(((tmp1 /(T1_out - T0_out) + T0_degC*10) / 10.0f) <= -100)
 80042d2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80042d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	fb92 f1f3 	sdiv	r1, r2, r3
 80042e2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80042e6:	4613      	mov	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	440b      	add	r3, r1
 80042f0:	ee07 3a90 	vmov	s15, r3
 80042f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042f8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80042fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004300:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004354 <HTS221_get_temp+0x184>
 8004304:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800430c:	d802      	bhi.n	8004314 <HTS221_get_temp+0x144>
		return -99.9;
 800430e:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004358 <HTS221_get_temp+0x188>
 8004312:	e016      	b.n	8004342 <HTS221_get_temp+0x172>


	return (tmp1 /(T1_out - T0_out) + T0_degC*10) / 10.0f;
 8004314:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004318:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	fb92 f1f3 	sdiv	r1, r2, r3
 8004324:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	440b      	add	r3, r1
 8004332:	ee07 3a90 	vmov	s15, r3
 8004336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800433a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800433e:	eec7 7a26 	vdiv.f32	s15, s14, s13

}
 8004342:	eeb0 0a67 	vmov.f32	s0, s15
 8004346:	3720      	adds	r7, #32
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	42c80000 	.word	0x42c80000
 8004350:	42c7cccd 	.word	0x42c7cccd
 8004354:	c2c80000 	.word	0xc2c80000
 8004358:	c2c7cccd 	.word	0xc2c7cccd

0800435c <HTS221_get_relhum>:


int HTS221_get_relhum()
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
	uint8_t data[2];
	int32_t tmp;
	float value;


	HTS221_readArray(data, 0x30, 2);
 8004362:	463b      	mov	r3, r7
 8004364:	2202      	movs	r2, #2
 8004366:	2130      	movs	r1, #48	; 0x30
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff ff19 	bl	80041a0 <HTS221_readArray>
	H0_rh = data[0]>>1;
 800436e:	783b      	ldrb	r3, [r7, #0]
 8004370:	085b      	lsrs	r3, r3, #1
 8004372:	b2db      	uxtb	r3, r3
 8004374:	827b      	strh	r3, [r7, #18]
	H1_rh = data[1]>>1;
 8004376:	787b      	ldrb	r3, [r7, #1]
 8004378:	085b      	lsrs	r3, r3, #1
 800437a:	b2db      	uxtb	r3, r3
 800437c:	823b      	strh	r3, [r7, #16]


	HTS221_readArray(data, 0x36, 2);
 800437e:	463b      	mov	r3, r7
 8004380:	2202      	movs	r2, #2
 8004382:	2136      	movs	r1, #54	; 0x36
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff ff0b 	bl	80041a0 <HTS221_readArray>
	H0_T0_out = (((uint16_t)data[1])<<8) | (uint16_t)data[0];
 800438a:	787b      	ldrb	r3, [r7, #1]
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	b21a      	sxth	r2, r3
 8004390:	783b      	ldrb	r3, [r7, #0]
 8004392:	b21b      	sxth	r3, r3
 8004394:	4313      	orrs	r3, r2
 8004396:	81fb      	strh	r3, [r7, #14]

	HTS221_readArray(data, 0x3A, 2);
 8004398:	463b      	mov	r3, r7
 800439a:	2202      	movs	r2, #2
 800439c:	213a      	movs	r1, #58	; 0x3a
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff fefe 	bl	80041a0 <HTS221_readArray>
	H1_T0_out = (((uint16_t)data[1])<<8) | (uint16_t)data[0];
 80043a4:	787b      	ldrb	r3, [r7, #1]
 80043a6:	021b      	lsls	r3, r3, #8
 80043a8:	b21a      	sxth	r2, r3
 80043aa:	783b      	ldrb	r3, [r7, #0]
 80043ac:	b21b      	sxth	r3, r3
 80043ae:	4313      	orrs	r3, r2
 80043b0:	81bb      	strh	r3, [r7, #12]


	HTS221_readArray(data, 0x28, 2);
 80043b2:	463b      	mov	r3, r7
 80043b4:	2202      	movs	r2, #2
 80043b6:	2128      	movs	r1, #40	; 0x28
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff fef1 	bl	80041a0 <HTS221_readArray>
	H_T_out = (((uint16_t)data[1])<<8) | (uint16_t)data[0];
 80043be:	787b      	ldrb	r3, [r7, #1]
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	b21a      	sxth	r2, r3
 80043c4:	783b      	ldrb	r3, [r7, #0]
 80043c6:	b21b      	sxth	r3, r3
 80043c8:	4313      	orrs	r3, r2
 80043ca:	817b      	strh	r3, [r7, #10]



	tmp = ((int32_t)(H_T_out - H0_T0_out)) * ((int32_t)(H1_rh - H0_rh)*10);
 80043cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80043d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043d4:	1ad1      	subs	r1, r2, r3
 80043d6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80043da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80043de:	1ad2      	subs	r2, r2, r3
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	fb03 f301 	mul.w	r3, r3, r1
 80043ec:	607b      	str	r3, [r7, #4]
	value = (tmp/(H1_T0_out - H0_T0_out) + H0_rh*10);
 80043ee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80043f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	fb92 f1f3 	sdiv	r1, r2, r3
 80043fe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	440b      	add	r3, r1
 800440c:	ee07 3a90 	vmov	s15, r3
 8004410:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004414:	edc7 7a05 	vstr	s15, [r7, #20]


	 if(value>1000)
 8004418:	edd7 7a05 	vldr	s15, [r7, #20]
 800441c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800444c <HTS221_get_relhum+0xf0>
 8004420:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004428:	dd01      	ble.n	800442e <HTS221_get_relhum+0xd2>
		 value = 1000;
 800442a:	4b09      	ldr	r3, [pc, #36]	; (8004450 <HTS221_get_relhum+0xf4>)
 800442c:	617b      	str	r3, [r7, #20]


	return (int)(value/10);
 800442e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004432:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004436:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800443a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800443e:	ee17 3a90 	vmov	r3, s15


}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	447a0000 	.word	0x447a0000
 8004450:	447a0000 	.word	0x447a0000

08004454 <LBS25HB_read_byte>:
uint8_t addres1 = LBS25HB_DEVICE_ADDRESS_0;



uint8_t LBS25HB_read_byte(uint8_t reg_addr)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af02      	add	r7, sp, #8
 800445a:	4603      	mov	r3, r0
 800445c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800445e:	2300      	movs	r3, #0
 8004460:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres1, 0));
 8004462:	4b08      	ldr	r3, [pc, #32]	; (8004484 <LBS25HB_read_byte+0x30>)
 8004464:	7819      	ldrb	r1, [r3, #0]
 8004466:	79fa      	ldrb	r2, [r7, #7]
 8004468:	f107 000f 	add.w	r0, r7, #15
 800446c:	2300      	movs	r3, #0
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	460b      	mov	r3, r1
 8004472:	2101      	movs	r1, #1
 8004474:	f7fd f8a2 	bl	80015bc <i2c_master_read>
 8004478:	4603      	mov	r3, r0
 800447a:	781b      	ldrb	r3, [r3, #0]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	2000000b 	.word	0x2000000b

08004488 <LBS25HB_write_byte>:


void LBS25HB_write_byte(uint8_t reg_addr, uint8_t value)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	4603      	mov	r3, r0
 8004490:	460a      	mov	r2, r1
 8004492:	71fb      	strb	r3, [r7, #7]
 8004494:	4613      	mov	r3, r2
 8004496:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres1, 0);
 8004498:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <LBS25HB_write_byte+0x28>)
 800449a:	781a      	ldrb	r2, [r3, #0]
 800449c:	79f9      	ldrb	r1, [r7, #7]
 800449e:	79b8      	ldrb	r0, [r7, #6]
 80044a0:	2300      	movs	r3, #0
 80044a2:	f7fd f847 	bl	8001534 <i2c_master_write>
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	2000000b 	.word	0x2000000b

080044b4 <LBS25HB_readArray>:


void LBS25HB_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	70fb      	strb	r3, [r7, #3]
 80044c0:	4613      	mov	r3, r2
 80044c2:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres1, 1);
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <LBS25HB_readArray+0x2c>)
 80044c6:	7818      	ldrb	r0, [r3, #0]
 80044c8:	78fa      	ldrb	r2, [r7, #3]
 80044ca:	78b9      	ldrb	r1, [r7, #2]
 80044cc:	2301      	movs	r3, #1
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	4603      	mov	r3, r0
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fd f872 	bl	80015bc <i2c_master_read>
}
 80044d8:	bf00      	nop
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	2000000b 	.word	0x2000000b

080044e4 <LBS25HB_init>:


uint8_t LBS25HB_init(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 80044ea:	2301      	movs	r3, #1
 80044ec:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 80044ee:	2064      	movs	r0, #100	; 0x64
 80044f0:	f7fe f81c 	bl	800252c <LL_mDelay>

	uint8_t val = LBS25HB_read_byte(LBS25HB_WHO_AM_I_ADDRES);
 80044f4:	200f      	movs	r0, #15
 80044f6:	f7ff ffad 	bl	8004454 <LBS25HB_read_byte>
 80044fa:	4603      	mov	r3, r0
 80044fc:	71bb      	strb	r3, [r7, #6]

	if(val == LBS25HB_WHO_AM_I_VALUE)
 80044fe:	79bb      	ldrb	r3, [r7, #6]
 8004500:	2bbd      	cmp	r3, #189	; 0xbd
 8004502:	d102      	bne.n	800450a <LBS25HB_init+0x26>
	{
		status = 1;
 8004504:	2301      	movs	r3, #1
 8004506:	71fb      	strb	r3, [r7, #7]
 8004508:	e00f      	b.n	800452a <LBS25HB_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres1 = LBS25HB_DEVICE_ADDRESS_1;
 800450a:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <LBS25HB_init+0x60>)
 800450c:	22b8      	movs	r2, #184	; 0xb8
 800450e:	701a      	strb	r2, [r3, #0]
		val = LBS25HB_read_byte(LBS25HB_WHO_AM_I_ADDRES);
 8004510:	200f      	movs	r0, #15
 8004512:	f7ff ff9f 	bl	8004454 <LBS25HB_read_byte>
 8004516:	4603      	mov	r3, r0
 8004518:	71bb      	strb	r3, [r7, #6]
		if(val == LBS25HB_WHO_AM_I_VALUE)
 800451a:	79bb      	ldrb	r3, [r7, #6]
 800451c:	2bbd      	cmp	r3, #189	; 0xbd
 800451e:	d102      	bne.n	8004526 <LBS25HB_init+0x42>
		{
			status = 1;
 8004520:	2301      	movs	r3, #1
 8004522:	71fb      	strb	r3, [r7, #7]
 8004524:	e001      	b.n	800452a <LBS25HB_init+0x46>
		}
		else
		{
			status = 0;
 8004526:	2300      	movs	r3, #0
 8004528:	71fb      	strb	r3, [r7, #7]
		}
	}



	uint8_t ctrl1 = 0xC0;
 800452a:	23c0      	movs	r3, #192	; 0xc0
 800452c:	717b      	strb	r3, [r7, #5]
	LBS25HB_write_byte(LBS25HB_ADDRESS_CTRL1, ctrl1);
 800452e:	797b      	ldrb	r3, [r7, #5]
 8004530:	4619      	mov	r1, r3
 8004532:	2020      	movs	r0, #32
 8004534:	f7ff ffa8 	bl	8004488 <LBS25HB_write_byte>



	return status;
 8004538:	79fb      	ldrb	r3, [r7, #7]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	2000000b 	.word	0x2000000b

08004548 <LBS25HB_get_pres>:



float LBS25HB_get_pres(){
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0


	uint8_t press[3];
	float pressure;

	LBS25HB_readArray( press, LBS25HB_ADDRESS_PRES_XL, 3);
 800454e:	463b      	mov	r3, r7
 8004550:	2203      	movs	r2, #3
 8004552:	2128      	movs	r1, #40	; 0x28
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff ffad 	bl	80044b4 <LBS25HB_readArray>

	pressure = ((uint32_t)press[2]) << 16 | ((uint16_t)press[1]) << 8 | press[0];
 800455a:	78bb      	ldrb	r3, [r7, #2]
 800455c:	041b      	lsls	r3, r3, #16
 800455e:	787a      	ldrb	r2, [r7, #1]
 8004560:	0212      	lsls	r2, r2, #8
 8004562:	4313      	orrs	r3, r2
 8004564:	783a      	ldrb	r2, [r7, #0]
 8004566:	4313      	orrs	r3, r2
 8004568:	ee07 3a90 	vmov	s15, r3
 800456c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004570:	edc7 7a01 	vstr	s15, [r7, #4]
	pressure/=4096;
 8004574:	ed97 7a01 	vldr	s14, [r7, #4]
 8004578:	eddf 6a06 	vldr	s13, [pc, #24]	; 8004594 <LBS25HB_get_pres+0x4c>
 800457c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004580:	edc7 7a01 	vstr	s15, [r7, #4]



	return pressure*1.00;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	ee07 3a90 	vmov	s15, r3


}
 800458a:	eeb0 0a67 	vmov.f32	s0, s15
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	45800000 	.word	0x45800000

08004598 <LBS25HB_calculate_altitude>:


float LBS25HB_calculate_altitude(float pressure)
{
 8004598:	b590      	push	{r4, r7, lr}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	ed87 0a01 	vstr	s0, [r7, #4]
	return (pow((pressure/1013.25), 1.0/5.2559)-1)/(-0.0000225577);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fb ffd0 	bl	8000548 <__aeabi_f2d>
 80045a8:	a31c      	add	r3, pc, #112	; (adr r3, 800461c <LBS25HB_calculate_altitude+0x84>)
 80045aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ae:	f7fc f94d 	bl	800084c <__aeabi_ddiv>
 80045b2:	4603      	mov	r3, r0
 80045b4:	460c      	mov	r4, r1
 80045b6:	ec44 3b17 	vmov	d7, r3, r4
 80045ba:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8004608 <LBS25HB_calculate_altitude+0x70>
 80045be:	eeb0 0a47 	vmov.f32	s0, s14
 80045c2:	eef0 0a67 	vmov.f32	s1, s15
 80045c6:	f002 f8d1 	bl	800676c <pow>
 80045ca:	ec51 0b10 	vmov	r0, r1, d0
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	4b11      	ldr	r3, [pc, #68]	; (8004618 <LBS25HB_calculate_altitude+0x80>)
 80045d4:	f7fb fe58 	bl	8000288 <__aeabi_dsub>
 80045d8:	4603      	mov	r3, r0
 80045da:	460c      	mov	r4, r1
 80045dc:	4618      	mov	r0, r3
 80045de:	4621      	mov	r1, r4
 80045e0:	a30b      	add	r3, pc, #44	; (adr r3, 8004610 <LBS25HB_calculate_altitude+0x78>)
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f7fc f931 	bl	800084c <__aeabi_ddiv>
 80045ea:	4603      	mov	r3, r0
 80045ec:	460c      	mov	r4, r1
 80045ee:	4618      	mov	r0, r3
 80045f0:	4621      	mov	r1, r4
 80045f2:	f7fc fad9 	bl	8000ba8 <__aeabi_d2f>
 80045f6:	4603      	mov	r3, r0
 80045f8:	ee07 3a90 	vmov	s15, r3
}
 80045fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	bd90      	pop	{r4, r7, pc}
 8004606:	bf00      	nop
 8004608:	744b1147 	.word	0x744b1147
 800460c:	3fc85a84 	.word	0x3fc85a84
 8004610:	572255df 	.word	0x572255df
 8004614:	bef7a749 	.word	0xbef7a749
 8004618:	3ff00000 	.word	0x3ff00000
 800461c:	00000000 	.word	0x00000000
 8004620:	408faa00 	.word	0x408faa00

08004624 <__errno>:
 8004624:	4b01      	ldr	r3, [pc, #4]	; (800462c <__errno+0x8>)
 8004626:	6818      	ldr	r0, [r3, #0]
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	2000000c 	.word	0x2000000c

08004630 <__libc_init_array>:
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	4e0d      	ldr	r6, [pc, #52]	; (8004668 <__libc_init_array+0x38>)
 8004634:	4c0d      	ldr	r4, [pc, #52]	; (800466c <__libc_init_array+0x3c>)
 8004636:	1ba4      	subs	r4, r4, r6
 8004638:	10a4      	asrs	r4, r4, #2
 800463a:	2500      	movs	r5, #0
 800463c:	42a5      	cmp	r5, r4
 800463e:	d109      	bne.n	8004654 <__libc_init_array+0x24>
 8004640:	4e0b      	ldr	r6, [pc, #44]	; (8004670 <__libc_init_array+0x40>)
 8004642:	4c0c      	ldr	r4, [pc, #48]	; (8004674 <__libc_init_array+0x44>)
 8004644:	f003 fb6a 	bl	8007d1c <_init>
 8004648:	1ba4      	subs	r4, r4, r6
 800464a:	10a4      	asrs	r4, r4, #2
 800464c:	2500      	movs	r5, #0
 800464e:	42a5      	cmp	r5, r4
 8004650:	d105      	bne.n	800465e <__libc_init_array+0x2e>
 8004652:	bd70      	pop	{r4, r5, r6, pc}
 8004654:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004658:	4798      	blx	r3
 800465a:	3501      	adds	r5, #1
 800465c:	e7ee      	b.n	800463c <__libc_init_array+0xc>
 800465e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004662:	4798      	blx	r3
 8004664:	3501      	adds	r5, #1
 8004666:	e7f2      	b.n	800464e <__libc_init_array+0x1e>
 8004668:	08008058 	.word	0x08008058
 800466c:	08008058 	.word	0x08008058
 8004670:	08008058 	.word	0x08008058
 8004674:	0800805c 	.word	0x0800805c

08004678 <malloc>:
 8004678:	4b02      	ldr	r3, [pc, #8]	; (8004684 <malloc+0xc>)
 800467a:	4601      	mov	r1, r0
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	f000 b859 	b.w	8004734 <_malloc_r>
 8004682:	bf00      	nop
 8004684:	2000000c 	.word	0x2000000c

08004688 <memset>:
 8004688:	4402      	add	r2, r0
 800468a:	4603      	mov	r3, r0
 800468c:	4293      	cmp	r3, r2
 800468e:	d100      	bne.n	8004692 <memset+0xa>
 8004690:	4770      	bx	lr
 8004692:	f803 1b01 	strb.w	r1, [r3], #1
 8004696:	e7f9      	b.n	800468c <memset+0x4>

08004698 <_free_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	4605      	mov	r5, r0
 800469c:	2900      	cmp	r1, #0
 800469e:	d045      	beq.n	800472c <_free_r+0x94>
 80046a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046a4:	1f0c      	subs	r4, r1, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bfb8      	it	lt
 80046aa:	18e4      	addlt	r4, r4, r3
 80046ac:	f001 fbb9 	bl	8005e22 <__malloc_lock>
 80046b0:	4a1f      	ldr	r2, [pc, #124]	; (8004730 <_free_r+0x98>)
 80046b2:	6813      	ldr	r3, [r2, #0]
 80046b4:	4610      	mov	r0, r2
 80046b6:	b933      	cbnz	r3, 80046c6 <_free_r+0x2e>
 80046b8:	6063      	str	r3, [r4, #4]
 80046ba:	6014      	str	r4, [r2, #0]
 80046bc:	4628      	mov	r0, r5
 80046be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046c2:	f001 bbaf 	b.w	8005e24 <__malloc_unlock>
 80046c6:	42a3      	cmp	r3, r4
 80046c8:	d90c      	bls.n	80046e4 <_free_r+0x4c>
 80046ca:	6821      	ldr	r1, [r4, #0]
 80046cc:	1862      	adds	r2, r4, r1
 80046ce:	4293      	cmp	r3, r2
 80046d0:	bf04      	itt	eq
 80046d2:	681a      	ldreq	r2, [r3, #0]
 80046d4:	685b      	ldreq	r3, [r3, #4]
 80046d6:	6063      	str	r3, [r4, #4]
 80046d8:	bf04      	itt	eq
 80046da:	1852      	addeq	r2, r2, r1
 80046dc:	6022      	streq	r2, [r4, #0]
 80046de:	6004      	str	r4, [r0, #0]
 80046e0:	e7ec      	b.n	80046bc <_free_r+0x24>
 80046e2:	4613      	mov	r3, r2
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	b10a      	cbz	r2, 80046ec <_free_r+0x54>
 80046e8:	42a2      	cmp	r2, r4
 80046ea:	d9fa      	bls.n	80046e2 <_free_r+0x4a>
 80046ec:	6819      	ldr	r1, [r3, #0]
 80046ee:	1858      	adds	r0, r3, r1
 80046f0:	42a0      	cmp	r0, r4
 80046f2:	d10b      	bne.n	800470c <_free_r+0x74>
 80046f4:	6820      	ldr	r0, [r4, #0]
 80046f6:	4401      	add	r1, r0
 80046f8:	1858      	adds	r0, r3, r1
 80046fa:	4282      	cmp	r2, r0
 80046fc:	6019      	str	r1, [r3, #0]
 80046fe:	d1dd      	bne.n	80046bc <_free_r+0x24>
 8004700:	6810      	ldr	r0, [r2, #0]
 8004702:	6852      	ldr	r2, [r2, #4]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	4401      	add	r1, r0
 8004708:	6019      	str	r1, [r3, #0]
 800470a:	e7d7      	b.n	80046bc <_free_r+0x24>
 800470c:	d902      	bls.n	8004714 <_free_r+0x7c>
 800470e:	230c      	movs	r3, #12
 8004710:	602b      	str	r3, [r5, #0]
 8004712:	e7d3      	b.n	80046bc <_free_r+0x24>
 8004714:	6820      	ldr	r0, [r4, #0]
 8004716:	1821      	adds	r1, r4, r0
 8004718:	428a      	cmp	r2, r1
 800471a:	bf04      	itt	eq
 800471c:	6811      	ldreq	r1, [r2, #0]
 800471e:	6852      	ldreq	r2, [r2, #4]
 8004720:	6062      	str	r2, [r4, #4]
 8004722:	bf04      	itt	eq
 8004724:	1809      	addeq	r1, r1, r0
 8004726:	6021      	streq	r1, [r4, #0]
 8004728:	605c      	str	r4, [r3, #4]
 800472a:	e7c7      	b.n	80046bc <_free_r+0x24>
 800472c:	bd38      	pop	{r3, r4, r5, pc}
 800472e:	bf00      	nop
 8004730:	20000208 	.word	0x20000208

08004734 <_malloc_r>:
 8004734:	b570      	push	{r4, r5, r6, lr}
 8004736:	1ccd      	adds	r5, r1, #3
 8004738:	f025 0503 	bic.w	r5, r5, #3
 800473c:	3508      	adds	r5, #8
 800473e:	2d0c      	cmp	r5, #12
 8004740:	bf38      	it	cc
 8004742:	250c      	movcc	r5, #12
 8004744:	2d00      	cmp	r5, #0
 8004746:	4606      	mov	r6, r0
 8004748:	db01      	blt.n	800474e <_malloc_r+0x1a>
 800474a:	42a9      	cmp	r1, r5
 800474c:	d903      	bls.n	8004756 <_malloc_r+0x22>
 800474e:	230c      	movs	r3, #12
 8004750:	6033      	str	r3, [r6, #0]
 8004752:	2000      	movs	r0, #0
 8004754:	bd70      	pop	{r4, r5, r6, pc}
 8004756:	f001 fb64 	bl	8005e22 <__malloc_lock>
 800475a:	4a21      	ldr	r2, [pc, #132]	; (80047e0 <_malloc_r+0xac>)
 800475c:	6814      	ldr	r4, [r2, #0]
 800475e:	4621      	mov	r1, r4
 8004760:	b991      	cbnz	r1, 8004788 <_malloc_r+0x54>
 8004762:	4c20      	ldr	r4, [pc, #128]	; (80047e4 <_malloc_r+0xb0>)
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	b91b      	cbnz	r3, 8004770 <_malloc_r+0x3c>
 8004768:	4630      	mov	r0, r6
 800476a:	f000 fc99 	bl	80050a0 <_sbrk_r>
 800476e:	6020      	str	r0, [r4, #0]
 8004770:	4629      	mov	r1, r5
 8004772:	4630      	mov	r0, r6
 8004774:	f000 fc94 	bl	80050a0 <_sbrk_r>
 8004778:	1c43      	adds	r3, r0, #1
 800477a:	d124      	bne.n	80047c6 <_malloc_r+0x92>
 800477c:	230c      	movs	r3, #12
 800477e:	6033      	str	r3, [r6, #0]
 8004780:	4630      	mov	r0, r6
 8004782:	f001 fb4f 	bl	8005e24 <__malloc_unlock>
 8004786:	e7e4      	b.n	8004752 <_malloc_r+0x1e>
 8004788:	680b      	ldr	r3, [r1, #0]
 800478a:	1b5b      	subs	r3, r3, r5
 800478c:	d418      	bmi.n	80047c0 <_malloc_r+0x8c>
 800478e:	2b0b      	cmp	r3, #11
 8004790:	d90f      	bls.n	80047b2 <_malloc_r+0x7e>
 8004792:	600b      	str	r3, [r1, #0]
 8004794:	50cd      	str	r5, [r1, r3]
 8004796:	18cc      	adds	r4, r1, r3
 8004798:	4630      	mov	r0, r6
 800479a:	f001 fb43 	bl	8005e24 <__malloc_unlock>
 800479e:	f104 000b 	add.w	r0, r4, #11
 80047a2:	1d23      	adds	r3, r4, #4
 80047a4:	f020 0007 	bic.w	r0, r0, #7
 80047a8:	1ac3      	subs	r3, r0, r3
 80047aa:	d0d3      	beq.n	8004754 <_malloc_r+0x20>
 80047ac:	425a      	negs	r2, r3
 80047ae:	50e2      	str	r2, [r4, r3]
 80047b0:	e7d0      	b.n	8004754 <_malloc_r+0x20>
 80047b2:	428c      	cmp	r4, r1
 80047b4:	684b      	ldr	r3, [r1, #4]
 80047b6:	bf16      	itet	ne
 80047b8:	6063      	strne	r3, [r4, #4]
 80047ba:	6013      	streq	r3, [r2, #0]
 80047bc:	460c      	movne	r4, r1
 80047be:	e7eb      	b.n	8004798 <_malloc_r+0x64>
 80047c0:	460c      	mov	r4, r1
 80047c2:	6849      	ldr	r1, [r1, #4]
 80047c4:	e7cc      	b.n	8004760 <_malloc_r+0x2c>
 80047c6:	1cc4      	adds	r4, r0, #3
 80047c8:	f024 0403 	bic.w	r4, r4, #3
 80047cc:	42a0      	cmp	r0, r4
 80047ce:	d005      	beq.n	80047dc <_malloc_r+0xa8>
 80047d0:	1a21      	subs	r1, r4, r0
 80047d2:	4630      	mov	r0, r6
 80047d4:	f000 fc64 	bl	80050a0 <_sbrk_r>
 80047d8:	3001      	adds	r0, #1
 80047da:	d0cf      	beq.n	800477c <_malloc_r+0x48>
 80047dc:	6025      	str	r5, [r4, #0]
 80047de:	e7db      	b.n	8004798 <_malloc_r+0x64>
 80047e0:	20000208 	.word	0x20000208
 80047e4:	2000020c 	.word	0x2000020c

080047e8 <__cvt>:
 80047e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047ec:	ec55 4b10 	vmov	r4, r5, d0
 80047f0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80047f2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80047f6:	2d00      	cmp	r5, #0
 80047f8:	460e      	mov	r6, r1
 80047fa:	4691      	mov	r9, r2
 80047fc:	4619      	mov	r1, r3
 80047fe:	bfb8      	it	lt
 8004800:	4622      	movlt	r2, r4
 8004802:	462b      	mov	r3, r5
 8004804:	f027 0720 	bic.w	r7, r7, #32
 8004808:	bfbb      	ittet	lt
 800480a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800480e:	461d      	movlt	r5, r3
 8004810:	2300      	movge	r3, #0
 8004812:	232d      	movlt	r3, #45	; 0x2d
 8004814:	bfb8      	it	lt
 8004816:	4614      	movlt	r4, r2
 8004818:	2f46      	cmp	r7, #70	; 0x46
 800481a:	700b      	strb	r3, [r1, #0]
 800481c:	d004      	beq.n	8004828 <__cvt+0x40>
 800481e:	2f45      	cmp	r7, #69	; 0x45
 8004820:	d100      	bne.n	8004824 <__cvt+0x3c>
 8004822:	3601      	adds	r6, #1
 8004824:	2102      	movs	r1, #2
 8004826:	e000      	b.n	800482a <__cvt+0x42>
 8004828:	2103      	movs	r1, #3
 800482a:	ab03      	add	r3, sp, #12
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	ab02      	add	r3, sp, #8
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	4632      	mov	r2, r6
 8004834:	4653      	mov	r3, sl
 8004836:	ec45 4b10 	vmov	d0, r4, r5
 800483a:	f000 fd21 	bl	8005280 <_dtoa_r>
 800483e:	2f47      	cmp	r7, #71	; 0x47
 8004840:	4680      	mov	r8, r0
 8004842:	d102      	bne.n	800484a <__cvt+0x62>
 8004844:	f019 0f01 	tst.w	r9, #1
 8004848:	d026      	beq.n	8004898 <__cvt+0xb0>
 800484a:	2f46      	cmp	r7, #70	; 0x46
 800484c:	eb08 0906 	add.w	r9, r8, r6
 8004850:	d111      	bne.n	8004876 <__cvt+0x8e>
 8004852:	f898 3000 	ldrb.w	r3, [r8]
 8004856:	2b30      	cmp	r3, #48	; 0x30
 8004858:	d10a      	bne.n	8004870 <__cvt+0x88>
 800485a:	2200      	movs	r2, #0
 800485c:	2300      	movs	r3, #0
 800485e:	4620      	mov	r0, r4
 8004860:	4629      	mov	r1, r5
 8004862:	f7fc f931 	bl	8000ac8 <__aeabi_dcmpeq>
 8004866:	b918      	cbnz	r0, 8004870 <__cvt+0x88>
 8004868:	f1c6 0601 	rsb	r6, r6, #1
 800486c:	f8ca 6000 	str.w	r6, [sl]
 8004870:	f8da 3000 	ldr.w	r3, [sl]
 8004874:	4499      	add	r9, r3
 8004876:	2200      	movs	r2, #0
 8004878:	2300      	movs	r3, #0
 800487a:	4620      	mov	r0, r4
 800487c:	4629      	mov	r1, r5
 800487e:	f7fc f923 	bl	8000ac8 <__aeabi_dcmpeq>
 8004882:	b938      	cbnz	r0, 8004894 <__cvt+0xac>
 8004884:	2230      	movs	r2, #48	; 0x30
 8004886:	9b03      	ldr	r3, [sp, #12]
 8004888:	454b      	cmp	r3, r9
 800488a:	d205      	bcs.n	8004898 <__cvt+0xb0>
 800488c:	1c59      	adds	r1, r3, #1
 800488e:	9103      	str	r1, [sp, #12]
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	e7f8      	b.n	8004886 <__cvt+0x9e>
 8004894:	f8cd 900c 	str.w	r9, [sp, #12]
 8004898:	9b03      	ldr	r3, [sp, #12]
 800489a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800489c:	eba3 0308 	sub.w	r3, r3, r8
 80048a0:	4640      	mov	r0, r8
 80048a2:	6013      	str	r3, [r2, #0]
 80048a4:	b004      	add	sp, #16
 80048a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080048aa <__exponent>:
 80048aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048ac:	2900      	cmp	r1, #0
 80048ae:	4604      	mov	r4, r0
 80048b0:	bfba      	itte	lt
 80048b2:	4249      	neglt	r1, r1
 80048b4:	232d      	movlt	r3, #45	; 0x2d
 80048b6:	232b      	movge	r3, #43	; 0x2b
 80048b8:	2909      	cmp	r1, #9
 80048ba:	f804 2b02 	strb.w	r2, [r4], #2
 80048be:	7043      	strb	r3, [r0, #1]
 80048c0:	dd20      	ble.n	8004904 <__exponent+0x5a>
 80048c2:	f10d 0307 	add.w	r3, sp, #7
 80048c6:	461f      	mov	r7, r3
 80048c8:	260a      	movs	r6, #10
 80048ca:	fb91 f5f6 	sdiv	r5, r1, r6
 80048ce:	fb06 1115 	mls	r1, r6, r5, r1
 80048d2:	3130      	adds	r1, #48	; 0x30
 80048d4:	2d09      	cmp	r5, #9
 80048d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80048da:	f103 32ff 	add.w	r2, r3, #4294967295
 80048de:	4629      	mov	r1, r5
 80048e0:	dc09      	bgt.n	80048f6 <__exponent+0x4c>
 80048e2:	3130      	adds	r1, #48	; 0x30
 80048e4:	3b02      	subs	r3, #2
 80048e6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80048ea:	42bb      	cmp	r3, r7
 80048ec:	4622      	mov	r2, r4
 80048ee:	d304      	bcc.n	80048fa <__exponent+0x50>
 80048f0:	1a10      	subs	r0, r2, r0
 80048f2:	b003      	add	sp, #12
 80048f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048f6:	4613      	mov	r3, r2
 80048f8:	e7e7      	b.n	80048ca <__exponent+0x20>
 80048fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048fe:	f804 2b01 	strb.w	r2, [r4], #1
 8004902:	e7f2      	b.n	80048ea <__exponent+0x40>
 8004904:	2330      	movs	r3, #48	; 0x30
 8004906:	4419      	add	r1, r3
 8004908:	7083      	strb	r3, [r0, #2]
 800490a:	1d02      	adds	r2, r0, #4
 800490c:	70c1      	strb	r1, [r0, #3]
 800490e:	e7ef      	b.n	80048f0 <__exponent+0x46>

08004910 <_printf_float>:
 8004910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004914:	b08d      	sub	sp, #52	; 0x34
 8004916:	460c      	mov	r4, r1
 8004918:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800491c:	4616      	mov	r6, r2
 800491e:	461f      	mov	r7, r3
 8004920:	4605      	mov	r5, r0
 8004922:	f001 fa65 	bl	8005df0 <_localeconv_r>
 8004926:	6803      	ldr	r3, [r0, #0]
 8004928:	9304      	str	r3, [sp, #16]
 800492a:	4618      	mov	r0, r3
 800492c:	f7fb fc50 	bl	80001d0 <strlen>
 8004930:	2300      	movs	r3, #0
 8004932:	930a      	str	r3, [sp, #40]	; 0x28
 8004934:	f8d8 3000 	ldr.w	r3, [r8]
 8004938:	9005      	str	r0, [sp, #20]
 800493a:	3307      	adds	r3, #7
 800493c:	f023 0307 	bic.w	r3, r3, #7
 8004940:	f103 0208 	add.w	r2, r3, #8
 8004944:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004948:	f8d4 b000 	ldr.w	fp, [r4]
 800494c:	f8c8 2000 	str.w	r2, [r8]
 8004950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004954:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004958:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800495c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004960:	9307      	str	r3, [sp, #28]
 8004962:	f8cd 8018 	str.w	r8, [sp, #24]
 8004966:	f04f 32ff 	mov.w	r2, #4294967295
 800496a:	4ba7      	ldr	r3, [pc, #668]	; (8004c08 <_printf_float+0x2f8>)
 800496c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004970:	f7fc f8dc 	bl	8000b2c <__aeabi_dcmpun>
 8004974:	bb70      	cbnz	r0, 80049d4 <_printf_float+0xc4>
 8004976:	f04f 32ff 	mov.w	r2, #4294967295
 800497a:	4ba3      	ldr	r3, [pc, #652]	; (8004c08 <_printf_float+0x2f8>)
 800497c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004980:	f7fc f8b6 	bl	8000af0 <__aeabi_dcmple>
 8004984:	bb30      	cbnz	r0, 80049d4 <_printf_float+0xc4>
 8004986:	2200      	movs	r2, #0
 8004988:	2300      	movs	r3, #0
 800498a:	4640      	mov	r0, r8
 800498c:	4649      	mov	r1, r9
 800498e:	f7fc f8a5 	bl	8000adc <__aeabi_dcmplt>
 8004992:	b110      	cbz	r0, 800499a <_printf_float+0x8a>
 8004994:	232d      	movs	r3, #45	; 0x2d
 8004996:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800499a:	4a9c      	ldr	r2, [pc, #624]	; (8004c0c <_printf_float+0x2fc>)
 800499c:	4b9c      	ldr	r3, [pc, #624]	; (8004c10 <_printf_float+0x300>)
 800499e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80049a2:	bf8c      	ite	hi
 80049a4:	4690      	movhi	r8, r2
 80049a6:	4698      	movls	r8, r3
 80049a8:	2303      	movs	r3, #3
 80049aa:	f02b 0204 	bic.w	r2, fp, #4
 80049ae:	6123      	str	r3, [r4, #16]
 80049b0:	6022      	str	r2, [r4, #0]
 80049b2:	f04f 0900 	mov.w	r9, #0
 80049b6:	9700      	str	r7, [sp, #0]
 80049b8:	4633      	mov	r3, r6
 80049ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80049bc:	4621      	mov	r1, r4
 80049be:	4628      	mov	r0, r5
 80049c0:	f000 f9e6 	bl	8004d90 <_printf_common>
 80049c4:	3001      	adds	r0, #1
 80049c6:	f040 808d 	bne.w	8004ae4 <_printf_float+0x1d4>
 80049ca:	f04f 30ff 	mov.w	r0, #4294967295
 80049ce:	b00d      	add	sp, #52	; 0x34
 80049d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d4:	4642      	mov	r2, r8
 80049d6:	464b      	mov	r3, r9
 80049d8:	4640      	mov	r0, r8
 80049da:	4649      	mov	r1, r9
 80049dc:	f7fc f8a6 	bl	8000b2c <__aeabi_dcmpun>
 80049e0:	b110      	cbz	r0, 80049e8 <_printf_float+0xd8>
 80049e2:	4a8c      	ldr	r2, [pc, #560]	; (8004c14 <_printf_float+0x304>)
 80049e4:	4b8c      	ldr	r3, [pc, #560]	; (8004c18 <_printf_float+0x308>)
 80049e6:	e7da      	b.n	800499e <_printf_float+0x8e>
 80049e8:	6861      	ldr	r1, [r4, #4]
 80049ea:	1c4b      	adds	r3, r1, #1
 80049ec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80049f0:	a80a      	add	r0, sp, #40	; 0x28
 80049f2:	d13e      	bne.n	8004a72 <_printf_float+0x162>
 80049f4:	2306      	movs	r3, #6
 80049f6:	6063      	str	r3, [r4, #4]
 80049f8:	2300      	movs	r3, #0
 80049fa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80049fe:	ab09      	add	r3, sp, #36	; 0x24
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	ec49 8b10 	vmov	d0, r8, r9
 8004a06:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a0a:	6022      	str	r2, [r4, #0]
 8004a0c:	f8cd a004 	str.w	sl, [sp, #4]
 8004a10:	6861      	ldr	r1, [r4, #4]
 8004a12:	4628      	mov	r0, r5
 8004a14:	f7ff fee8 	bl	80047e8 <__cvt>
 8004a18:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004a1c:	2b47      	cmp	r3, #71	; 0x47
 8004a1e:	4680      	mov	r8, r0
 8004a20:	d109      	bne.n	8004a36 <_printf_float+0x126>
 8004a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a24:	1cd8      	adds	r0, r3, #3
 8004a26:	db02      	blt.n	8004a2e <_printf_float+0x11e>
 8004a28:	6862      	ldr	r2, [r4, #4]
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	dd47      	ble.n	8004abe <_printf_float+0x1ae>
 8004a2e:	f1aa 0a02 	sub.w	sl, sl, #2
 8004a32:	fa5f fa8a 	uxtb.w	sl, sl
 8004a36:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004a3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a3c:	d824      	bhi.n	8004a88 <_printf_float+0x178>
 8004a3e:	3901      	subs	r1, #1
 8004a40:	4652      	mov	r2, sl
 8004a42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a46:	9109      	str	r1, [sp, #36]	; 0x24
 8004a48:	f7ff ff2f 	bl	80048aa <__exponent>
 8004a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a4e:	1813      	adds	r3, r2, r0
 8004a50:	2a01      	cmp	r2, #1
 8004a52:	4681      	mov	r9, r0
 8004a54:	6123      	str	r3, [r4, #16]
 8004a56:	dc02      	bgt.n	8004a5e <_printf_float+0x14e>
 8004a58:	6822      	ldr	r2, [r4, #0]
 8004a5a:	07d1      	lsls	r1, r2, #31
 8004a5c:	d501      	bpl.n	8004a62 <_printf_float+0x152>
 8004a5e:	3301      	adds	r3, #1
 8004a60:	6123      	str	r3, [r4, #16]
 8004a62:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0a5      	beq.n	80049b6 <_printf_float+0xa6>
 8004a6a:	232d      	movs	r3, #45	; 0x2d
 8004a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a70:	e7a1      	b.n	80049b6 <_printf_float+0xa6>
 8004a72:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004a76:	f000 8177 	beq.w	8004d68 <_printf_float+0x458>
 8004a7a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004a7e:	d1bb      	bne.n	80049f8 <_printf_float+0xe8>
 8004a80:	2900      	cmp	r1, #0
 8004a82:	d1b9      	bne.n	80049f8 <_printf_float+0xe8>
 8004a84:	2301      	movs	r3, #1
 8004a86:	e7b6      	b.n	80049f6 <_printf_float+0xe6>
 8004a88:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004a8c:	d119      	bne.n	8004ac2 <_printf_float+0x1b2>
 8004a8e:	2900      	cmp	r1, #0
 8004a90:	6863      	ldr	r3, [r4, #4]
 8004a92:	dd0c      	ble.n	8004aae <_printf_float+0x19e>
 8004a94:	6121      	str	r1, [r4, #16]
 8004a96:	b913      	cbnz	r3, 8004a9e <_printf_float+0x18e>
 8004a98:	6822      	ldr	r2, [r4, #0]
 8004a9a:	07d2      	lsls	r2, r2, #31
 8004a9c:	d502      	bpl.n	8004aa4 <_printf_float+0x194>
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	440b      	add	r3, r1
 8004aa2:	6123      	str	r3, [r4, #16]
 8004aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aa6:	65a3      	str	r3, [r4, #88]	; 0x58
 8004aa8:	f04f 0900 	mov.w	r9, #0
 8004aac:	e7d9      	b.n	8004a62 <_printf_float+0x152>
 8004aae:	b913      	cbnz	r3, 8004ab6 <_printf_float+0x1a6>
 8004ab0:	6822      	ldr	r2, [r4, #0]
 8004ab2:	07d0      	lsls	r0, r2, #31
 8004ab4:	d501      	bpl.n	8004aba <_printf_float+0x1aa>
 8004ab6:	3302      	adds	r3, #2
 8004ab8:	e7f3      	b.n	8004aa2 <_printf_float+0x192>
 8004aba:	2301      	movs	r3, #1
 8004abc:	e7f1      	b.n	8004aa2 <_printf_float+0x192>
 8004abe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004ac2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	db05      	blt.n	8004ad6 <_printf_float+0x1c6>
 8004aca:	6822      	ldr	r2, [r4, #0]
 8004acc:	6123      	str	r3, [r4, #16]
 8004ace:	07d1      	lsls	r1, r2, #31
 8004ad0:	d5e8      	bpl.n	8004aa4 <_printf_float+0x194>
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	e7e5      	b.n	8004aa2 <_printf_float+0x192>
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	bfd4      	ite	le
 8004ada:	f1c3 0302 	rsble	r3, r3, #2
 8004ade:	2301      	movgt	r3, #1
 8004ae0:	4413      	add	r3, r2
 8004ae2:	e7de      	b.n	8004aa2 <_printf_float+0x192>
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	055a      	lsls	r2, r3, #21
 8004ae8:	d407      	bmi.n	8004afa <_printf_float+0x1ea>
 8004aea:	6923      	ldr	r3, [r4, #16]
 8004aec:	4642      	mov	r2, r8
 8004aee:	4631      	mov	r1, r6
 8004af0:	4628      	mov	r0, r5
 8004af2:	47b8      	blx	r7
 8004af4:	3001      	adds	r0, #1
 8004af6:	d12b      	bne.n	8004b50 <_printf_float+0x240>
 8004af8:	e767      	b.n	80049ca <_printf_float+0xba>
 8004afa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004afe:	f240 80dc 	bls.w	8004cba <_printf_float+0x3aa>
 8004b02:	2200      	movs	r2, #0
 8004b04:	2300      	movs	r3, #0
 8004b06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b0a:	f7fb ffdd 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	d033      	beq.n	8004b7a <_printf_float+0x26a>
 8004b12:	2301      	movs	r3, #1
 8004b14:	4a41      	ldr	r2, [pc, #260]	; (8004c1c <_printf_float+0x30c>)
 8004b16:	4631      	mov	r1, r6
 8004b18:	4628      	mov	r0, r5
 8004b1a:	47b8      	blx	r7
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	f43f af54 	beq.w	80049ca <_printf_float+0xba>
 8004b22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b26:	429a      	cmp	r2, r3
 8004b28:	db02      	blt.n	8004b30 <_printf_float+0x220>
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	07d8      	lsls	r0, r3, #31
 8004b2e:	d50f      	bpl.n	8004b50 <_printf_float+0x240>
 8004b30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b34:	4631      	mov	r1, r6
 8004b36:	4628      	mov	r0, r5
 8004b38:	47b8      	blx	r7
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	f43f af45 	beq.w	80049ca <_printf_float+0xba>
 8004b40:	f04f 0800 	mov.w	r8, #0
 8004b44:	f104 091a 	add.w	r9, r4, #26
 8004b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	4543      	cmp	r3, r8
 8004b4e:	dc09      	bgt.n	8004b64 <_printf_float+0x254>
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	079b      	lsls	r3, r3, #30
 8004b54:	f100 8103 	bmi.w	8004d5e <_printf_float+0x44e>
 8004b58:	68e0      	ldr	r0, [r4, #12]
 8004b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b5c:	4298      	cmp	r0, r3
 8004b5e:	bfb8      	it	lt
 8004b60:	4618      	movlt	r0, r3
 8004b62:	e734      	b.n	80049ce <_printf_float+0xbe>
 8004b64:	2301      	movs	r3, #1
 8004b66:	464a      	mov	r2, r9
 8004b68:	4631      	mov	r1, r6
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	47b8      	blx	r7
 8004b6e:	3001      	adds	r0, #1
 8004b70:	f43f af2b 	beq.w	80049ca <_printf_float+0xba>
 8004b74:	f108 0801 	add.w	r8, r8, #1
 8004b78:	e7e6      	b.n	8004b48 <_printf_float+0x238>
 8004b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	dc2b      	bgt.n	8004bd8 <_printf_float+0x2c8>
 8004b80:	2301      	movs	r3, #1
 8004b82:	4a26      	ldr	r2, [pc, #152]	; (8004c1c <_printf_float+0x30c>)
 8004b84:	4631      	mov	r1, r6
 8004b86:	4628      	mov	r0, r5
 8004b88:	47b8      	blx	r7
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	f43f af1d 	beq.w	80049ca <_printf_float+0xba>
 8004b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b92:	b923      	cbnz	r3, 8004b9e <_printf_float+0x28e>
 8004b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b96:	b913      	cbnz	r3, 8004b9e <_printf_float+0x28e>
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	07d9      	lsls	r1, r3, #31
 8004b9c:	d5d8      	bpl.n	8004b50 <_printf_float+0x240>
 8004b9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ba2:	4631      	mov	r1, r6
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	47b8      	blx	r7
 8004ba8:	3001      	adds	r0, #1
 8004baa:	f43f af0e 	beq.w	80049ca <_printf_float+0xba>
 8004bae:	f04f 0900 	mov.w	r9, #0
 8004bb2:	f104 0a1a 	add.w	sl, r4, #26
 8004bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bb8:	425b      	negs	r3, r3
 8004bba:	454b      	cmp	r3, r9
 8004bbc:	dc01      	bgt.n	8004bc2 <_printf_float+0x2b2>
 8004bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bc0:	e794      	b.n	8004aec <_printf_float+0x1dc>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4652      	mov	r2, sl
 8004bc6:	4631      	mov	r1, r6
 8004bc8:	4628      	mov	r0, r5
 8004bca:	47b8      	blx	r7
 8004bcc:	3001      	adds	r0, #1
 8004bce:	f43f aefc 	beq.w	80049ca <_printf_float+0xba>
 8004bd2:	f109 0901 	add.w	r9, r9, #1
 8004bd6:	e7ee      	b.n	8004bb6 <_printf_float+0x2a6>
 8004bd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	bfa8      	it	ge
 8004be0:	461a      	movge	r2, r3
 8004be2:	2a00      	cmp	r2, #0
 8004be4:	4691      	mov	r9, r2
 8004be6:	dd07      	ble.n	8004bf8 <_printf_float+0x2e8>
 8004be8:	4613      	mov	r3, r2
 8004bea:	4631      	mov	r1, r6
 8004bec:	4642      	mov	r2, r8
 8004bee:	4628      	mov	r0, r5
 8004bf0:	47b8      	blx	r7
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	f43f aee9 	beq.w	80049ca <_printf_float+0xba>
 8004bf8:	f104 031a 	add.w	r3, r4, #26
 8004bfc:	f04f 0b00 	mov.w	fp, #0
 8004c00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c04:	9306      	str	r3, [sp, #24]
 8004c06:	e015      	b.n	8004c34 <_printf_float+0x324>
 8004c08:	7fefffff 	.word	0x7fefffff
 8004c0c:	08007d74 	.word	0x08007d74
 8004c10:	08007d70 	.word	0x08007d70
 8004c14:	08007d7c 	.word	0x08007d7c
 8004c18:	08007d78 	.word	0x08007d78
 8004c1c:	08007d80 	.word	0x08007d80
 8004c20:	2301      	movs	r3, #1
 8004c22:	9a06      	ldr	r2, [sp, #24]
 8004c24:	4631      	mov	r1, r6
 8004c26:	4628      	mov	r0, r5
 8004c28:	47b8      	blx	r7
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	f43f aecd 	beq.w	80049ca <_printf_float+0xba>
 8004c30:	f10b 0b01 	add.w	fp, fp, #1
 8004c34:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004c38:	ebaa 0309 	sub.w	r3, sl, r9
 8004c3c:	455b      	cmp	r3, fp
 8004c3e:	dcef      	bgt.n	8004c20 <_printf_float+0x310>
 8004c40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c44:	429a      	cmp	r2, r3
 8004c46:	44d0      	add	r8, sl
 8004c48:	db15      	blt.n	8004c76 <_printf_float+0x366>
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	07da      	lsls	r2, r3, #31
 8004c4e:	d412      	bmi.n	8004c76 <_printf_float+0x366>
 8004c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c54:	eba3 020a 	sub.w	r2, r3, sl
 8004c58:	eba3 0a01 	sub.w	sl, r3, r1
 8004c5c:	4592      	cmp	sl, r2
 8004c5e:	bfa8      	it	ge
 8004c60:	4692      	movge	sl, r2
 8004c62:	f1ba 0f00 	cmp.w	sl, #0
 8004c66:	dc0e      	bgt.n	8004c86 <_printf_float+0x376>
 8004c68:	f04f 0800 	mov.w	r8, #0
 8004c6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004c70:	f104 091a 	add.w	r9, r4, #26
 8004c74:	e019      	b.n	8004caa <_printf_float+0x39a>
 8004c76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c7a:	4631      	mov	r1, r6
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	47b8      	blx	r7
 8004c80:	3001      	adds	r0, #1
 8004c82:	d1e5      	bne.n	8004c50 <_printf_float+0x340>
 8004c84:	e6a1      	b.n	80049ca <_printf_float+0xba>
 8004c86:	4653      	mov	r3, sl
 8004c88:	4642      	mov	r2, r8
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	47b8      	blx	r7
 8004c90:	3001      	adds	r0, #1
 8004c92:	d1e9      	bne.n	8004c68 <_printf_float+0x358>
 8004c94:	e699      	b.n	80049ca <_printf_float+0xba>
 8004c96:	2301      	movs	r3, #1
 8004c98:	464a      	mov	r2, r9
 8004c9a:	4631      	mov	r1, r6
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	47b8      	blx	r7
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	f43f ae92 	beq.w	80049ca <_printf_float+0xba>
 8004ca6:	f108 0801 	add.w	r8, r8, #1
 8004caa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	eba3 030a 	sub.w	r3, r3, sl
 8004cb4:	4543      	cmp	r3, r8
 8004cb6:	dcee      	bgt.n	8004c96 <_printf_float+0x386>
 8004cb8:	e74a      	b.n	8004b50 <_printf_float+0x240>
 8004cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cbc:	2a01      	cmp	r2, #1
 8004cbe:	dc01      	bgt.n	8004cc4 <_printf_float+0x3b4>
 8004cc0:	07db      	lsls	r3, r3, #31
 8004cc2:	d53a      	bpl.n	8004d3a <_printf_float+0x42a>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	4642      	mov	r2, r8
 8004cc8:	4631      	mov	r1, r6
 8004cca:	4628      	mov	r0, r5
 8004ccc:	47b8      	blx	r7
 8004cce:	3001      	adds	r0, #1
 8004cd0:	f43f ae7b 	beq.w	80049ca <_printf_float+0xba>
 8004cd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cd8:	4631      	mov	r1, r6
 8004cda:	4628      	mov	r0, r5
 8004cdc:	47b8      	blx	r7
 8004cde:	3001      	adds	r0, #1
 8004ce0:	f108 0801 	add.w	r8, r8, #1
 8004ce4:	f43f ae71 	beq.w	80049ca <_printf_float+0xba>
 8004ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cea:	2200      	movs	r2, #0
 8004cec:	f103 3aff 	add.w	sl, r3, #4294967295
 8004cf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f7fb fee7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cfa:	b9c8      	cbnz	r0, 8004d30 <_printf_float+0x420>
 8004cfc:	4653      	mov	r3, sl
 8004cfe:	4642      	mov	r2, r8
 8004d00:	4631      	mov	r1, r6
 8004d02:	4628      	mov	r0, r5
 8004d04:	47b8      	blx	r7
 8004d06:	3001      	adds	r0, #1
 8004d08:	d10e      	bne.n	8004d28 <_printf_float+0x418>
 8004d0a:	e65e      	b.n	80049ca <_printf_float+0xba>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	4652      	mov	r2, sl
 8004d10:	4631      	mov	r1, r6
 8004d12:	4628      	mov	r0, r5
 8004d14:	47b8      	blx	r7
 8004d16:	3001      	adds	r0, #1
 8004d18:	f43f ae57 	beq.w	80049ca <_printf_float+0xba>
 8004d1c:	f108 0801 	add.w	r8, r8, #1
 8004d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d22:	3b01      	subs	r3, #1
 8004d24:	4543      	cmp	r3, r8
 8004d26:	dcf1      	bgt.n	8004d0c <_printf_float+0x3fc>
 8004d28:	464b      	mov	r3, r9
 8004d2a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d2e:	e6de      	b.n	8004aee <_printf_float+0x1de>
 8004d30:	f04f 0800 	mov.w	r8, #0
 8004d34:	f104 0a1a 	add.w	sl, r4, #26
 8004d38:	e7f2      	b.n	8004d20 <_printf_float+0x410>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e7df      	b.n	8004cfe <_printf_float+0x3ee>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	464a      	mov	r2, r9
 8004d42:	4631      	mov	r1, r6
 8004d44:	4628      	mov	r0, r5
 8004d46:	47b8      	blx	r7
 8004d48:	3001      	adds	r0, #1
 8004d4a:	f43f ae3e 	beq.w	80049ca <_printf_float+0xba>
 8004d4e:	f108 0801 	add.w	r8, r8, #1
 8004d52:	68e3      	ldr	r3, [r4, #12]
 8004d54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d56:	1a9b      	subs	r3, r3, r2
 8004d58:	4543      	cmp	r3, r8
 8004d5a:	dcf0      	bgt.n	8004d3e <_printf_float+0x42e>
 8004d5c:	e6fc      	b.n	8004b58 <_printf_float+0x248>
 8004d5e:	f04f 0800 	mov.w	r8, #0
 8004d62:	f104 0919 	add.w	r9, r4, #25
 8004d66:	e7f4      	b.n	8004d52 <_printf_float+0x442>
 8004d68:	2900      	cmp	r1, #0
 8004d6a:	f43f ae8b 	beq.w	8004a84 <_printf_float+0x174>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004d74:	ab09      	add	r3, sp, #36	; 0x24
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	ec49 8b10 	vmov	d0, r8, r9
 8004d7c:	6022      	str	r2, [r4, #0]
 8004d7e:	f8cd a004 	str.w	sl, [sp, #4]
 8004d82:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d86:	4628      	mov	r0, r5
 8004d88:	f7ff fd2e 	bl	80047e8 <__cvt>
 8004d8c:	4680      	mov	r8, r0
 8004d8e:	e648      	b.n	8004a22 <_printf_float+0x112>

08004d90 <_printf_common>:
 8004d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d94:	4691      	mov	r9, r2
 8004d96:	461f      	mov	r7, r3
 8004d98:	688a      	ldr	r2, [r1, #8]
 8004d9a:	690b      	ldr	r3, [r1, #16]
 8004d9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004da0:	4293      	cmp	r3, r2
 8004da2:	bfb8      	it	lt
 8004da4:	4613      	movlt	r3, r2
 8004da6:	f8c9 3000 	str.w	r3, [r9]
 8004daa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dae:	4606      	mov	r6, r0
 8004db0:	460c      	mov	r4, r1
 8004db2:	b112      	cbz	r2, 8004dba <_printf_common+0x2a>
 8004db4:	3301      	adds	r3, #1
 8004db6:	f8c9 3000 	str.w	r3, [r9]
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	0699      	lsls	r1, r3, #26
 8004dbe:	bf42      	ittt	mi
 8004dc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004dc4:	3302      	addmi	r3, #2
 8004dc6:	f8c9 3000 	strmi.w	r3, [r9]
 8004dca:	6825      	ldr	r5, [r4, #0]
 8004dcc:	f015 0506 	ands.w	r5, r5, #6
 8004dd0:	d107      	bne.n	8004de2 <_printf_common+0x52>
 8004dd2:	f104 0a19 	add.w	sl, r4, #25
 8004dd6:	68e3      	ldr	r3, [r4, #12]
 8004dd8:	f8d9 2000 	ldr.w	r2, [r9]
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	42ab      	cmp	r3, r5
 8004de0:	dc28      	bgt.n	8004e34 <_printf_common+0xa4>
 8004de2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004de6:	6822      	ldr	r2, [r4, #0]
 8004de8:	3300      	adds	r3, #0
 8004dea:	bf18      	it	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	0692      	lsls	r2, r2, #26
 8004df0:	d42d      	bmi.n	8004e4e <_printf_common+0xbe>
 8004df2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004df6:	4639      	mov	r1, r7
 8004df8:	4630      	mov	r0, r6
 8004dfa:	47c0      	blx	r8
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	d020      	beq.n	8004e42 <_printf_common+0xb2>
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	68e5      	ldr	r5, [r4, #12]
 8004e04:	f8d9 2000 	ldr.w	r2, [r9]
 8004e08:	f003 0306 	and.w	r3, r3, #6
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	bf08      	it	eq
 8004e10:	1aad      	subeq	r5, r5, r2
 8004e12:	68a3      	ldr	r3, [r4, #8]
 8004e14:	6922      	ldr	r2, [r4, #16]
 8004e16:	bf0c      	ite	eq
 8004e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e1c:	2500      	movne	r5, #0
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	bfc4      	itt	gt
 8004e22:	1a9b      	subgt	r3, r3, r2
 8004e24:	18ed      	addgt	r5, r5, r3
 8004e26:	f04f 0900 	mov.w	r9, #0
 8004e2a:	341a      	adds	r4, #26
 8004e2c:	454d      	cmp	r5, r9
 8004e2e:	d11a      	bne.n	8004e66 <_printf_common+0xd6>
 8004e30:	2000      	movs	r0, #0
 8004e32:	e008      	b.n	8004e46 <_printf_common+0xb6>
 8004e34:	2301      	movs	r3, #1
 8004e36:	4652      	mov	r2, sl
 8004e38:	4639      	mov	r1, r7
 8004e3a:	4630      	mov	r0, r6
 8004e3c:	47c0      	blx	r8
 8004e3e:	3001      	adds	r0, #1
 8004e40:	d103      	bne.n	8004e4a <_printf_common+0xba>
 8004e42:	f04f 30ff 	mov.w	r0, #4294967295
 8004e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e4a:	3501      	adds	r5, #1
 8004e4c:	e7c3      	b.n	8004dd6 <_printf_common+0x46>
 8004e4e:	18e1      	adds	r1, r4, r3
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	2030      	movs	r0, #48	; 0x30
 8004e54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e58:	4422      	add	r2, r4
 8004e5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e62:	3302      	adds	r3, #2
 8004e64:	e7c5      	b.n	8004df2 <_printf_common+0x62>
 8004e66:	2301      	movs	r3, #1
 8004e68:	4622      	mov	r2, r4
 8004e6a:	4639      	mov	r1, r7
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	47c0      	blx	r8
 8004e70:	3001      	adds	r0, #1
 8004e72:	d0e6      	beq.n	8004e42 <_printf_common+0xb2>
 8004e74:	f109 0901 	add.w	r9, r9, #1
 8004e78:	e7d8      	b.n	8004e2c <_printf_common+0x9c>
	...

08004e7c <_printf_i>:
 8004e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004e84:	460c      	mov	r4, r1
 8004e86:	7e09      	ldrb	r1, [r1, #24]
 8004e88:	b085      	sub	sp, #20
 8004e8a:	296e      	cmp	r1, #110	; 0x6e
 8004e8c:	4617      	mov	r7, r2
 8004e8e:	4606      	mov	r6, r0
 8004e90:	4698      	mov	r8, r3
 8004e92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e94:	f000 80b3 	beq.w	8004ffe <_printf_i+0x182>
 8004e98:	d822      	bhi.n	8004ee0 <_printf_i+0x64>
 8004e9a:	2963      	cmp	r1, #99	; 0x63
 8004e9c:	d036      	beq.n	8004f0c <_printf_i+0x90>
 8004e9e:	d80a      	bhi.n	8004eb6 <_printf_i+0x3a>
 8004ea0:	2900      	cmp	r1, #0
 8004ea2:	f000 80b9 	beq.w	8005018 <_printf_i+0x19c>
 8004ea6:	2958      	cmp	r1, #88	; 0x58
 8004ea8:	f000 8083 	beq.w	8004fb2 <_printf_i+0x136>
 8004eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004eb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004eb4:	e032      	b.n	8004f1c <_printf_i+0xa0>
 8004eb6:	2964      	cmp	r1, #100	; 0x64
 8004eb8:	d001      	beq.n	8004ebe <_printf_i+0x42>
 8004eba:	2969      	cmp	r1, #105	; 0x69
 8004ebc:	d1f6      	bne.n	8004eac <_printf_i+0x30>
 8004ebe:	6820      	ldr	r0, [r4, #0]
 8004ec0:	6813      	ldr	r3, [r2, #0]
 8004ec2:	0605      	lsls	r5, r0, #24
 8004ec4:	f103 0104 	add.w	r1, r3, #4
 8004ec8:	d52a      	bpl.n	8004f20 <_printf_i+0xa4>
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6011      	str	r1, [r2, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	da03      	bge.n	8004eda <_printf_i+0x5e>
 8004ed2:	222d      	movs	r2, #45	; 0x2d
 8004ed4:	425b      	negs	r3, r3
 8004ed6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004eda:	486f      	ldr	r0, [pc, #444]	; (8005098 <_printf_i+0x21c>)
 8004edc:	220a      	movs	r2, #10
 8004ede:	e039      	b.n	8004f54 <_printf_i+0xd8>
 8004ee0:	2973      	cmp	r1, #115	; 0x73
 8004ee2:	f000 809d 	beq.w	8005020 <_printf_i+0x1a4>
 8004ee6:	d808      	bhi.n	8004efa <_printf_i+0x7e>
 8004ee8:	296f      	cmp	r1, #111	; 0x6f
 8004eea:	d020      	beq.n	8004f2e <_printf_i+0xb2>
 8004eec:	2970      	cmp	r1, #112	; 0x70
 8004eee:	d1dd      	bne.n	8004eac <_printf_i+0x30>
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	f043 0320 	orr.w	r3, r3, #32
 8004ef6:	6023      	str	r3, [r4, #0]
 8004ef8:	e003      	b.n	8004f02 <_printf_i+0x86>
 8004efa:	2975      	cmp	r1, #117	; 0x75
 8004efc:	d017      	beq.n	8004f2e <_printf_i+0xb2>
 8004efe:	2978      	cmp	r1, #120	; 0x78
 8004f00:	d1d4      	bne.n	8004eac <_printf_i+0x30>
 8004f02:	2378      	movs	r3, #120	; 0x78
 8004f04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f08:	4864      	ldr	r0, [pc, #400]	; (800509c <_printf_i+0x220>)
 8004f0a:	e055      	b.n	8004fb8 <_printf_i+0x13c>
 8004f0c:	6813      	ldr	r3, [r2, #0]
 8004f0e:	1d19      	adds	r1, r3, #4
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6011      	str	r1, [r2, #0]
 8004f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e08c      	b.n	800503a <_printf_i+0x1be>
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6011      	str	r1, [r2, #0]
 8004f24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f28:	bf18      	it	ne
 8004f2a:	b21b      	sxthne	r3, r3
 8004f2c:	e7cf      	b.n	8004ece <_printf_i+0x52>
 8004f2e:	6813      	ldr	r3, [r2, #0]
 8004f30:	6825      	ldr	r5, [r4, #0]
 8004f32:	1d18      	adds	r0, r3, #4
 8004f34:	6010      	str	r0, [r2, #0]
 8004f36:	0628      	lsls	r0, r5, #24
 8004f38:	d501      	bpl.n	8004f3e <_printf_i+0xc2>
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	e002      	b.n	8004f44 <_printf_i+0xc8>
 8004f3e:	0668      	lsls	r0, r5, #25
 8004f40:	d5fb      	bpl.n	8004f3a <_printf_i+0xbe>
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	4854      	ldr	r0, [pc, #336]	; (8005098 <_printf_i+0x21c>)
 8004f46:	296f      	cmp	r1, #111	; 0x6f
 8004f48:	bf14      	ite	ne
 8004f4a:	220a      	movne	r2, #10
 8004f4c:	2208      	moveq	r2, #8
 8004f4e:	2100      	movs	r1, #0
 8004f50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f54:	6865      	ldr	r5, [r4, #4]
 8004f56:	60a5      	str	r5, [r4, #8]
 8004f58:	2d00      	cmp	r5, #0
 8004f5a:	f2c0 8095 	blt.w	8005088 <_printf_i+0x20c>
 8004f5e:	6821      	ldr	r1, [r4, #0]
 8004f60:	f021 0104 	bic.w	r1, r1, #4
 8004f64:	6021      	str	r1, [r4, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d13d      	bne.n	8004fe6 <_printf_i+0x16a>
 8004f6a:	2d00      	cmp	r5, #0
 8004f6c:	f040 808e 	bne.w	800508c <_printf_i+0x210>
 8004f70:	4665      	mov	r5, ip
 8004f72:	2a08      	cmp	r2, #8
 8004f74:	d10b      	bne.n	8004f8e <_printf_i+0x112>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	07db      	lsls	r3, r3, #31
 8004f7a:	d508      	bpl.n	8004f8e <_printf_i+0x112>
 8004f7c:	6923      	ldr	r3, [r4, #16]
 8004f7e:	6862      	ldr	r2, [r4, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	bfde      	ittt	le
 8004f84:	2330      	movle	r3, #48	; 0x30
 8004f86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f8e:	ebac 0305 	sub.w	r3, ip, r5
 8004f92:	6123      	str	r3, [r4, #16]
 8004f94:	f8cd 8000 	str.w	r8, [sp]
 8004f98:	463b      	mov	r3, r7
 8004f9a:	aa03      	add	r2, sp, #12
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	4630      	mov	r0, r6
 8004fa0:	f7ff fef6 	bl	8004d90 <_printf_common>
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	d14d      	bne.n	8005044 <_printf_i+0x1c8>
 8004fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fac:	b005      	add	sp, #20
 8004fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fb2:	4839      	ldr	r0, [pc, #228]	; (8005098 <_printf_i+0x21c>)
 8004fb4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004fb8:	6813      	ldr	r3, [r2, #0]
 8004fba:	6821      	ldr	r1, [r4, #0]
 8004fbc:	1d1d      	adds	r5, r3, #4
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6015      	str	r5, [r2, #0]
 8004fc2:	060a      	lsls	r2, r1, #24
 8004fc4:	d50b      	bpl.n	8004fde <_printf_i+0x162>
 8004fc6:	07ca      	lsls	r2, r1, #31
 8004fc8:	bf44      	itt	mi
 8004fca:	f041 0120 	orrmi.w	r1, r1, #32
 8004fce:	6021      	strmi	r1, [r4, #0]
 8004fd0:	b91b      	cbnz	r3, 8004fda <_printf_i+0x15e>
 8004fd2:	6822      	ldr	r2, [r4, #0]
 8004fd4:	f022 0220 	bic.w	r2, r2, #32
 8004fd8:	6022      	str	r2, [r4, #0]
 8004fda:	2210      	movs	r2, #16
 8004fdc:	e7b7      	b.n	8004f4e <_printf_i+0xd2>
 8004fde:	064d      	lsls	r5, r1, #25
 8004fe0:	bf48      	it	mi
 8004fe2:	b29b      	uxthmi	r3, r3
 8004fe4:	e7ef      	b.n	8004fc6 <_printf_i+0x14a>
 8004fe6:	4665      	mov	r5, ip
 8004fe8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004fec:	fb02 3311 	mls	r3, r2, r1, r3
 8004ff0:	5cc3      	ldrb	r3, [r0, r3]
 8004ff2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	2900      	cmp	r1, #0
 8004ffa:	d1f5      	bne.n	8004fe8 <_printf_i+0x16c>
 8004ffc:	e7b9      	b.n	8004f72 <_printf_i+0xf6>
 8004ffe:	6813      	ldr	r3, [r2, #0]
 8005000:	6825      	ldr	r5, [r4, #0]
 8005002:	6961      	ldr	r1, [r4, #20]
 8005004:	1d18      	adds	r0, r3, #4
 8005006:	6010      	str	r0, [r2, #0]
 8005008:	0628      	lsls	r0, r5, #24
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	d501      	bpl.n	8005012 <_printf_i+0x196>
 800500e:	6019      	str	r1, [r3, #0]
 8005010:	e002      	b.n	8005018 <_printf_i+0x19c>
 8005012:	066a      	lsls	r2, r5, #25
 8005014:	d5fb      	bpl.n	800500e <_printf_i+0x192>
 8005016:	8019      	strh	r1, [r3, #0]
 8005018:	2300      	movs	r3, #0
 800501a:	6123      	str	r3, [r4, #16]
 800501c:	4665      	mov	r5, ip
 800501e:	e7b9      	b.n	8004f94 <_printf_i+0x118>
 8005020:	6813      	ldr	r3, [r2, #0]
 8005022:	1d19      	adds	r1, r3, #4
 8005024:	6011      	str	r1, [r2, #0]
 8005026:	681d      	ldr	r5, [r3, #0]
 8005028:	6862      	ldr	r2, [r4, #4]
 800502a:	2100      	movs	r1, #0
 800502c:	4628      	mov	r0, r5
 800502e:	f7fb f8d7 	bl	80001e0 <memchr>
 8005032:	b108      	cbz	r0, 8005038 <_printf_i+0x1bc>
 8005034:	1b40      	subs	r0, r0, r5
 8005036:	6060      	str	r0, [r4, #4]
 8005038:	6863      	ldr	r3, [r4, #4]
 800503a:	6123      	str	r3, [r4, #16]
 800503c:	2300      	movs	r3, #0
 800503e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005042:	e7a7      	b.n	8004f94 <_printf_i+0x118>
 8005044:	6923      	ldr	r3, [r4, #16]
 8005046:	462a      	mov	r2, r5
 8005048:	4639      	mov	r1, r7
 800504a:	4630      	mov	r0, r6
 800504c:	47c0      	blx	r8
 800504e:	3001      	adds	r0, #1
 8005050:	d0aa      	beq.n	8004fa8 <_printf_i+0x12c>
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	079b      	lsls	r3, r3, #30
 8005056:	d413      	bmi.n	8005080 <_printf_i+0x204>
 8005058:	68e0      	ldr	r0, [r4, #12]
 800505a:	9b03      	ldr	r3, [sp, #12]
 800505c:	4298      	cmp	r0, r3
 800505e:	bfb8      	it	lt
 8005060:	4618      	movlt	r0, r3
 8005062:	e7a3      	b.n	8004fac <_printf_i+0x130>
 8005064:	2301      	movs	r3, #1
 8005066:	464a      	mov	r2, r9
 8005068:	4639      	mov	r1, r7
 800506a:	4630      	mov	r0, r6
 800506c:	47c0      	blx	r8
 800506e:	3001      	adds	r0, #1
 8005070:	d09a      	beq.n	8004fa8 <_printf_i+0x12c>
 8005072:	3501      	adds	r5, #1
 8005074:	68e3      	ldr	r3, [r4, #12]
 8005076:	9a03      	ldr	r2, [sp, #12]
 8005078:	1a9b      	subs	r3, r3, r2
 800507a:	42ab      	cmp	r3, r5
 800507c:	dcf2      	bgt.n	8005064 <_printf_i+0x1e8>
 800507e:	e7eb      	b.n	8005058 <_printf_i+0x1dc>
 8005080:	2500      	movs	r5, #0
 8005082:	f104 0919 	add.w	r9, r4, #25
 8005086:	e7f5      	b.n	8005074 <_printf_i+0x1f8>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1ac      	bne.n	8004fe6 <_printf_i+0x16a>
 800508c:	7803      	ldrb	r3, [r0, #0]
 800508e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005092:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005096:	e76c      	b.n	8004f72 <_printf_i+0xf6>
 8005098:	08007d82 	.word	0x08007d82
 800509c:	08007d93 	.word	0x08007d93

080050a0 <_sbrk_r>:
 80050a0:	b538      	push	{r3, r4, r5, lr}
 80050a2:	4c06      	ldr	r4, [pc, #24]	; (80050bc <_sbrk_r+0x1c>)
 80050a4:	2300      	movs	r3, #0
 80050a6:	4605      	mov	r5, r0
 80050a8:	4608      	mov	r0, r1
 80050aa:	6023      	str	r3, [r4, #0]
 80050ac:	f7fc fd38 	bl	8001b20 <_sbrk>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	d102      	bne.n	80050ba <_sbrk_r+0x1a>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	b103      	cbz	r3, 80050ba <_sbrk_r+0x1a>
 80050b8:	602b      	str	r3, [r5, #0]
 80050ba:	bd38      	pop	{r3, r4, r5, pc}
 80050bc:	2000021c 	.word	0x2000021c

080050c0 <sniprintf>:
 80050c0:	b40c      	push	{r2, r3}
 80050c2:	b530      	push	{r4, r5, lr}
 80050c4:	4b17      	ldr	r3, [pc, #92]	; (8005124 <sniprintf+0x64>)
 80050c6:	1e0c      	subs	r4, r1, #0
 80050c8:	b09d      	sub	sp, #116	; 0x74
 80050ca:	681d      	ldr	r5, [r3, #0]
 80050cc:	da08      	bge.n	80050e0 <sniprintf+0x20>
 80050ce:	238b      	movs	r3, #139	; 0x8b
 80050d0:	602b      	str	r3, [r5, #0]
 80050d2:	f04f 30ff 	mov.w	r0, #4294967295
 80050d6:	b01d      	add	sp, #116	; 0x74
 80050d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050dc:	b002      	add	sp, #8
 80050de:	4770      	bx	lr
 80050e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80050e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80050e8:	bf14      	ite	ne
 80050ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80050ee:	4623      	moveq	r3, r4
 80050f0:	9304      	str	r3, [sp, #16]
 80050f2:	9307      	str	r3, [sp, #28]
 80050f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050f8:	9002      	str	r0, [sp, #8]
 80050fa:	9006      	str	r0, [sp, #24]
 80050fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005100:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005102:	ab21      	add	r3, sp, #132	; 0x84
 8005104:	a902      	add	r1, sp, #8
 8005106:	4628      	mov	r0, r5
 8005108:	9301      	str	r3, [sp, #4]
 800510a:	f001 f9cf 	bl	80064ac <_svfiprintf_r>
 800510e:	1c43      	adds	r3, r0, #1
 8005110:	bfbc      	itt	lt
 8005112:	238b      	movlt	r3, #139	; 0x8b
 8005114:	602b      	strlt	r3, [r5, #0]
 8005116:	2c00      	cmp	r4, #0
 8005118:	d0dd      	beq.n	80050d6 <sniprintf+0x16>
 800511a:	9b02      	ldr	r3, [sp, #8]
 800511c:	2200      	movs	r2, #0
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	e7d9      	b.n	80050d6 <sniprintf+0x16>
 8005122:	bf00      	nop
 8005124:	2000000c 	.word	0x2000000c

08005128 <siprintf>:
 8005128:	b40e      	push	{r1, r2, r3}
 800512a:	b500      	push	{lr}
 800512c:	b09c      	sub	sp, #112	; 0x70
 800512e:	ab1d      	add	r3, sp, #116	; 0x74
 8005130:	9002      	str	r0, [sp, #8]
 8005132:	9006      	str	r0, [sp, #24]
 8005134:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005138:	4809      	ldr	r0, [pc, #36]	; (8005160 <siprintf+0x38>)
 800513a:	9107      	str	r1, [sp, #28]
 800513c:	9104      	str	r1, [sp, #16]
 800513e:	4909      	ldr	r1, [pc, #36]	; (8005164 <siprintf+0x3c>)
 8005140:	f853 2b04 	ldr.w	r2, [r3], #4
 8005144:	9105      	str	r1, [sp, #20]
 8005146:	6800      	ldr	r0, [r0, #0]
 8005148:	9301      	str	r3, [sp, #4]
 800514a:	a902      	add	r1, sp, #8
 800514c:	f001 f9ae 	bl	80064ac <_svfiprintf_r>
 8005150:	9b02      	ldr	r3, [sp, #8]
 8005152:	2200      	movs	r2, #0
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	b01c      	add	sp, #112	; 0x70
 8005158:	f85d eb04 	ldr.w	lr, [sp], #4
 800515c:	b003      	add	sp, #12
 800515e:	4770      	bx	lr
 8005160:	2000000c 	.word	0x2000000c
 8005164:	ffff0208 	.word	0xffff0208

08005168 <quorem>:
 8005168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516c:	6903      	ldr	r3, [r0, #16]
 800516e:	690c      	ldr	r4, [r1, #16]
 8005170:	42a3      	cmp	r3, r4
 8005172:	4680      	mov	r8, r0
 8005174:	f2c0 8082 	blt.w	800527c <quorem+0x114>
 8005178:	3c01      	subs	r4, #1
 800517a:	f101 0714 	add.w	r7, r1, #20
 800517e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005182:	f100 0614 	add.w	r6, r0, #20
 8005186:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800518a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800518e:	eb06 030c 	add.w	r3, r6, ip
 8005192:	3501      	adds	r5, #1
 8005194:	eb07 090c 	add.w	r9, r7, ip
 8005198:	9301      	str	r3, [sp, #4]
 800519a:	fbb0 f5f5 	udiv	r5, r0, r5
 800519e:	b395      	cbz	r5, 8005206 <quorem+0x9e>
 80051a0:	f04f 0a00 	mov.w	sl, #0
 80051a4:	4638      	mov	r0, r7
 80051a6:	46b6      	mov	lr, r6
 80051a8:	46d3      	mov	fp, sl
 80051aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80051ae:	b293      	uxth	r3, r2
 80051b0:	fb05 a303 	mla	r3, r5, r3, sl
 80051b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	ebab 0303 	sub.w	r3, fp, r3
 80051be:	0c12      	lsrs	r2, r2, #16
 80051c0:	f8de b000 	ldr.w	fp, [lr]
 80051c4:	fb05 a202 	mla	r2, r5, r2, sl
 80051c8:	fa13 f38b 	uxtah	r3, r3, fp
 80051cc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80051d0:	fa1f fb82 	uxth.w	fp, r2
 80051d4:	f8de 2000 	ldr.w	r2, [lr]
 80051d8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80051dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051e6:	4581      	cmp	r9, r0
 80051e8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80051ec:	f84e 3b04 	str.w	r3, [lr], #4
 80051f0:	d2db      	bcs.n	80051aa <quorem+0x42>
 80051f2:	f856 300c 	ldr.w	r3, [r6, ip]
 80051f6:	b933      	cbnz	r3, 8005206 <quorem+0x9e>
 80051f8:	9b01      	ldr	r3, [sp, #4]
 80051fa:	3b04      	subs	r3, #4
 80051fc:	429e      	cmp	r6, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	d330      	bcc.n	8005264 <quorem+0xfc>
 8005202:	f8c8 4010 	str.w	r4, [r8, #16]
 8005206:	4640      	mov	r0, r8
 8005208:	f001 f822 	bl	8006250 <__mcmp>
 800520c:	2800      	cmp	r0, #0
 800520e:	db25      	blt.n	800525c <quorem+0xf4>
 8005210:	3501      	adds	r5, #1
 8005212:	4630      	mov	r0, r6
 8005214:	f04f 0c00 	mov.w	ip, #0
 8005218:	f857 2b04 	ldr.w	r2, [r7], #4
 800521c:	f8d0 e000 	ldr.w	lr, [r0]
 8005220:	b293      	uxth	r3, r2
 8005222:	ebac 0303 	sub.w	r3, ip, r3
 8005226:	0c12      	lsrs	r2, r2, #16
 8005228:	fa13 f38e 	uxtah	r3, r3, lr
 800522c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005234:	b29b      	uxth	r3, r3
 8005236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800523a:	45b9      	cmp	r9, r7
 800523c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005240:	f840 3b04 	str.w	r3, [r0], #4
 8005244:	d2e8      	bcs.n	8005218 <quorem+0xb0>
 8005246:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800524a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800524e:	b92a      	cbnz	r2, 800525c <quorem+0xf4>
 8005250:	3b04      	subs	r3, #4
 8005252:	429e      	cmp	r6, r3
 8005254:	461a      	mov	r2, r3
 8005256:	d30b      	bcc.n	8005270 <quorem+0x108>
 8005258:	f8c8 4010 	str.w	r4, [r8, #16]
 800525c:	4628      	mov	r0, r5
 800525e:	b003      	add	sp, #12
 8005260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005264:	6812      	ldr	r2, [r2, #0]
 8005266:	3b04      	subs	r3, #4
 8005268:	2a00      	cmp	r2, #0
 800526a:	d1ca      	bne.n	8005202 <quorem+0x9a>
 800526c:	3c01      	subs	r4, #1
 800526e:	e7c5      	b.n	80051fc <quorem+0x94>
 8005270:	6812      	ldr	r2, [r2, #0]
 8005272:	3b04      	subs	r3, #4
 8005274:	2a00      	cmp	r2, #0
 8005276:	d1ef      	bne.n	8005258 <quorem+0xf0>
 8005278:	3c01      	subs	r4, #1
 800527a:	e7ea      	b.n	8005252 <quorem+0xea>
 800527c:	2000      	movs	r0, #0
 800527e:	e7ee      	b.n	800525e <quorem+0xf6>

08005280 <_dtoa_r>:
 8005280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005284:	ec57 6b10 	vmov	r6, r7, d0
 8005288:	b097      	sub	sp, #92	; 0x5c
 800528a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800528c:	9106      	str	r1, [sp, #24]
 800528e:	4604      	mov	r4, r0
 8005290:	920b      	str	r2, [sp, #44]	; 0x2c
 8005292:	9312      	str	r3, [sp, #72]	; 0x48
 8005294:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005298:	e9cd 6700 	strd	r6, r7, [sp]
 800529c:	b93d      	cbnz	r5, 80052ae <_dtoa_r+0x2e>
 800529e:	2010      	movs	r0, #16
 80052a0:	f7ff f9ea 	bl	8004678 <malloc>
 80052a4:	6260      	str	r0, [r4, #36]	; 0x24
 80052a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80052aa:	6005      	str	r5, [r0, #0]
 80052ac:	60c5      	str	r5, [r0, #12]
 80052ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052b0:	6819      	ldr	r1, [r3, #0]
 80052b2:	b151      	cbz	r1, 80052ca <_dtoa_r+0x4a>
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	604a      	str	r2, [r1, #4]
 80052b8:	2301      	movs	r3, #1
 80052ba:	4093      	lsls	r3, r2
 80052bc:	608b      	str	r3, [r1, #8]
 80052be:	4620      	mov	r0, r4
 80052c0:	f000 fde5 	bl	8005e8e <_Bfree>
 80052c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052c6:	2200      	movs	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	1e3b      	subs	r3, r7, #0
 80052cc:	bfbb      	ittet	lt
 80052ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80052d2:	9301      	strlt	r3, [sp, #4]
 80052d4:	2300      	movge	r3, #0
 80052d6:	2201      	movlt	r2, #1
 80052d8:	bfac      	ite	ge
 80052da:	f8c8 3000 	strge.w	r3, [r8]
 80052de:	f8c8 2000 	strlt.w	r2, [r8]
 80052e2:	4baf      	ldr	r3, [pc, #700]	; (80055a0 <_dtoa_r+0x320>)
 80052e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80052e8:	ea33 0308 	bics.w	r3, r3, r8
 80052ec:	d114      	bne.n	8005318 <_dtoa_r+0x98>
 80052ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80052f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	9b00      	ldr	r3, [sp, #0]
 80052f8:	b923      	cbnz	r3, 8005304 <_dtoa_r+0x84>
 80052fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80052fe:	2800      	cmp	r0, #0
 8005300:	f000 8542 	beq.w	8005d88 <_dtoa_r+0xb08>
 8005304:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005306:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80055b4 <_dtoa_r+0x334>
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 8544 	beq.w	8005d98 <_dtoa_r+0xb18>
 8005310:	f10b 0303 	add.w	r3, fp, #3
 8005314:	f000 bd3e 	b.w	8005d94 <_dtoa_r+0xb14>
 8005318:	e9dd 6700 	ldrd	r6, r7, [sp]
 800531c:	2200      	movs	r2, #0
 800531e:	2300      	movs	r3, #0
 8005320:	4630      	mov	r0, r6
 8005322:	4639      	mov	r1, r7
 8005324:	f7fb fbd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005328:	4681      	mov	r9, r0
 800532a:	b168      	cbz	r0, 8005348 <_dtoa_r+0xc8>
 800532c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800532e:	2301      	movs	r3, #1
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8524 	beq.w	8005d82 <_dtoa_r+0xb02>
 800533a:	4b9a      	ldr	r3, [pc, #616]	; (80055a4 <_dtoa_r+0x324>)
 800533c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800533e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	f000 bd28 	b.w	8005d98 <_dtoa_r+0xb18>
 8005348:	aa14      	add	r2, sp, #80	; 0x50
 800534a:	a915      	add	r1, sp, #84	; 0x54
 800534c:	ec47 6b10 	vmov	d0, r6, r7
 8005350:	4620      	mov	r0, r4
 8005352:	f000 fff4 	bl	800633e <__d2b>
 8005356:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800535a:	9004      	str	r0, [sp, #16]
 800535c:	2d00      	cmp	r5, #0
 800535e:	d07c      	beq.n	800545a <_dtoa_r+0x1da>
 8005360:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005364:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005368:	46b2      	mov	sl, r6
 800536a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800536e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005372:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005376:	2200      	movs	r2, #0
 8005378:	4b8b      	ldr	r3, [pc, #556]	; (80055a8 <_dtoa_r+0x328>)
 800537a:	4650      	mov	r0, sl
 800537c:	4659      	mov	r1, fp
 800537e:	f7fa ff83 	bl	8000288 <__aeabi_dsub>
 8005382:	a381      	add	r3, pc, #516	; (adr r3, 8005588 <_dtoa_r+0x308>)
 8005384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005388:	f7fb f936 	bl	80005f8 <__aeabi_dmul>
 800538c:	a380      	add	r3, pc, #512	; (adr r3, 8005590 <_dtoa_r+0x310>)
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	f7fa ff7b 	bl	800028c <__adddf3>
 8005396:	4606      	mov	r6, r0
 8005398:	4628      	mov	r0, r5
 800539a:	460f      	mov	r7, r1
 800539c:	f7fb f8c2 	bl	8000524 <__aeabi_i2d>
 80053a0:	a37d      	add	r3, pc, #500	; (adr r3, 8005598 <_dtoa_r+0x318>)
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	f7fb f927 	bl	80005f8 <__aeabi_dmul>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4630      	mov	r0, r6
 80053b0:	4639      	mov	r1, r7
 80053b2:	f7fa ff6b 	bl	800028c <__adddf3>
 80053b6:	4606      	mov	r6, r0
 80053b8:	460f      	mov	r7, r1
 80053ba:	f7fb fbcd 	bl	8000b58 <__aeabi_d2iz>
 80053be:	2200      	movs	r2, #0
 80053c0:	4682      	mov	sl, r0
 80053c2:	2300      	movs	r3, #0
 80053c4:	4630      	mov	r0, r6
 80053c6:	4639      	mov	r1, r7
 80053c8:	f7fb fb88 	bl	8000adc <__aeabi_dcmplt>
 80053cc:	b148      	cbz	r0, 80053e2 <_dtoa_r+0x162>
 80053ce:	4650      	mov	r0, sl
 80053d0:	f7fb f8a8 	bl	8000524 <__aeabi_i2d>
 80053d4:	4632      	mov	r2, r6
 80053d6:	463b      	mov	r3, r7
 80053d8:	f7fb fb76 	bl	8000ac8 <__aeabi_dcmpeq>
 80053dc:	b908      	cbnz	r0, 80053e2 <_dtoa_r+0x162>
 80053de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053e2:	f1ba 0f16 	cmp.w	sl, #22
 80053e6:	d859      	bhi.n	800549c <_dtoa_r+0x21c>
 80053e8:	4970      	ldr	r1, [pc, #448]	; (80055ac <_dtoa_r+0x32c>)
 80053ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80053ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053f6:	f7fb fb8f 	bl	8000b18 <__aeabi_dcmpgt>
 80053fa:	2800      	cmp	r0, #0
 80053fc:	d050      	beq.n	80054a0 <_dtoa_r+0x220>
 80053fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005402:	2300      	movs	r3, #0
 8005404:	930f      	str	r3, [sp, #60]	; 0x3c
 8005406:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005408:	1b5d      	subs	r5, r3, r5
 800540a:	f1b5 0801 	subs.w	r8, r5, #1
 800540e:	bf49      	itett	mi
 8005410:	f1c5 0301 	rsbmi	r3, r5, #1
 8005414:	2300      	movpl	r3, #0
 8005416:	9305      	strmi	r3, [sp, #20]
 8005418:	f04f 0800 	movmi.w	r8, #0
 800541c:	bf58      	it	pl
 800541e:	9305      	strpl	r3, [sp, #20]
 8005420:	f1ba 0f00 	cmp.w	sl, #0
 8005424:	db3e      	blt.n	80054a4 <_dtoa_r+0x224>
 8005426:	2300      	movs	r3, #0
 8005428:	44d0      	add	r8, sl
 800542a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800542e:	9307      	str	r3, [sp, #28]
 8005430:	9b06      	ldr	r3, [sp, #24]
 8005432:	2b09      	cmp	r3, #9
 8005434:	f200 8090 	bhi.w	8005558 <_dtoa_r+0x2d8>
 8005438:	2b05      	cmp	r3, #5
 800543a:	bfc4      	itt	gt
 800543c:	3b04      	subgt	r3, #4
 800543e:	9306      	strgt	r3, [sp, #24]
 8005440:	9b06      	ldr	r3, [sp, #24]
 8005442:	f1a3 0302 	sub.w	r3, r3, #2
 8005446:	bfcc      	ite	gt
 8005448:	2500      	movgt	r5, #0
 800544a:	2501      	movle	r5, #1
 800544c:	2b03      	cmp	r3, #3
 800544e:	f200 808f 	bhi.w	8005570 <_dtoa_r+0x2f0>
 8005452:	e8df f003 	tbb	[pc, r3]
 8005456:	7f7d      	.short	0x7f7d
 8005458:	7131      	.short	0x7131
 800545a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800545e:	441d      	add	r5, r3
 8005460:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005464:	2820      	cmp	r0, #32
 8005466:	dd13      	ble.n	8005490 <_dtoa_r+0x210>
 8005468:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800546c:	9b00      	ldr	r3, [sp, #0]
 800546e:	fa08 f800 	lsl.w	r8, r8, r0
 8005472:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005476:	fa23 f000 	lsr.w	r0, r3, r0
 800547a:	ea48 0000 	orr.w	r0, r8, r0
 800547e:	f7fb f841 	bl	8000504 <__aeabi_ui2d>
 8005482:	2301      	movs	r3, #1
 8005484:	4682      	mov	sl, r0
 8005486:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800548a:	3d01      	subs	r5, #1
 800548c:	9313      	str	r3, [sp, #76]	; 0x4c
 800548e:	e772      	b.n	8005376 <_dtoa_r+0xf6>
 8005490:	9b00      	ldr	r3, [sp, #0]
 8005492:	f1c0 0020 	rsb	r0, r0, #32
 8005496:	fa03 f000 	lsl.w	r0, r3, r0
 800549a:	e7f0      	b.n	800547e <_dtoa_r+0x1fe>
 800549c:	2301      	movs	r3, #1
 800549e:	e7b1      	b.n	8005404 <_dtoa_r+0x184>
 80054a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80054a2:	e7b0      	b.n	8005406 <_dtoa_r+0x186>
 80054a4:	9b05      	ldr	r3, [sp, #20]
 80054a6:	eba3 030a 	sub.w	r3, r3, sl
 80054aa:	9305      	str	r3, [sp, #20]
 80054ac:	f1ca 0300 	rsb	r3, sl, #0
 80054b0:	9307      	str	r3, [sp, #28]
 80054b2:	2300      	movs	r3, #0
 80054b4:	930e      	str	r3, [sp, #56]	; 0x38
 80054b6:	e7bb      	b.n	8005430 <_dtoa_r+0x1b0>
 80054b8:	2301      	movs	r3, #1
 80054ba:	930a      	str	r3, [sp, #40]	; 0x28
 80054bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	dd59      	ble.n	8005576 <_dtoa_r+0x2f6>
 80054c2:	9302      	str	r3, [sp, #8]
 80054c4:	4699      	mov	r9, r3
 80054c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80054c8:	2200      	movs	r2, #0
 80054ca:	6072      	str	r2, [r6, #4]
 80054cc:	2204      	movs	r2, #4
 80054ce:	f102 0014 	add.w	r0, r2, #20
 80054d2:	4298      	cmp	r0, r3
 80054d4:	6871      	ldr	r1, [r6, #4]
 80054d6:	d953      	bls.n	8005580 <_dtoa_r+0x300>
 80054d8:	4620      	mov	r0, r4
 80054da:	f000 fca4 	bl	8005e26 <_Balloc>
 80054de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054e0:	6030      	str	r0, [r6, #0]
 80054e2:	f1b9 0f0e 	cmp.w	r9, #14
 80054e6:	f8d3 b000 	ldr.w	fp, [r3]
 80054ea:	f200 80e6 	bhi.w	80056ba <_dtoa_r+0x43a>
 80054ee:	2d00      	cmp	r5, #0
 80054f0:	f000 80e3 	beq.w	80056ba <_dtoa_r+0x43a>
 80054f4:	ed9d 7b00 	vldr	d7, [sp]
 80054f8:	f1ba 0f00 	cmp.w	sl, #0
 80054fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005500:	dd74      	ble.n	80055ec <_dtoa_r+0x36c>
 8005502:	4a2a      	ldr	r2, [pc, #168]	; (80055ac <_dtoa_r+0x32c>)
 8005504:	f00a 030f 	and.w	r3, sl, #15
 8005508:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800550c:	ed93 7b00 	vldr	d7, [r3]
 8005510:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005514:	06f0      	lsls	r0, r6, #27
 8005516:	ed8d 7b08 	vstr	d7, [sp, #32]
 800551a:	d565      	bpl.n	80055e8 <_dtoa_r+0x368>
 800551c:	4b24      	ldr	r3, [pc, #144]	; (80055b0 <_dtoa_r+0x330>)
 800551e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005522:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005526:	f7fb f991 	bl	800084c <__aeabi_ddiv>
 800552a:	e9cd 0100 	strd	r0, r1, [sp]
 800552e:	f006 060f 	and.w	r6, r6, #15
 8005532:	2503      	movs	r5, #3
 8005534:	4f1e      	ldr	r7, [pc, #120]	; (80055b0 <_dtoa_r+0x330>)
 8005536:	e04c      	b.n	80055d2 <_dtoa_r+0x352>
 8005538:	2301      	movs	r3, #1
 800553a:	930a      	str	r3, [sp, #40]	; 0x28
 800553c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800553e:	4453      	add	r3, sl
 8005540:	f103 0901 	add.w	r9, r3, #1
 8005544:	9302      	str	r3, [sp, #8]
 8005546:	464b      	mov	r3, r9
 8005548:	2b01      	cmp	r3, #1
 800554a:	bfb8      	it	lt
 800554c:	2301      	movlt	r3, #1
 800554e:	e7ba      	b.n	80054c6 <_dtoa_r+0x246>
 8005550:	2300      	movs	r3, #0
 8005552:	e7b2      	b.n	80054ba <_dtoa_r+0x23a>
 8005554:	2300      	movs	r3, #0
 8005556:	e7f0      	b.n	800553a <_dtoa_r+0x2ba>
 8005558:	2501      	movs	r5, #1
 800555a:	2300      	movs	r3, #0
 800555c:	9306      	str	r3, [sp, #24]
 800555e:	950a      	str	r5, [sp, #40]	; 0x28
 8005560:	f04f 33ff 	mov.w	r3, #4294967295
 8005564:	9302      	str	r3, [sp, #8]
 8005566:	4699      	mov	r9, r3
 8005568:	2200      	movs	r2, #0
 800556a:	2312      	movs	r3, #18
 800556c:	920b      	str	r2, [sp, #44]	; 0x2c
 800556e:	e7aa      	b.n	80054c6 <_dtoa_r+0x246>
 8005570:	2301      	movs	r3, #1
 8005572:	930a      	str	r3, [sp, #40]	; 0x28
 8005574:	e7f4      	b.n	8005560 <_dtoa_r+0x2e0>
 8005576:	2301      	movs	r3, #1
 8005578:	9302      	str	r3, [sp, #8]
 800557a:	4699      	mov	r9, r3
 800557c:	461a      	mov	r2, r3
 800557e:	e7f5      	b.n	800556c <_dtoa_r+0x2ec>
 8005580:	3101      	adds	r1, #1
 8005582:	6071      	str	r1, [r6, #4]
 8005584:	0052      	lsls	r2, r2, #1
 8005586:	e7a2      	b.n	80054ce <_dtoa_r+0x24e>
 8005588:	636f4361 	.word	0x636f4361
 800558c:	3fd287a7 	.word	0x3fd287a7
 8005590:	8b60c8b3 	.word	0x8b60c8b3
 8005594:	3fc68a28 	.word	0x3fc68a28
 8005598:	509f79fb 	.word	0x509f79fb
 800559c:	3fd34413 	.word	0x3fd34413
 80055a0:	7ff00000 	.word	0x7ff00000
 80055a4:	08007d81 	.word	0x08007d81
 80055a8:	3ff80000 	.word	0x3ff80000
 80055ac:	08007de0 	.word	0x08007de0
 80055b0:	08007db8 	.word	0x08007db8
 80055b4:	08007dad 	.word	0x08007dad
 80055b8:	07f1      	lsls	r1, r6, #31
 80055ba:	d508      	bpl.n	80055ce <_dtoa_r+0x34e>
 80055bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80055c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055c4:	f7fb f818 	bl	80005f8 <__aeabi_dmul>
 80055c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80055cc:	3501      	adds	r5, #1
 80055ce:	1076      	asrs	r6, r6, #1
 80055d0:	3708      	adds	r7, #8
 80055d2:	2e00      	cmp	r6, #0
 80055d4:	d1f0      	bne.n	80055b8 <_dtoa_r+0x338>
 80055d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80055da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055de:	f7fb f935 	bl	800084c <__aeabi_ddiv>
 80055e2:	e9cd 0100 	strd	r0, r1, [sp]
 80055e6:	e01a      	b.n	800561e <_dtoa_r+0x39e>
 80055e8:	2502      	movs	r5, #2
 80055ea:	e7a3      	b.n	8005534 <_dtoa_r+0x2b4>
 80055ec:	f000 80a0 	beq.w	8005730 <_dtoa_r+0x4b0>
 80055f0:	f1ca 0600 	rsb	r6, sl, #0
 80055f4:	4b9f      	ldr	r3, [pc, #636]	; (8005874 <_dtoa_r+0x5f4>)
 80055f6:	4fa0      	ldr	r7, [pc, #640]	; (8005878 <_dtoa_r+0x5f8>)
 80055f8:	f006 020f 	and.w	r2, r6, #15
 80055fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005604:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005608:	f7fa fff6 	bl	80005f8 <__aeabi_dmul>
 800560c:	e9cd 0100 	strd	r0, r1, [sp]
 8005610:	1136      	asrs	r6, r6, #4
 8005612:	2300      	movs	r3, #0
 8005614:	2502      	movs	r5, #2
 8005616:	2e00      	cmp	r6, #0
 8005618:	d17f      	bne.n	800571a <_dtoa_r+0x49a>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e1      	bne.n	80055e2 <_dtoa_r+0x362>
 800561e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 8087 	beq.w	8005734 <_dtoa_r+0x4b4>
 8005626:	e9dd 6700 	ldrd	r6, r7, [sp]
 800562a:	2200      	movs	r2, #0
 800562c:	4b93      	ldr	r3, [pc, #588]	; (800587c <_dtoa_r+0x5fc>)
 800562e:	4630      	mov	r0, r6
 8005630:	4639      	mov	r1, r7
 8005632:	f7fb fa53 	bl	8000adc <__aeabi_dcmplt>
 8005636:	2800      	cmp	r0, #0
 8005638:	d07c      	beq.n	8005734 <_dtoa_r+0x4b4>
 800563a:	f1b9 0f00 	cmp.w	r9, #0
 800563e:	d079      	beq.n	8005734 <_dtoa_r+0x4b4>
 8005640:	9b02      	ldr	r3, [sp, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	dd35      	ble.n	80056b2 <_dtoa_r+0x432>
 8005646:	f10a 33ff 	add.w	r3, sl, #4294967295
 800564a:	9308      	str	r3, [sp, #32]
 800564c:	4639      	mov	r1, r7
 800564e:	2200      	movs	r2, #0
 8005650:	4b8b      	ldr	r3, [pc, #556]	; (8005880 <_dtoa_r+0x600>)
 8005652:	4630      	mov	r0, r6
 8005654:	f7fa ffd0 	bl	80005f8 <__aeabi_dmul>
 8005658:	e9cd 0100 	strd	r0, r1, [sp]
 800565c:	9f02      	ldr	r7, [sp, #8]
 800565e:	3501      	adds	r5, #1
 8005660:	4628      	mov	r0, r5
 8005662:	f7fa ff5f 	bl	8000524 <__aeabi_i2d>
 8005666:	e9dd 2300 	ldrd	r2, r3, [sp]
 800566a:	f7fa ffc5 	bl	80005f8 <__aeabi_dmul>
 800566e:	2200      	movs	r2, #0
 8005670:	4b84      	ldr	r3, [pc, #528]	; (8005884 <_dtoa_r+0x604>)
 8005672:	f7fa fe0b 	bl	800028c <__adddf3>
 8005676:	4605      	mov	r5, r0
 8005678:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800567c:	2f00      	cmp	r7, #0
 800567e:	d15d      	bne.n	800573c <_dtoa_r+0x4bc>
 8005680:	2200      	movs	r2, #0
 8005682:	4b81      	ldr	r3, [pc, #516]	; (8005888 <_dtoa_r+0x608>)
 8005684:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005688:	f7fa fdfe 	bl	8000288 <__aeabi_dsub>
 800568c:	462a      	mov	r2, r5
 800568e:	4633      	mov	r3, r6
 8005690:	e9cd 0100 	strd	r0, r1, [sp]
 8005694:	f7fb fa40 	bl	8000b18 <__aeabi_dcmpgt>
 8005698:	2800      	cmp	r0, #0
 800569a:	f040 8288 	bne.w	8005bae <_dtoa_r+0x92e>
 800569e:	462a      	mov	r2, r5
 80056a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80056a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056a8:	f7fb fa18 	bl	8000adc <__aeabi_dcmplt>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	f040 827c 	bne.w	8005baa <_dtoa_r+0x92a>
 80056b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056b6:	e9cd 2300 	strd	r2, r3, [sp]
 80056ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f2c0 8150 	blt.w	8005962 <_dtoa_r+0x6e2>
 80056c2:	f1ba 0f0e 	cmp.w	sl, #14
 80056c6:	f300 814c 	bgt.w	8005962 <_dtoa_r+0x6e2>
 80056ca:	4b6a      	ldr	r3, [pc, #424]	; (8005874 <_dtoa_r+0x5f4>)
 80056cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80056d0:	ed93 7b00 	vldr	d7, [r3]
 80056d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80056dc:	f280 80d8 	bge.w	8005890 <_dtoa_r+0x610>
 80056e0:	f1b9 0f00 	cmp.w	r9, #0
 80056e4:	f300 80d4 	bgt.w	8005890 <_dtoa_r+0x610>
 80056e8:	f040 825e 	bne.w	8005ba8 <_dtoa_r+0x928>
 80056ec:	2200      	movs	r2, #0
 80056ee:	4b66      	ldr	r3, [pc, #408]	; (8005888 <_dtoa_r+0x608>)
 80056f0:	ec51 0b17 	vmov	r0, r1, d7
 80056f4:	f7fa ff80 	bl	80005f8 <__aeabi_dmul>
 80056f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056fc:	f7fb fa02 	bl	8000b04 <__aeabi_dcmpge>
 8005700:	464f      	mov	r7, r9
 8005702:	464e      	mov	r6, r9
 8005704:	2800      	cmp	r0, #0
 8005706:	f040 8234 	bne.w	8005b72 <_dtoa_r+0x8f2>
 800570a:	2331      	movs	r3, #49	; 0x31
 800570c:	f10b 0501 	add.w	r5, fp, #1
 8005710:	f88b 3000 	strb.w	r3, [fp]
 8005714:	f10a 0a01 	add.w	sl, sl, #1
 8005718:	e22f      	b.n	8005b7a <_dtoa_r+0x8fa>
 800571a:	07f2      	lsls	r2, r6, #31
 800571c:	d505      	bpl.n	800572a <_dtoa_r+0x4aa>
 800571e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005722:	f7fa ff69 	bl	80005f8 <__aeabi_dmul>
 8005726:	3501      	adds	r5, #1
 8005728:	2301      	movs	r3, #1
 800572a:	1076      	asrs	r6, r6, #1
 800572c:	3708      	adds	r7, #8
 800572e:	e772      	b.n	8005616 <_dtoa_r+0x396>
 8005730:	2502      	movs	r5, #2
 8005732:	e774      	b.n	800561e <_dtoa_r+0x39e>
 8005734:	f8cd a020 	str.w	sl, [sp, #32]
 8005738:	464f      	mov	r7, r9
 800573a:	e791      	b.n	8005660 <_dtoa_r+0x3e0>
 800573c:	4b4d      	ldr	r3, [pc, #308]	; (8005874 <_dtoa_r+0x5f4>)
 800573e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005742:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005748:	2b00      	cmp	r3, #0
 800574a:	d047      	beq.n	80057dc <_dtoa_r+0x55c>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	2000      	movs	r0, #0
 8005752:	494e      	ldr	r1, [pc, #312]	; (800588c <_dtoa_r+0x60c>)
 8005754:	f7fb f87a 	bl	800084c <__aeabi_ddiv>
 8005758:	462a      	mov	r2, r5
 800575a:	4633      	mov	r3, r6
 800575c:	f7fa fd94 	bl	8000288 <__aeabi_dsub>
 8005760:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005764:	465d      	mov	r5, fp
 8005766:	e9dd 0100 	ldrd	r0, r1, [sp]
 800576a:	f7fb f9f5 	bl	8000b58 <__aeabi_d2iz>
 800576e:	4606      	mov	r6, r0
 8005770:	f7fa fed8 	bl	8000524 <__aeabi_i2d>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	e9dd 0100 	ldrd	r0, r1, [sp]
 800577c:	f7fa fd84 	bl	8000288 <__aeabi_dsub>
 8005780:	3630      	adds	r6, #48	; 0x30
 8005782:	f805 6b01 	strb.w	r6, [r5], #1
 8005786:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800578a:	e9cd 0100 	strd	r0, r1, [sp]
 800578e:	f7fb f9a5 	bl	8000adc <__aeabi_dcmplt>
 8005792:	2800      	cmp	r0, #0
 8005794:	d163      	bne.n	800585e <_dtoa_r+0x5de>
 8005796:	e9dd 2300 	ldrd	r2, r3, [sp]
 800579a:	2000      	movs	r0, #0
 800579c:	4937      	ldr	r1, [pc, #220]	; (800587c <_dtoa_r+0x5fc>)
 800579e:	f7fa fd73 	bl	8000288 <__aeabi_dsub>
 80057a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80057a6:	f7fb f999 	bl	8000adc <__aeabi_dcmplt>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	f040 80b7 	bne.w	800591e <_dtoa_r+0x69e>
 80057b0:	eba5 030b 	sub.w	r3, r5, fp
 80057b4:	429f      	cmp	r7, r3
 80057b6:	f77f af7c 	ble.w	80056b2 <_dtoa_r+0x432>
 80057ba:	2200      	movs	r2, #0
 80057bc:	4b30      	ldr	r3, [pc, #192]	; (8005880 <_dtoa_r+0x600>)
 80057be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057c2:	f7fa ff19 	bl	80005f8 <__aeabi_dmul>
 80057c6:	2200      	movs	r2, #0
 80057c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80057cc:	4b2c      	ldr	r3, [pc, #176]	; (8005880 <_dtoa_r+0x600>)
 80057ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057d2:	f7fa ff11 	bl	80005f8 <__aeabi_dmul>
 80057d6:	e9cd 0100 	strd	r0, r1, [sp]
 80057da:	e7c4      	b.n	8005766 <_dtoa_r+0x4e6>
 80057dc:	462a      	mov	r2, r5
 80057de:	4633      	mov	r3, r6
 80057e0:	f7fa ff0a 	bl	80005f8 <__aeabi_dmul>
 80057e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80057e8:	eb0b 0507 	add.w	r5, fp, r7
 80057ec:	465e      	mov	r6, fp
 80057ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057f2:	f7fb f9b1 	bl	8000b58 <__aeabi_d2iz>
 80057f6:	4607      	mov	r7, r0
 80057f8:	f7fa fe94 	bl	8000524 <__aeabi_i2d>
 80057fc:	3730      	adds	r7, #48	; 0x30
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005806:	f7fa fd3f 	bl	8000288 <__aeabi_dsub>
 800580a:	f806 7b01 	strb.w	r7, [r6], #1
 800580e:	42ae      	cmp	r6, r5
 8005810:	e9cd 0100 	strd	r0, r1, [sp]
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	d126      	bne.n	8005868 <_dtoa_r+0x5e8>
 800581a:	4b1c      	ldr	r3, [pc, #112]	; (800588c <_dtoa_r+0x60c>)
 800581c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005820:	f7fa fd34 	bl	800028c <__adddf3>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	e9dd 0100 	ldrd	r0, r1, [sp]
 800582c:	f7fb f974 	bl	8000b18 <__aeabi_dcmpgt>
 8005830:	2800      	cmp	r0, #0
 8005832:	d174      	bne.n	800591e <_dtoa_r+0x69e>
 8005834:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005838:	2000      	movs	r0, #0
 800583a:	4914      	ldr	r1, [pc, #80]	; (800588c <_dtoa_r+0x60c>)
 800583c:	f7fa fd24 	bl	8000288 <__aeabi_dsub>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005848:	f7fb f948 	bl	8000adc <__aeabi_dcmplt>
 800584c:	2800      	cmp	r0, #0
 800584e:	f43f af30 	beq.w	80056b2 <_dtoa_r+0x432>
 8005852:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005856:	2b30      	cmp	r3, #48	; 0x30
 8005858:	f105 32ff 	add.w	r2, r5, #4294967295
 800585c:	d002      	beq.n	8005864 <_dtoa_r+0x5e4>
 800585e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005862:	e04a      	b.n	80058fa <_dtoa_r+0x67a>
 8005864:	4615      	mov	r5, r2
 8005866:	e7f4      	b.n	8005852 <_dtoa_r+0x5d2>
 8005868:	4b05      	ldr	r3, [pc, #20]	; (8005880 <_dtoa_r+0x600>)
 800586a:	f7fa fec5 	bl	80005f8 <__aeabi_dmul>
 800586e:	e9cd 0100 	strd	r0, r1, [sp]
 8005872:	e7bc      	b.n	80057ee <_dtoa_r+0x56e>
 8005874:	08007de0 	.word	0x08007de0
 8005878:	08007db8 	.word	0x08007db8
 800587c:	3ff00000 	.word	0x3ff00000
 8005880:	40240000 	.word	0x40240000
 8005884:	401c0000 	.word	0x401c0000
 8005888:	40140000 	.word	0x40140000
 800588c:	3fe00000 	.word	0x3fe00000
 8005890:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005894:	465d      	mov	r5, fp
 8005896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800589a:	4630      	mov	r0, r6
 800589c:	4639      	mov	r1, r7
 800589e:	f7fa ffd5 	bl	800084c <__aeabi_ddiv>
 80058a2:	f7fb f959 	bl	8000b58 <__aeabi_d2iz>
 80058a6:	4680      	mov	r8, r0
 80058a8:	f7fa fe3c 	bl	8000524 <__aeabi_i2d>
 80058ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058b0:	f7fa fea2 	bl	80005f8 <__aeabi_dmul>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4630      	mov	r0, r6
 80058ba:	4639      	mov	r1, r7
 80058bc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80058c0:	f7fa fce2 	bl	8000288 <__aeabi_dsub>
 80058c4:	f805 6b01 	strb.w	r6, [r5], #1
 80058c8:	eba5 060b 	sub.w	r6, r5, fp
 80058cc:	45b1      	cmp	r9, r6
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	d139      	bne.n	8005948 <_dtoa_r+0x6c8>
 80058d4:	f7fa fcda 	bl	800028c <__adddf3>
 80058d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058dc:	4606      	mov	r6, r0
 80058de:	460f      	mov	r7, r1
 80058e0:	f7fb f91a 	bl	8000b18 <__aeabi_dcmpgt>
 80058e4:	b9c8      	cbnz	r0, 800591a <_dtoa_r+0x69a>
 80058e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058ea:	4630      	mov	r0, r6
 80058ec:	4639      	mov	r1, r7
 80058ee:	f7fb f8eb 	bl	8000ac8 <__aeabi_dcmpeq>
 80058f2:	b110      	cbz	r0, 80058fa <_dtoa_r+0x67a>
 80058f4:	f018 0f01 	tst.w	r8, #1
 80058f8:	d10f      	bne.n	800591a <_dtoa_r+0x69a>
 80058fa:	9904      	ldr	r1, [sp, #16]
 80058fc:	4620      	mov	r0, r4
 80058fe:	f000 fac6 	bl	8005e8e <_Bfree>
 8005902:	2300      	movs	r3, #0
 8005904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005906:	702b      	strb	r3, [r5, #0]
 8005908:	f10a 0301 	add.w	r3, sl, #1
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 8241 	beq.w	8005d98 <_dtoa_r+0xb18>
 8005916:	601d      	str	r5, [r3, #0]
 8005918:	e23e      	b.n	8005d98 <_dtoa_r+0xb18>
 800591a:	f8cd a020 	str.w	sl, [sp, #32]
 800591e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005922:	2a39      	cmp	r2, #57	; 0x39
 8005924:	f105 33ff 	add.w	r3, r5, #4294967295
 8005928:	d108      	bne.n	800593c <_dtoa_r+0x6bc>
 800592a:	459b      	cmp	fp, r3
 800592c:	d10a      	bne.n	8005944 <_dtoa_r+0x6c4>
 800592e:	9b08      	ldr	r3, [sp, #32]
 8005930:	3301      	adds	r3, #1
 8005932:	9308      	str	r3, [sp, #32]
 8005934:	2330      	movs	r3, #48	; 0x30
 8005936:	f88b 3000 	strb.w	r3, [fp]
 800593a:	465b      	mov	r3, fp
 800593c:	781a      	ldrb	r2, [r3, #0]
 800593e:	3201      	adds	r2, #1
 8005940:	701a      	strb	r2, [r3, #0]
 8005942:	e78c      	b.n	800585e <_dtoa_r+0x5de>
 8005944:	461d      	mov	r5, r3
 8005946:	e7ea      	b.n	800591e <_dtoa_r+0x69e>
 8005948:	2200      	movs	r2, #0
 800594a:	4b9b      	ldr	r3, [pc, #620]	; (8005bb8 <_dtoa_r+0x938>)
 800594c:	f7fa fe54 	bl	80005f8 <__aeabi_dmul>
 8005950:	2200      	movs	r2, #0
 8005952:	2300      	movs	r3, #0
 8005954:	4606      	mov	r6, r0
 8005956:	460f      	mov	r7, r1
 8005958:	f7fb f8b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800595c:	2800      	cmp	r0, #0
 800595e:	d09a      	beq.n	8005896 <_dtoa_r+0x616>
 8005960:	e7cb      	b.n	80058fa <_dtoa_r+0x67a>
 8005962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005964:	2a00      	cmp	r2, #0
 8005966:	f000 808b 	beq.w	8005a80 <_dtoa_r+0x800>
 800596a:	9a06      	ldr	r2, [sp, #24]
 800596c:	2a01      	cmp	r2, #1
 800596e:	dc6e      	bgt.n	8005a4e <_dtoa_r+0x7ce>
 8005970:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005972:	2a00      	cmp	r2, #0
 8005974:	d067      	beq.n	8005a46 <_dtoa_r+0x7c6>
 8005976:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800597a:	9f07      	ldr	r7, [sp, #28]
 800597c:	9d05      	ldr	r5, [sp, #20]
 800597e:	9a05      	ldr	r2, [sp, #20]
 8005980:	2101      	movs	r1, #1
 8005982:	441a      	add	r2, r3
 8005984:	4620      	mov	r0, r4
 8005986:	9205      	str	r2, [sp, #20]
 8005988:	4498      	add	r8, r3
 800598a:	f000 fb20 	bl	8005fce <__i2b>
 800598e:	4606      	mov	r6, r0
 8005990:	2d00      	cmp	r5, #0
 8005992:	dd0c      	ble.n	80059ae <_dtoa_r+0x72e>
 8005994:	f1b8 0f00 	cmp.w	r8, #0
 8005998:	dd09      	ble.n	80059ae <_dtoa_r+0x72e>
 800599a:	4545      	cmp	r5, r8
 800599c:	9a05      	ldr	r2, [sp, #20]
 800599e:	462b      	mov	r3, r5
 80059a0:	bfa8      	it	ge
 80059a2:	4643      	movge	r3, r8
 80059a4:	1ad2      	subs	r2, r2, r3
 80059a6:	9205      	str	r2, [sp, #20]
 80059a8:	1aed      	subs	r5, r5, r3
 80059aa:	eba8 0803 	sub.w	r8, r8, r3
 80059ae:	9b07      	ldr	r3, [sp, #28]
 80059b0:	b1eb      	cbz	r3, 80059ee <_dtoa_r+0x76e>
 80059b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d067      	beq.n	8005a88 <_dtoa_r+0x808>
 80059b8:	b18f      	cbz	r7, 80059de <_dtoa_r+0x75e>
 80059ba:	4631      	mov	r1, r6
 80059bc:	463a      	mov	r2, r7
 80059be:	4620      	mov	r0, r4
 80059c0:	f000 fba4 	bl	800610c <__pow5mult>
 80059c4:	9a04      	ldr	r2, [sp, #16]
 80059c6:	4601      	mov	r1, r0
 80059c8:	4606      	mov	r6, r0
 80059ca:	4620      	mov	r0, r4
 80059cc:	f000 fb08 	bl	8005fe0 <__multiply>
 80059d0:	9904      	ldr	r1, [sp, #16]
 80059d2:	9008      	str	r0, [sp, #32]
 80059d4:	4620      	mov	r0, r4
 80059d6:	f000 fa5a 	bl	8005e8e <_Bfree>
 80059da:	9b08      	ldr	r3, [sp, #32]
 80059dc:	9304      	str	r3, [sp, #16]
 80059de:	9b07      	ldr	r3, [sp, #28]
 80059e0:	1bda      	subs	r2, r3, r7
 80059e2:	d004      	beq.n	80059ee <_dtoa_r+0x76e>
 80059e4:	9904      	ldr	r1, [sp, #16]
 80059e6:	4620      	mov	r0, r4
 80059e8:	f000 fb90 	bl	800610c <__pow5mult>
 80059ec:	9004      	str	r0, [sp, #16]
 80059ee:	2101      	movs	r1, #1
 80059f0:	4620      	mov	r0, r4
 80059f2:	f000 faec 	bl	8005fce <__i2b>
 80059f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059f8:	4607      	mov	r7, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 81d0 	beq.w	8005da0 <_dtoa_r+0xb20>
 8005a00:	461a      	mov	r2, r3
 8005a02:	4601      	mov	r1, r0
 8005a04:	4620      	mov	r0, r4
 8005a06:	f000 fb81 	bl	800610c <__pow5mult>
 8005a0a:	9b06      	ldr	r3, [sp, #24]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	4607      	mov	r7, r0
 8005a10:	dc40      	bgt.n	8005a94 <_dtoa_r+0x814>
 8005a12:	9b00      	ldr	r3, [sp, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d139      	bne.n	8005a8c <_dtoa_r+0x80c>
 8005a18:	9b01      	ldr	r3, [sp, #4]
 8005a1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d136      	bne.n	8005a90 <_dtoa_r+0x810>
 8005a22:	9b01      	ldr	r3, [sp, #4]
 8005a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a28:	0d1b      	lsrs	r3, r3, #20
 8005a2a:	051b      	lsls	r3, r3, #20
 8005a2c:	b12b      	cbz	r3, 8005a3a <_dtoa_r+0x7ba>
 8005a2e:	9b05      	ldr	r3, [sp, #20]
 8005a30:	3301      	adds	r3, #1
 8005a32:	9305      	str	r3, [sp, #20]
 8005a34:	f108 0801 	add.w	r8, r8, #1
 8005a38:	2301      	movs	r3, #1
 8005a3a:	9307      	str	r3, [sp, #28]
 8005a3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d12a      	bne.n	8005a98 <_dtoa_r+0x818>
 8005a42:	2001      	movs	r0, #1
 8005a44:	e030      	b.n	8005aa8 <_dtoa_r+0x828>
 8005a46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a48:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a4c:	e795      	b.n	800597a <_dtoa_r+0x6fa>
 8005a4e:	9b07      	ldr	r3, [sp, #28]
 8005a50:	f109 37ff 	add.w	r7, r9, #4294967295
 8005a54:	42bb      	cmp	r3, r7
 8005a56:	bfbf      	itttt	lt
 8005a58:	9b07      	ldrlt	r3, [sp, #28]
 8005a5a:	9707      	strlt	r7, [sp, #28]
 8005a5c:	1afa      	sublt	r2, r7, r3
 8005a5e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005a60:	bfbb      	ittet	lt
 8005a62:	189b      	addlt	r3, r3, r2
 8005a64:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005a66:	1bdf      	subge	r7, r3, r7
 8005a68:	2700      	movlt	r7, #0
 8005a6a:	f1b9 0f00 	cmp.w	r9, #0
 8005a6e:	bfb5      	itete	lt
 8005a70:	9b05      	ldrlt	r3, [sp, #20]
 8005a72:	9d05      	ldrge	r5, [sp, #20]
 8005a74:	eba3 0509 	sublt.w	r5, r3, r9
 8005a78:	464b      	movge	r3, r9
 8005a7a:	bfb8      	it	lt
 8005a7c:	2300      	movlt	r3, #0
 8005a7e:	e77e      	b.n	800597e <_dtoa_r+0x6fe>
 8005a80:	9f07      	ldr	r7, [sp, #28]
 8005a82:	9d05      	ldr	r5, [sp, #20]
 8005a84:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005a86:	e783      	b.n	8005990 <_dtoa_r+0x710>
 8005a88:	9a07      	ldr	r2, [sp, #28]
 8005a8a:	e7ab      	b.n	80059e4 <_dtoa_r+0x764>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	e7d4      	b.n	8005a3a <_dtoa_r+0x7ba>
 8005a90:	9b00      	ldr	r3, [sp, #0]
 8005a92:	e7d2      	b.n	8005a3a <_dtoa_r+0x7ba>
 8005a94:	2300      	movs	r3, #0
 8005a96:	9307      	str	r3, [sp, #28]
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005a9e:	6918      	ldr	r0, [r3, #16]
 8005aa0:	f000 fa47 	bl	8005f32 <__hi0bits>
 8005aa4:	f1c0 0020 	rsb	r0, r0, #32
 8005aa8:	4440      	add	r0, r8
 8005aaa:	f010 001f 	ands.w	r0, r0, #31
 8005aae:	d047      	beq.n	8005b40 <_dtoa_r+0x8c0>
 8005ab0:	f1c0 0320 	rsb	r3, r0, #32
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	dd3b      	ble.n	8005b30 <_dtoa_r+0x8b0>
 8005ab8:	9b05      	ldr	r3, [sp, #20]
 8005aba:	f1c0 001c 	rsb	r0, r0, #28
 8005abe:	4403      	add	r3, r0
 8005ac0:	9305      	str	r3, [sp, #20]
 8005ac2:	4405      	add	r5, r0
 8005ac4:	4480      	add	r8, r0
 8005ac6:	9b05      	ldr	r3, [sp, #20]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	dd05      	ble.n	8005ad8 <_dtoa_r+0x858>
 8005acc:	461a      	mov	r2, r3
 8005ace:	9904      	ldr	r1, [sp, #16]
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f000 fb69 	bl	80061a8 <__lshift>
 8005ad6:	9004      	str	r0, [sp, #16]
 8005ad8:	f1b8 0f00 	cmp.w	r8, #0
 8005adc:	dd05      	ble.n	8005aea <_dtoa_r+0x86a>
 8005ade:	4639      	mov	r1, r7
 8005ae0:	4642      	mov	r2, r8
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f000 fb60 	bl	80061a8 <__lshift>
 8005ae8:	4607      	mov	r7, r0
 8005aea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005aec:	b353      	cbz	r3, 8005b44 <_dtoa_r+0x8c4>
 8005aee:	4639      	mov	r1, r7
 8005af0:	9804      	ldr	r0, [sp, #16]
 8005af2:	f000 fbad 	bl	8006250 <__mcmp>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	da24      	bge.n	8005b44 <_dtoa_r+0x8c4>
 8005afa:	2300      	movs	r3, #0
 8005afc:	220a      	movs	r2, #10
 8005afe:	9904      	ldr	r1, [sp, #16]
 8005b00:	4620      	mov	r0, r4
 8005b02:	f000 f9db 	bl	8005ebc <__multadd>
 8005b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b08:	9004      	str	r0, [sp, #16]
 8005b0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 814d 	beq.w	8005dae <_dtoa_r+0xb2e>
 8005b14:	2300      	movs	r3, #0
 8005b16:	4631      	mov	r1, r6
 8005b18:	220a      	movs	r2, #10
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f000 f9ce 	bl	8005ebc <__multadd>
 8005b20:	9b02      	ldr	r3, [sp, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	4606      	mov	r6, r0
 8005b26:	dc4f      	bgt.n	8005bc8 <_dtoa_r+0x948>
 8005b28:	9b06      	ldr	r3, [sp, #24]
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	dd4c      	ble.n	8005bc8 <_dtoa_r+0x948>
 8005b2e:	e011      	b.n	8005b54 <_dtoa_r+0x8d4>
 8005b30:	d0c9      	beq.n	8005ac6 <_dtoa_r+0x846>
 8005b32:	9a05      	ldr	r2, [sp, #20]
 8005b34:	331c      	adds	r3, #28
 8005b36:	441a      	add	r2, r3
 8005b38:	9205      	str	r2, [sp, #20]
 8005b3a:	441d      	add	r5, r3
 8005b3c:	4498      	add	r8, r3
 8005b3e:	e7c2      	b.n	8005ac6 <_dtoa_r+0x846>
 8005b40:	4603      	mov	r3, r0
 8005b42:	e7f6      	b.n	8005b32 <_dtoa_r+0x8b2>
 8005b44:	f1b9 0f00 	cmp.w	r9, #0
 8005b48:	dc38      	bgt.n	8005bbc <_dtoa_r+0x93c>
 8005b4a:	9b06      	ldr	r3, [sp, #24]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	dd35      	ble.n	8005bbc <_dtoa_r+0x93c>
 8005b50:	f8cd 9008 	str.w	r9, [sp, #8]
 8005b54:	9b02      	ldr	r3, [sp, #8]
 8005b56:	b963      	cbnz	r3, 8005b72 <_dtoa_r+0x8f2>
 8005b58:	4639      	mov	r1, r7
 8005b5a:	2205      	movs	r2, #5
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f000 f9ad 	bl	8005ebc <__multadd>
 8005b62:	4601      	mov	r1, r0
 8005b64:	4607      	mov	r7, r0
 8005b66:	9804      	ldr	r0, [sp, #16]
 8005b68:	f000 fb72 	bl	8006250 <__mcmp>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	f73f adcc 	bgt.w	800570a <_dtoa_r+0x48a>
 8005b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b74:	465d      	mov	r5, fp
 8005b76:	ea6f 0a03 	mvn.w	sl, r3
 8005b7a:	f04f 0900 	mov.w	r9, #0
 8005b7e:	4639      	mov	r1, r7
 8005b80:	4620      	mov	r0, r4
 8005b82:	f000 f984 	bl	8005e8e <_Bfree>
 8005b86:	2e00      	cmp	r6, #0
 8005b88:	f43f aeb7 	beq.w	80058fa <_dtoa_r+0x67a>
 8005b8c:	f1b9 0f00 	cmp.w	r9, #0
 8005b90:	d005      	beq.n	8005b9e <_dtoa_r+0x91e>
 8005b92:	45b1      	cmp	r9, r6
 8005b94:	d003      	beq.n	8005b9e <_dtoa_r+0x91e>
 8005b96:	4649      	mov	r1, r9
 8005b98:	4620      	mov	r0, r4
 8005b9a:	f000 f978 	bl	8005e8e <_Bfree>
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	f000 f974 	bl	8005e8e <_Bfree>
 8005ba6:	e6a8      	b.n	80058fa <_dtoa_r+0x67a>
 8005ba8:	2700      	movs	r7, #0
 8005baa:	463e      	mov	r6, r7
 8005bac:	e7e1      	b.n	8005b72 <_dtoa_r+0x8f2>
 8005bae:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005bb2:	463e      	mov	r6, r7
 8005bb4:	e5a9      	b.n	800570a <_dtoa_r+0x48a>
 8005bb6:	bf00      	nop
 8005bb8:	40240000 	.word	0x40240000
 8005bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bbe:	f8cd 9008 	str.w	r9, [sp, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 80fa 	beq.w	8005dbc <_dtoa_r+0xb3c>
 8005bc8:	2d00      	cmp	r5, #0
 8005bca:	dd05      	ble.n	8005bd8 <_dtoa_r+0x958>
 8005bcc:	4631      	mov	r1, r6
 8005bce:	462a      	mov	r2, r5
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f000 fae9 	bl	80061a8 <__lshift>
 8005bd6:	4606      	mov	r6, r0
 8005bd8:	9b07      	ldr	r3, [sp, #28]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d04c      	beq.n	8005c78 <_dtoa_r+0x9f8>
 8005bde:	6871      	ldr	r1, [r6, #4]
 8005be0:	4620      	mov	r0, r4
 8005be2:	f000 f920 	bl	8005e26 <_Balloc>
 8005be6:	6932      	ldr	r2, [r6, #16]
 8005be8:	3202      	adds	r2, #2
 8005bea:	4605      	mov	r5, r0
 8005bec:	0092      	lsls	r2, r2, #2
 8005bee:	f106 010c 	add.w	r1, r6, #12
 8005bf2:	300c      	adds	r0, #12
 8005bf4:	f000 f90a 	bl	8005e0c <memcpy>
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	4629      	mov	r1, r5
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f000 fad3 	bl	80061a8 <__lshift>
 8005c02:	9b00      	ldr	r3, [sp, #0]
 8005c04:	f8cd b014 	str.w	fp, [sp, #20]
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	46b1      	mov	r9, r6
 8005c0e:	9307      	str	r3, [sp, #28]
 8005c10:	4606      	mov	r6, r0
 8005c12:	4639      	mov	r1, r7
 8005c14:	9804      	ldr	r0, [sp, #16]
 8005c16:	f7ff faa7 	bl	8005168 <quorem>
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005c22:	9804      	ldr	r0, [sp, #16]
 8005c24:	f000 fb14 	bl	8006250 <__mcmp>
 8005c28:	4632      	mov	r2, r6
 8005c2a:	9000      	str	r0, [sp, #0]
 8005c2c:	4639      	mov	r1, r7
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f000 fb28 	bl	8006284 <__mdiff>
 8005c34:	68c3      	ldr	r3, [r0, #12]
 8005c36:	4602      	mov	r2, r0
 8005c38:	bb03      	cbnz	r3, 8005c7c <_dtoa_r+0x9fc>
 8005c3a:	4601      	mov	r1, r0
 8005c3c:	9008      	str	r0, [sp, #32]
 8005c3e:	9804      	ldr	r0, [sp, #16]
 8005c40:	f000 fb06 	bl	8006250 <__mcmp>
 8005c44:	9a08      	ldr	r2, [sp, #32]
 8005c46:	4603      	mov	r3, r0
 8005c48:	4611      	mov	r1, r2
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	9308      	str	r3, [sp, #32]
 8005c4e:	f000 f91e 	bl	8005e8e <_Bfree>
 8005c52:	9b08      	ldr	r3, [sp, #32]
 8005c54:	b9a3      	cbnz	r3, 8005c80 <_dtoa_r+0xa00>
 8005c56:	9a06      	ldr	r2, [sp, #24]
 8005c58:	b992      	cbnz	r2, 8005c80 <_dtoa_r+0xa00>
 8005c5a:	9a07      	ldr	r2, [sp, #28]
 8005c5c:	b982      	cbnz	r2, 8005c80 <_dtoa_r+0xa00>
 8005c5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c62:	d029      	beq.n	8005cb8 <_dtoa_r+0xa38>
 8005c64:	9b00      	ldr	r3, [sp, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	dd01      	ble.n	8005c6e <_dtoa_r+0x9ee>
 8005c6a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005c6e:	9b05      	ldr	r3, [sp, #20]
 8005c70:	1c5d      	adds	r5, r3, #1
 8005c72:	f883 8000 	strb.w	r8, [r3]
 8005c76:	e782      	b.n	8005b7e <_dtoa_r+0x8fe>
 8005c78:	4630      	mov	r0, r6
 8005c7a:	e7c2      	b.n	8005c02 <_dtoa_r+0x982>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e7e3      	b.n	8005c48 <_dtoa_r+0x9c8>
 8005c80:	9a00      	ldr	r2, [sp, #0]
 8005c82:	2a00      	cmp	r2, #0
 8005c84:	db04      	blt.n	8005c90 <_dtoa_r+0xa10>
 8005c86:	d125      	bne.n	8005cd4 <_dtoa_r+0xa54>
 8005c88:	9a06      	ldr	r2, [sp, #24]
 8005c8a:	bb1a      	cbnz	r2, 8005cd4 <_dtoa_r+0xa54>
 8005c8c:	9a07      	ldr	r2, [sp, #28]
 8005c8e:	bb0a      	cbnz	r2, 8005cd4 <_dtoa_r+0xa54>
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	ddec      	ble.n	8005c6e <_dtoa_r+0x9ee>
 8005c94:	2201      	movs	r2, #1
 8005c96:	9904      	ldr	r1, [sp, #16]
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f000 fa85 	bl	80061a8 <__lshift>
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	9004      	str	r0, [sp, #16]
 8005ca2:	f000 fad5 	bl	8006250 <__mcmp>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	dc03      	bgt.n	8005cb2 <_dtoa_r+0xa32>
 8005caa:	d1e0      	bne.n	8005c6e <_dtoa_r+0x9ee>
 8005cac:	f018 0f01 	tst.w	r8, #1
 8005cb0:	d0dd      	beq.n	8005c6e <_dtoa_r+0x9ee>
 8005cb2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005cb6:	d1d8      	bne.n	8005c6a <_dtoa_r+0x9ea>
 8005cb8:	9b05      	ldr	r3, [sp, #20]
 8005cba:	9a05      	ldr	r2, [sp, #20]
 8005cbc:	1c5d      	adds	r5, r3, #1
 8005cbe:	2339      	movs	r3, #57	; 0x39
 8005cc0:	7013      	strb	r3, [r2, #0]
 8005cc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005cc6:	2b39      	cmp	r3, #57	; 0x39
 8005cc8:	f105 32ff 	add.w	r2, r5, #4294967295
 8005ccc:	d04f      	beq.n	8005d6e <_dtoa_r+0xaee>
 8005cce:	3301      	adds	r3, #1
 8005cd0:	7013      	strb	r3, [r2, #0]
 8005cd2:	e754      	b.n	8005b7e <_dtoa_r+0x8fe>
 8005cd4:	9a05      	ldr	r2, [sp, #20]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f102 0501 	add.w	r5, r2, #1
 8005cdc:	dd06      	ble.n	8005cec <_dtoa_r+0xa6c>
 8005cde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005ce2:	d0e9      	beq.n	8005cb8 <_dtoa_r+0xa38>
 8005ce4:	f108 0801 	add.w	r8, r8, #1
 8005ce8:	9b05      	ldr	r3, [sp, #20]
 8005cea:	e7c2      	b.n	8005c72 <_dtoa_r+0x9f2>
 8005cec:	9a02      	ldr	r2, [sp, #8]
 8005cee:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005cf2:	eba5 030b 	sub.w	r3, r5, fp
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d021      	beq.n	8005d3e <_dtoa_r+0xabe>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	220a      	movs	r2, #10
 8005cfe:	9904      	ldr	r1, [sp, #16]
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 f8db 	bl	8005ebc <__multadd>
 8005d06:	45b1      	cmp	r9, r6
 8005d08:	9004      	str	r0, [sp, #16]
 8005d0a:	f04f 0300 	mov.w	r3, #0
 8005d0e:	f04f 020a 	mov.w	r2, #10
 8005d12:	4649      	mov	r1, r9
 8005d14:	4620      	mov	r0, r4
 8005d16:	d105      	bne.n	8005d24 <_dtoa_r+0xaa4>
 8005d18:	f000 f8d0 	bl	8005ebc <__multadd>
 8005d1c:	4681      	mov	r9, r0
 8005d1e:	4606      	mov	r6, r0
 8005d20:	9505      	str	r5, [sp, #20]
 8005d22:	e776      	b.n	8005c12 <_dtoa_r+0x992>
 8005d24:	f000 f8ca 	bl	8005ebc <__multadd>
 8005d28:	4631      	mov	r1, r6
 8005d2a:	4681      	mov	r9, r0
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	220a      	movs	r2, #10
 8005d30:	4620      	mov	r0, r4
 8005d32:	f000 f8c3 	bl	8005ebc <__multadd>
 8005d36:	4606      	mov	r6, r0
 8005d38:	e7f2      	b.n	8005d20 <_dtoa_r+0xaa0>
 8005d3a:	f04f 0900 	mov.w	r9, #0
 8005d3e:	2201      	movs	r2, #1
 8005d40:	9904      	ldr	r1, [sp, #16]
 8005d42:	4620      	mov	r0, r4
 8005d44:	f000 fa30 	bl	80061a8 <__lshift>
 8005d48:	4639      	mov	r1, r7
 8005d4a:	9004      	str	r0, [sp, #16]
 8005d4c:	f000 fa80 	bl	8006250 <__mcmp>
 8005d50:	2800      	cmp	r0, #0
 8005d52:	dcb6      	bgt.n	8005cc2 <_dtoa_r+0xa42>
 8005d54:	d102      	bne.n	8005d5c <_dtoa_r+0xadc>
 8005d56:	f018 0f01 	tst.w	r8, #1
 8005d5a:	d1b2      	bne.n	8005cc2 <_dtoa_r+0xa42>
 8005d5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d60:	2b30      	cmp	r3, #48	; 0x30
 8005d62:	f105 32ff 	add.w	r2, r5, #4294967295
 8005d66:	f47f af0a 	bne.w	8005b7e <_dtoa_r+0x8fe>
 8005d6a:	4615      	mov	r5, r2
 8005d6c:	e7f6      	b.n	8005d5c <_dtoa_r+0xadc>
 8005d6e:	4593      	cmp	fp, r2
 8005d70:	d105      	bne.n	8005d7e <_dtoa_r+0xafe>
 8005d72:	2331      	movs	r3, #49	; 0x31
 8005d74:	f10a 0a01 	add.w	sl, sl, #1
 8005d78:	f88b 3000 	strb.w	r3, [fp]
 8005d7c:	e6ff      	b.n	8005b7e <_dtoa_r+0x8fe>
 8005d7e:	4615      	mov	r5, r2
 8005d80:	e79f      	b.n	8005cc2 <_dtoa_r+0xa42>
 8005d82:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005de8 <_dtoa_r+0xb68>
 8005d86:	e007      	b.n	8005d98 <_dtoa_r+0xb18>
 8005d88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d8a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005dec <_dtoa_r+0xb6c>
 8005d8e:	b11b      	cbz	r3, 8005d98 <_dtoa_r+0xb18>
 8005d90:	f10b 0308 	add.w	r3, fp, #8
 8005d94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	4658      	mov	r0, fp
 8005d9a:	b017      	add	sp, #92	; 0x5c
 8005d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da0:	9b06      	ldr	r3, [sp, #24]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	f77f ae35 	ble.w	8005a12 <_dtoa_r+0x792>
 8005da8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005daa:	9307      	str	r3, [sp, #28]
 8005dac:	e649      	b.n	8005a42 <_dtoa_r+0x7c2>
 8005dae:	9b02      	ldr	r3, [sp, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	dc03      	bgt.n	8005dbc <_dtoa_r+0xb3c>
 8005db4:	9b06      	ldr	r3, [sp, #24]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	f73f aecc 	bgt.w	8005b54 <_dtoa_r+0x8d4>
 8005dbc:	465d      	mov	r5, fp
 8005dbe:	4639      	mov	r1, r7
 8005dc0:	9804      	ldr	r0, [sp, #16]
 8005dc2:	f7ff f9d1 	bl	8005168 <quorem>
 8005dc6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005dca:	f805 8b01 	strb.w	r8, [r5], #1
 8005dce:	9a02      	ldr	r2, [sp, #8]
 8005dd0:	eba5 030b 	sub.w	r3, r5, fp
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	ddb0      	ble.n	8005d3a <_dtoa_r+0xaba>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	220a      	movs	r2, #10
 8005ddc:	9904      	ldr	r1, [sp, #16]
 8005dde:	4620      	mov	r0, r4
 8005de0:	f000 f86c 	bl	8005ebc <__multadd>
 8005de4:	9004      	str	r0, [sp, #16]
 8005de6:	e7ea      	b.n	8005dbe <_dtoa_r+0xb3e>
 8005de8:	08007d80 	.word	0x08007d80
 8005dec:	08007da4 	.word	0x08007da4

08005df0 <_localeconv_r>:
 8005df0:	4b04      	ldr	r3, [pc, #16]	; (8005e04 <_localeconv_r+0x14>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6a18      	ldr	r0, [r3, #32]
 8005df6:	4b04      	ldr	r3, [pc, #16]	; (8005e08 <_localeconv_r+0x18>)
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	bf08      	it	eq
 8005dfc:	4618      	moveq	r0, r3
 8005dfe:	30f0      	adds	r0, #240	; 0xf0
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	2000000c 	.word	0x2000000c
 8005e08:	20000070 	.word	0x20000070

08005e0c <memcpy>:
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	1e43      	subs	r3, r0, #1
 8005e10:	440a      	add	r2, r1
 8005e12:	4291      	cmp	r1, r2
 8005e14:	d100      	bne.n	8005e18 <memcpy+0xc>
 8005e16:	bd10      	pop	{r4, pc}
 8005e18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e20:	e7f7      	b.n	8005e12 <memcpy+0x6>

08005e22 <__malloc_lock>:
 8005e22:	4770      	bx	lr

08005e24 <__malloc_unlock>:
 8005e24:	4770      	bx	lr

08005e26 <_Balloc>:
 8005e26:	b570      	push	{r4, r5, r6, lr}
 8005e28:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	460e      	mov	r6, r1
 8005e2e:	b93d      	cbnz	r5, 8005e40 <_Balloc+0x1a>
 8005e30:	2010      	movs	r0, #16
 8005e32:	f7fe fc21 	bl	8004678 <malloc>
 8005e36:	6260      	str	r0, [r4, #36]	; 0x24
 8005e38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e3c:	6005      	str	r5, [r0, #0]
 8005e3e:	60c5      	str	r5, [r0, #12]
 8005e40:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005e42:	68eb      	ldr	r3, [r5, #12]
 8005e44:	b183      	cbz	r3, 8005e68 <_Balloc+0x42>
 8005e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005e4e:	b9b8      	cbnz	r0, 8005e80 <_Balloc+0x5a>
 8005e50:	2101      	movs	r1, #1
 8005e52:	fa01 f506 	lsl.w	r5, r1, r6
 8005e56:	1d6a      	adds	r2, r5, #5
 8005e58:	0092      	lsls	r2, r2, #2
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f000 fabe 	bl	80063dc <_calloc_r>
 8005e60:	b160      	cbz	r0, 8005e7c <_Balloc+0x56>
 8005e62:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005e66:	e00e      	b.n	8005e86 <_Balloc+0x60>
 8005e68:	2221      	movs	r2, #33	; 0x21
 8005e6a:	2104      	movs	r1, #4
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f000 fab5 	bl	80063dc <_calloc_r>
 8005e72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e74:	60e8      	str	r0, [r5, #12]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e4      	bne.n	8005e46 <_Balloc+0x20>
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	bd70      	pop	{r4, r5, r6, pc}
 8005e80:	6802      	ldr	r2, [r0, #0]
 8005e82:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005e86:	2300      	movs	r3, #0
 8005e88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e8c:	e7f7      	b.n	8005e7e <_Balloc+0x58>

08005e8e <_Bfree>:
 8005e8e:	b570      	push	{r4, r5, r6, lr}
 8005e90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005e92:	4606      	mov	r6, r0
 8005e94:	460d      	mov	r5, r1
 8005e96:	b93c      	cbnz	r4, 8005ea8 <_Bfree+0x1a>
 8005e98:	2010      	movs	r0, #16
 8005e9a:	f7fe fbed 	bl	8004678 <malloc>
 8005e9e:	6270      	str	r0, [r6, #36]	; 0x24
 8005ea0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ea4:	6004      	str	r4, [r0, #0]
 8005ea6:	60c4      	str	r4, [r0, #12]
 8005ea8:	b13d      	cbz	r5, 8005eba <_Bfree+0x2c>
 8005eaa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005eac:	686a      	ldr	r2, [r5, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005eb4:	6029      	str	r1, [r5, #0]
 8005eb6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005eba:	bd70      	pop	{r4, r5, r6, pc}

08005ebc <__multadd>:
 8005ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec0:	690d      	ldr	r5, [r1, #16]
 8005ec2:	461f      	mov	r7, r3
 8005ec4:	4606      	mov	r6, r0
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	f101 0c14 	add.w	ip, r1, #20
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f8dc 0000 	ldr.w	r0, [ip]
 8005ed2:	b281      	uxth	r1, r0
 8005ed4:	fb02 7101 	mla	r1, r2, r1, r7
 8005ed8:	0c0f      	lsrs	r7, r1, #16
 8005eda:	0c00      	lsrs	r0, r0, #16
 8005edc:	fb02 7000 	mla	r0, r2, r0, r7
 8005ee0:	b289      	uxth	r1, r1
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005ee8:	429d      	cmp	r5, r3
 8005eea:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005eee:	f84c 1b04 	str.w	r1, [ip], #4
 8005ef2:	dcec      	bgt.n	8005ece <__multadd+0x12>
 8005ef4:	b1d7      	cbz	r7, 8005f2c <__multadd+0x70>
 8005ef6:	68a3      	ldr	r3, [r4, #8]
 8005ef8:	42ab      	cmp	r3, r5
 8005efa:	dc12      	bgt.n	8005f22 <__multadd+0x66>
 8005efc:	6861      	ldr	r1, [r4, #4]
 8005efe:	4630      	mov	r0, r6
 8005f00:	3101      	adds	r1, #1
 8005f02:	f7ff ff90 	bl	8005e26 <_Balloc>
 8005f06:	6922      	ldr	r2, [r4, #16]
 8005f08:	3202      	adds	r2, #2
 8005f0a:	f104 010c 	add.w	r1, r4, #12
 8005f0e:	4680      	mov	r8, r0
 8005f10:	0092      	lsls	r2, r2, #2
 8005f12:	300c      	adds	r0, #12
 8005f14:	f7ff ff7a 	bl	8005e0c <memcpy>
 8005f18:	4621      	mov	r1, r4
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	f7ff ffb7 	bl	8005e8e <_Bfree>
 8005f20:	4644      	mov	r4, r8
 8005f22:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f26:	3501      	adds	r5, #1
 8005f28:	615f      	str	r7, [r3, #20]
 8005f2a:	6125      	str	r5, [r4, #16]
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005f32 <__hi0bits>:
 8005f32:	0c02      	lsrs	r2, r0, #16
 8005f34:	0412      	lsls	r2, r2, #16
 8005f36:	4603      	mov	r3, r0
 8005f38:	b9b2      	cbnz	r2, 8005f68 <__hi0bits+0x36>
 8005f3a:	0403      	lsls	r3, r0, #16
 8005f3c:	2010      	movs	r0, #16
 8005f3e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005f42:	bf04      	itt	eq
 8005f44:	021b      	lsleq	r3, r3, #8
 8005f46:	3008      	addeq	r0, #8
 8005f48:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005f4c:	bf04      	itt	eq
 8005f4e:	011b      	lsleq	r3, r3, #4
 8005f50:	3004      	addeq	r0, #4
 8005f52:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005f56:	bf04      	itt	eq
 8005f58:	009b      	lsleq	r3, r3, #2
 8005f5a:	3002      	addeq	r0, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	db06      	blt.n	8005f6e <__hi0bits+0x3c>
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	d503      	bpl.n	8005f6c <__hi0bits+0x3a>
 8005f64:	3001      	adds	r0, #1
 8005f66:	4770      	bx	lr
 8005f68:	2000      	movs	r0, #0
 8005f6a:	e7e8      	b.n	8005f3e <__hi0bits+0xc>
 8005f6c:	2020      	movs	r0, #32
 8005f6e:	4770      	bx	lr

08005f70 <__lo0bits>:
 8005f70:	6803      	ldr	r3, [r0, #0]
 8005f72:	f013 0207 	ands.w	r2, r3, #7
 8005f76:	4601      	mov	r1, r0
 8005f78:	d00b      	beq.n	8005f92 <__lo0bits+0x22>
 8005f7a:	07da      	lsls	r2, r3, #31
 8005f7c:	d423      	bmi.n	8005fc6 <__lo0bits+0x56>
 8005f7e:	0798      	lsls	r0, r3, #30
 8005f80:	bf49      	itett	mi
 8005f82:	085b      	lsrmi	r3, r3, #1
 8005f84:	089b      	lsrpl	r3, r3, #2
 8005f86:	2001      	movmi	r0, #1
 8005f88:	600b      	strmi	r3, [r1, #0]
 8005f8a:	bf5c      	itt	pl
 8005f8c:	600b      	strpl	r3, [r1, #0]
 8005f8e:	2002      	movpl	r0, #2
 8005f90:	4770      	bx	lr
 8005f92:	b298      	uxth	r0, r3
 8005f94:	b9a8      	cbnz	r0, 8005fc2 <__lo0bits+0x52>
 8005f96:	0c1b      	lsrs	r3, r3, #16
 8005f98:	2010      	movs	r0, #16
 8005f9a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f9e:	bf04      	itt	eq
 8005fa0:	0a1b      	lsreq	r3, r3, #8
 8005fa2:	3008      	addeq	r0, #8
 8005fa4:	071a      	lsls	r2, r3, #28
 8005fa6:	bf04      	itt	eq
 8005fa8:	091b      	lsreq	r3, r3, #4
 8005faa:	3004      	addeq	r0, #4
 8005fac:	079a      	lsls	r2, r3, #30
 8005fae:	bf04      	itt	eq
 8005fb0:	089b      	lsreq	r3, r3, #2
 8005fb2:	3002      	addeq	r0, #2
 8005fb4:	07da      	lsls	r2, r3, #31
 8005fb6:	d402      	bmi.n	8005fbe <__lo0bits+0x4e>
 8005fb8:	085b      	lsrs	r3, r3, #1
 8005fba:	d006      	beq.n	8005fca <__lo0bits+0x5a>
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	600b      	str	r3, [r1, #0]
 8005fc0:	4770      	bx	lr
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	e7e9      	b.n	8005f9a <__lo0bits+0x2a>
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	4770      	bx	lr
 8005fca:	2020      	movs	r0, #32
 8005fcc:	4770      	bx	lr

08005fce <__i2b>:
 8005fce:	b510      	push	{r4, lr}
 8005fd0:	460c      	mov	r4, r1
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	f7ff ff27 	bl	8005e26 <_Balloc>
 8005fd8:	2201      	movs	r2, #1
 8005fda:	6144      	str	r4, [r0, #20]
 8005fdc:	6102      	str	r2, [r0, #16]
 8005fde:	bd10      	pop	{r4, pc}

08005fe0 <__multiply>:
 8005fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	4614      	mov	r4, r2
 8005fe6:	690a      	ldr	r2, [r1, #16]
 8005fe8:	6923      	ldr	r3, [r4, #16]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	bfb8      	it	lt
 8005fee:	460b      	movlt	r3, r1
 8005ff0:	4688      	mov	r8, r1
 8005ff2:	bfbc      	itt	lt
 8005ff4:	46a0      	movlt	r8, r4
 8005ff6:	461c      	movlt	r4, r3
 8005ff8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005ffc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006000:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006004:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006008:	eb07 0609 	add.w	r6, r7, r9
 800600c:	42b3      	cmp	r3, r6
 800600e:	bfb8      	it	lt
 8006010:	3101      	addlt	r1, #1
 8006012:	f7ff ff08 	bl	8005e26 <_Balloc>
 8006016:	f100 0514 	add.w	r5, r0, #20
 800601a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800601e:	462b      	mov	r3, r5
 8006020:	2200      	movs	r2, #0
 8006022:	4573      	cmp	r3, lr
 8006024:	d316      	bcc.n	8006054 <__multiply+0x74>
 8006026:	f104 0214 	add.w	r2, r4, #20
 800602a:	f108 0114 	add.w	r1, r8, #20
 800602e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006032:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	9b00      	ldr	r3, [sp, #0]
 800603a:	9201      	str	r2, [sp, #4]
 800603c:	4293      	cmp	r3, r2
 800603e:	d80c      	bhi.n	800605a <__multiply+0x7a>
 8006040:	2e00      	cmp	r6, #0
 8006042:	dd03      	ble.n	800604c <__multiply+0x6c>
 8006044:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006048:	2b00      	cmp	r3, #0
 800604a:	d05d      	beq.n	8006108 <__multiply+0x128>
 800604c:	6106      	str	r6, [r0, #16]
 800604e:	b003      	add	sp, #12
 8006050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006054:	f843 2b04 	str.w	r2, [r3], #4
 8006058:	e7e3      	b.n	8006022 <__multiply+0x42>
 800605a:	f8b2 b000 	ldrh.w	fp, [r2]
 800605e:	f1bb 0f00 	cmp.w	fp, #0
 8006062:	d023      	beq.n	80060ac <__multiply+0xcc>
 8006064:	4689      	mov	r9, r1
 8006066:	46ac      	mov	ip, r5
 8006068:	f04f 0800 	mov.w	r8, #0
 800606c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006070:	f8dc a000 	ldr.w	sl, [ip]
 8006074:	b2a3      	uxth	r3, r4
 8006076:	fa1f fa8a 	uxth.w	sl, sl
 800607a:	fb0b a303 	mla	r3, fp, r3, sl
 800607e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006082:	f8dc 4000 	ldr.w	r4, [ip]
 8006086:	4443      	add	r3, r8
 8006088:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800608c:	fb0b 840a 	mla	r4, fp, sl, r8
 8006090:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006094:	46e2      	mov	sl, ip
 8006096:	b29b      	uxth	r3, r3
 8006098:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800609c:	454f      	cmp	r7, r9
 800609e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80060a2:	f84a 3b04 	str.w	r3, [sl], #4
 80060a6:	d82b      	bhi.n	8006100 <__multiply+0x120>
 80060a8:	f8cc 8004 	str.w	r8, [ip, #4]
 80060ac:	9b01      	ldr	r3, [sp, #4]
 80060ae:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80060b2:	3204      	adds	r2, #4
 80060b4:	f1ba 0f00 	cmp.w	sl, #0
 80060b8:	d020      	beq.n	80060fc <__multiply+0x11c>
 80060ba:	682b      	ldr	r3, [r5, #0]
 80060bc:	4689      	mov	r9, r1
 80060be:	46a8      	mov	r8, r5
 80060c0:	f04f 0b00 	mov.w	fp, #0
 80060c4:	f8b9 c000 	ldrh.w	ip, [r9]
 80060c8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80060cc:	fb0a 440c 	mla	r4, sl, ip, r4
 80060d0:	445c      	add	r4, fp
 80060d2:	46c4      	mov	ip, r8
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80060da:	f84c 3b04 	str.w	r3, [ip], #4
 80060de:	f859 3b04 	ldr.w	r3, [r9], #4
 80060e2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80060e6:	0c1b      	lsrs	r3, r3, #16
 80060e8:	fb0a b303 	mla	r3, sl, r3, fp
 80060ec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80060f0:	454f      	cmp	r7, r9
 80060f2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80060f6:	d805      	bhi.n	8006104 <__multiply+0x124>
 80060f8:	f8c8 3004 	str.w	r3, [r8, #4]
 80060fc:	3504      	adds	r5, #4
 80060fe:	e79b      	b.n	8006038 <__multiply+0x58>
 8006100:	46d4      	mov	ip, sl
 8006102:	e7b3      	b.n	800606c <__multiply+0x8c>
 8006104:	46e0      	mov	r8, ip
 8006106:	e7dd      	b.n	80060c4 <__multiply+0xe4>
 8006108:	3e01      	subs	r6, #1
 800610a:	e799      	b.n	8006040 <__multiply+0x60>

0800610c <__pow5mult>:
 800610c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006110:	4615      	mov	r5, r2
 8006112:	f012 0203 	ands.w	r2, r2, #3
 8006116:	4606      	mov	r6, r0
 8006118:	460f      	mov	r7, r1
 800611a:	d007      	beq.n	800612c <__pow5mult+0x20>
 800611c:	3a01      	subs	r2, #1
 800611e:	4c21      	ldr	r4, [pc, #132]	; (80061a4 <__pow5mult+0x98>)
 8006120:	2300      	movs	r3, #0
 8006122:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006126:	f7ff fec9 	bl	8005ebc <__multadd>
 800612a:	4607      	mov	r7, r0
 800612c:	10ad      	asrs	r5, r5, #2
 800612e:	d035      	beq.n	800619c <__pow5mult+0x90>
 8006130:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006132:	b93c      	cbnz	r4, 8006144 <__pow5mult+0x38>
 8006134:	2010      	movs	r0, #16
 8006136:	f7fe fa9f 	bl	8004678 <malloc>
 800613a:	6270      	str	r0, [r6, #36]	; 0x24
 800613c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006140:	6004      	str	r4, [r0, #0]
 8006142:	60c4      	str	r4, [r0, #12]
 8006144:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006148:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800614c:	b94c      	cbnz	r4, 8006162 <__pow5mult+0x56>
 800614e:	f240 2171 	movw	r1, #625	; 0x271
 8006152:	4630      	mov	r0, r6
 8006154:	f7ff ff3b 	bl	8005fce <__i2b>
 8006158:	2300      	movs	r3, #0
 800615a:	f8c8 0008 	str.w	r0, [r8, #8]
 800615e:	4604      	mov	r4, r0
 8006160:	6003      	str	r3, [r0, #0]
 8006162:	f04f 0800 	mov.w	r8, #0
 8006166:	07eb      	lsls	r3, r5, #31
 8006168:	d50a      	bpl.n	8006180 <__pow5mult+0x74>
 800616a:	4639      	mov	r1, r7
 800616c:	4622      	mov	r2, r4
 800616e:	4630      	mov	r0, r6
 8006170:	f7ff ff36 	bl	8005fe0 <__multiply>
 8006174:	4639      	mov	r1, r7
 8006176:	4681      	mov	r9, r0
 8006178:	4630      	mov	r0, r6
 800617a:	f7ff fe88 	bl	8005e8e <_Bfree>
 800617e:	464f      	mov	r7, r9
 8006180:	106d      	asrs	r5, r5, #1
 8006182:	d00b      	beq.n	800619c <__pow5mult+0x90>
 8006184:	6820      	ldr	r0, [r4, #0]
 8006186:	b938      	cbnz	r0, 8006198 <__pow5mult+0x8c>
 8006188:	4622      	mov	r2, r4
 800618a:	4621      	mov	r1, r4
 800618c:	4630      	mov	r0, r6
 800618e:	f7ff ff27 	bl	8005fe0 <__multiply>
 8006192:	6020      	str	r0, [r4, #0]
 8006194:	f8c0 8000 	str.w	r8, [r0]
 8006198:	4604      	mov	r4, r0
 800619a:	e7e4      	b.n	8006166 <__pow5mult+0x5a>
 800619c:	4638      	mov	r0, r7
 800619e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061a2:	bf00      	nop
 80061a4:	08007ea8 	.word	0x08007ea8

080061a8 <__lshift>:
 80061a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ac:	460c      	mov	r4, r1
 80061ae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061b2:	6923      	ldr	r3, [r4, #16]
 80061b4:	6849      	ldr	r1, [r1, #4]
 80061b6:	eb0a 0903 	add.w	r9, sl, r3
 80061ba:	68a3      	ldr	r3, [r4, #8]
 80061bc:	4607      	mov	r7, r0
 80061be:	4616      	mov	r6, r2
 80061c0:	f109 0501 	add.w	r5, r9, #1
 80061c4:	42ab      	cmp	r3, r5
 80061c6:	db32      	blt.n	800622e <__lshift+0x86>
 80061c8:	4638      	mov	r0, r7
 80061ca:	f7ff fe2c 	bl	8005e26 <_Balloc>
 80061ce:	2300      	movs	r3, #0
 80061d0:	4680      	mov	r8, r0
 80061d2:	f100 0114 	add.w	r1, r0, #20
 80061d6:	461a      	mov	r2, r3
 80061d8:	4553      	cmp	r3, sl
 80061da:	db2b      	blt.n	8006234 <__lshift+0x8c>
 80061dc:	6920      	ldr	r0, [r4, #16]
 80061de:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061e2:	f104 0314 	add.w	r3, r4, #20
 80061e6:	f016 021f 	ands.w	r2, r6, #31
 80061ea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061ee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80061f2:	d025      	beq.n	8006240 <__lshift+0x98>
 80061f4:	f1c2 0e20 	rsb	lr, r2, #32
 80061f8:	2000      	movs	r0, #0
 80061fa:	681e      	ldr	r6, [r3, #0]
 80061fc:	468a      	mov	sl, r1
 80061fe:	4096      	lsls	r6, r2
 8006200:	4330      	orrs	r0, r6
 8006202:	f84a 0b04 	str.w	r0, [sl], #4
 8006206:	f853 0b04 	ldr.w	r0, [r3], #4
 800620a:	459c      	cmp	ip, r3
 800620c:	fa20 f00e 	lsr.w	r0, r0, lr
 8006210:	d814      	bhi.n	800623c <__lshift+0x94>
 8006212:	6048      	str	r0, [r1, #4]
 8006214:	b108      	cbz	r0, 800621a <__lshift+0x72>
 8006216:	f109 0502 	add.w	r5, r9, #2
 800621a:	3d01      	subs	r5, #1
 800621c:	4638      	mov	r0, r7
 800621e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006222:	4621      	mov	r1, r4
 8006224:	f7ff fe33 	bl	8005e8e <_Bfree>
 8006228:	4640      	mov	r0, r8
 800622a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800622e:	3101      	adds	r1, #1
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	e7c7      	b.n	80061c4 <__lshift+0x1c>
 8006234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006238:	3301      	adds	r3, #1
 800623a:	e7cd      	b.n	80061d8 <__lshift+0x30>
 800623c:	4651      	mov	r1, sl
 800623e:	e7dc      	b.n	80061fa <__lshift+0x52>
 8006240:	3904      	subs	r1, #4
 8006242:	f853 2b04 	ldr.w	r2, [r3], #4
 8006246:	f841 2f04 	str.w	r2, [r1, #4]!
 800624a:	459c      	cmp	ip, r3
 800624c:	d8f9      	bhi.n	8006242 <__lshift+0x9a>
 800624e:	e7e4      	b.n	800621a <__lshift+0x72>

08006250 <__mcmp>:
 8006250:	6903      	ldr	r3, [r0, #16]
 8006252:	690a      	ldr	r2, [r1, #16]
 8006254:	1a9b      	subs	r3, r3, r2
 8006256:	b530      	push	{r4, r5, lr}
 8006258:	d10c      	bne.n	8006274 <__mcmp+0x24>
 800625a:	0092      	lsls	r2, r2, #2
 800625c:	3014      	adds	r0, #20
 800625e:	3114      	adds	r1, #20
 8006260:	1884      	adds	r4, r0, r2
 8006262:	4411      	add	r1, r2
 8006264:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006268:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800626c:	4295      	cmp	r5, r2
 800626e:	d003      	beq.n	8006278 <__mcmp+0x28>
 8006270:	d305      	bcc.n	800627e <__mcmp+0x2e>
 8006272:	2301      	movs	r3, #1
 8006274:	4618      	mov	r0, r3
 8006276:	bd30      	pop	{r4, r5, pc}
 8006278:	42a0      	cmp	r0, r4
 800627a:	d3f3      	bcc.n	8006264 <__mcmp+0x14>
 800627c:	e7fa      	b.n	8006274 <__mcmp+0x24>
 800627e:	f04f 33ff 	mov.w	r3, #4294967295
 8006282:	e7f7      	b.n	8006274 <__mcmp+0x24>

08006284 <__mdiff>:
 8006284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006288:	460d      	mov	r5, r1
 800628a:	4607      	mov	r7, r0
 800628c:	4611      	mov	r1, r2
 800628e:	4628      	mov	r0, r5
 8006290:	4614      	mov	r4, r2
 8006292:	f7ff ffdd 	bl	8006250 <__mcmp>
 8006296:	1e06      	subs	r6, r0, #0
 8006298:	d108      	bne.n	80062ac <__mdiff+0x28>
 800629a:	4631      	mov	r1, r6
 800629c:	4638      	mov	r0, r7
 800629e:	f7ff fdc2 	bl	8005e26 <_Balloc>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80062a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ac:	bfa4      	itt	ge
 80062ae:	4623      	movge	r3, r4
 80062b0:	462c      	movge	r4, r5
 80062b2:	4638      	mov	r0, r7
 80062b4:	6861      	ldr	r1, [r4, #4]
 80062b6:	bfa6      	itte	ge
 80062b8:	461d      	movge	r5, r3
 80062ba:	2600      	movge	r6, #0
 80062bc:	2601      	movlt	r6, #1
 80062be:	f7ff fdb2 	bl	8005e26 <_Balloc>
 80062c2:	692b      	ldr	r3, [r5, #16]
 80062c4:	60c6      	str	r6, [r0, #12]
 80062c6:	6926      	ldr	r6, [r4, #16]
 80062c8:	f105 0914 	add.w	r9, r5, #20
 80062cc:	f104 0214 	add.w	r2, r4, #20
 80062d0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80062d4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80062d8:	f100 0514 	add.w	r5, r0, #20
 80062dc:	f04f 0e00 	mov.w	lr, #0
 80062e0:	f852 ab04 	ldr.w	sl, [r2], #4
 80062e4:	f859 4b04 	ldr.w	r4, [r9], #4
 80062e8:	fa1e f18a 	uxtah	r1, lr, sl
 80062ec:	b2a3      	uxth	r3, r4
 80062ee:	1ac9      	subs	r1, r1, r3
 80062f0:	0c23      	lsrs	r3, r4, #16
 80062f2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80062f6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80062fa:	b289      	uxth	r1, r1
 80062fc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006300:	45c8      	cmp	r8, r9
 8006302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006306:	4694      	mov	ip, r2
 8006308:	f845 3b04 	str.w	r3, [r5], #4
 800630c:	d8e8      	bhi.n	80062e0 <__mdiff+0x5c>
 800630e:	45bc      	cmp	ip, r7
 8006310:	d304      	bcc.n	800631c <__mdiff+0x98>
 8006312:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006316:	b183      	cbz	r3, 800633a <__mdiff+0xb6>
 8006318:	6106      	str	r6, [r0, #16]
 800631a:	e7c5      	b.n	80062a8 <__mdiff+0x24>
 800631c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006320:	fa1e f381 	uxtah	r3, lr, r1
 8006324:	141a      	asrs	r2, r3, #16
 8006326:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800632a:	b29b      	uxth	r3, r3
 800632c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006330:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006334:	f845 3b04 	str.w	r3, [r5], #4
 8006338:	e7e9      	b.n	800630e <__mdiff+0x8a>
 800633a:	3e01      	subs	r6, #1
 800633c:	e7e9      	b.n	8006312 <__mdiff+0x8e>

0800633e <__d2b>:
 800633e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006342:	460e      	mov	r6, r1
 8006344:	2101      	movs	r1, #1
 8006346:	ec59 8b10 	vmov	r8, r9, d0
 800634a:	4615      	mov	r5, r2
 800634c:	f7ff fd6b 	bl	8005e26 <_Balloc>
 8006350:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006354:	4607      	mov	r7, r0
 8006356:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800635a:	bb34      	cbnz	r4, 80063aa <__d2b+0x6c>
 800635c:	9301      	str	r3, [sp, #4]
 800635e:	f1b8 0300 	subs.w	r3, r8, #0
 8006362:	d027      	beq.n	80063b4 <__d2b+0x76>
 8006364:	a802      	add	r0, sp, #8
 8006366:	f840 3d08 	str.w	r3, [r0, #-8]!
 800636a:	f7ff fe01 	bl	8005f70 <__lo0bits>
 800636e:	9900      	ldr	r1, [sp, #0]
 8006370:	b1f0      	cbz	r0, 80063b0 <__d2b+0x72>
 8006372:	9a01      	ldr	r2, [sp, #4]
 8006374:	f1c0 0320 	rsb	r3, r0, #32
 8006378:	fa02 f303 	lsl.w	r3, r2, r3
 800637c:	430b      	orrs	r3, r1
 800637e:	40c2      	lsrs	r2, r0
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	9201      	str	r2, [sp, #4]
 8006384:	9b01      	ldr	r3, [sp, #4]
 8006386:	61bb      	str	r3, [r7, #24]
 8006388:	2b00      	cmp	r3, #0
 800638a:	bf14      	ite	ne
 800638c:	2102      	movne	r1, #2
 800638e:	2101      	moveq	r1, #1
 8006390:	6139      	str	r1, [r7, #16]
 8006392:	b1c4      	cbz	r4, 80063c6 <__d2b+0x88>
 8006394:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006398:	4404      	add	r4, r0
 800639a:	6034      	str	r4, [r6, #0]
 800639c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80063a0:	6028      	str	r0, [r5, #0]
 80063a2:	4638      	mov	r0, r7
 80063a4:	b003      	add	sp, #12
 80063a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063ae:	e7d5      	b.n	800635c <__d2b+0x1e>
 80063b0:	6179      	str	r1, [r7, #20]
 80063b2:	e7e7      	b.n	8006384 <__d2b+0x46>
 80063b4:	a801      	add	r0, sp, #4
 80063b6:	f7ff fddb 	bl	8005f70 <__lo0bits>
 80063ba:	9b01      	ldr	r3, [sp, #4]
 80063bc:	617b      	str	r3, [r7, #20]
 80063be:	2101      	movs	r1, #1
 80063c0:	6139      	str	r1, [r7, #16]
 80063c2:	3020      	adds	r0, #32
 80063c4:	e7e5      	b.n	8006392 <__d2b+0x54>
 80063c6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80063ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80063ce:	6030      	str	r0, [r6, #0]
 80063d0:	6918      	ldr	r0, [r3, #16]
 80063d2:	f7ff fdae 	bl	8005f32 <__hi0bits>
 80063d6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80063da:	e7e1      	b.n	80063a0 <__d2b+0x62>

080063dc <_calloc_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	fb02 f401 	mul.w	r4, r2, r1
 80063e2:	4621      	mov	r1, r4
 80063e4:	f7fe f9a6 	bl	8004734 <_malloc_r>
 80063e8:	4605      	mov	r5, r0
 80063ea:	b118      	cbz	r0, 80063f4 <_calloc_r+0x18>
 80063ec:	4622      	mov	r2, r4
 80063ee:	2100      	movs	r1, #0
 80063f0:	f7fe f94a 	bl	8004688 <memset>
 80063f4:	4628      	mov	r0, r5
 80063f6:	bd38      	pop	{r3, r4, r5, pc}

080063f8 <__ssputs_r>:
 80063f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063fc:	688e      	ldr	r6, [r1, #8]
 80063fe:	429e      	cmp	r6, r3
 8006400:	4682      	mov	sl, r0
 8006402:	460c      	mov	r4, r1
 8006404:	4690      	mov	r8, r2
 8006406:	4699      	mov	r9, r3
 8006408:	d837      	bhi.n	800647a <__ssputs_r+0x82>
 800640a:	898a      	ldrh	r2, [r1, #12]
 800640c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006410:	d031      	beq.n	8006476 <__ssputs_r+0x7e>
 8006412:	6825      	ldr	r5, [r4, #0]
 8006414:	6909      	ldr	r1, [r1, #16]
 8006416:	1a6f      	subs	r7, r5, r1
 8006418:	6965      	ldr	r5, [r4, #20]
 800641a:	2302      	movs	r3, #2
 800641c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006420:	fb95 f5f3 	sdiv	r5, r5, r3
 8006424:	f109 0301 	add.w	r3, r9, #1
 8006428:	443b      	add	r3, r7
 800642a:	429d      	cmp	r5, r3
 800642c:	bf38      	it	cc
 800642e:	461d      	movcc	r5, r3
 8006430:	0553      	lsls	r3, r2, #21
 8006432:	d530      	bpl.n	8006496 <__ssputs_r+0x9e>
 8006434:	4629      	mov	r1, r5
 8006436:	f7fe f97d 	bl	8004734 <_malloc_r>
 800643a:	4606      	mov	r6, r0
 800643c:	b950      	cbnz	r0, 8006454 <__ssputs_r+0x5c>
 800643e:	230c      	movs	r3, #12
 8006440:	f8ca 3000 	str.w	r3, [sl]
 8006444:	89a3      	ldrh	r3, [r4, #12]
 8006446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800644a:	81a3      	strh	r3, [r4, #12]
 800644c:	f04f 30ff 	mov.w	r0, #4294967295
 8006450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006454:	463a      	mov	r2, r7
 8006456:	6921      	ldr	r1, [r4, #16]
 8006458:	f7ff fcd8 	bl	8005e0c <memcpy>
 800645c:	89a3      	ldrh	r3, [r4, #12]
 800645e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006466:	81a3      	strh	r3, [r4, #12]
 8006468:	6126      	str	r6, [r4, #16]
 800646a:	6165      	str	r5, [r4, #20]
 800646c:	443e      	add	r6, r7
 800646e:	1bed      	subs	r5, r5, r7
 8006470:	6026      	str	r6, [r4, #0]
 8006472:	60a5      	str	r5, [r4, #8]
 8006474:	464e      	mov	r6, r9
 8006476:	454e      	cmp	r6, r9
 8006478:	d900      	bls.n	800647c <__ssputs_r+0x84>
 800647a:	464e      	mov	r6, r9
 800647c:	4632      	mov	r2, r6
 800647e:	4641      	mov	r1, r8
 8006480:	6820      	ldr	r0, [r4, #0]
 8006482:	f000 f91d 	bl	80066c0 <memmove>
 8006486:	68a3      	ldr	r3, [r4, #8]
 8006488:	1b9b      	subs	r3, r3, r6
 800648a:	60a3      	str	r3, [r4, #8]
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	441e      	add	r6, r3
 8006490:	6026      	str	r6, [r4, #0]
 8006492:	2000      	movs	r0, #0
 8006494:	e7dc      	b.n	8006450 <__ssputs_r+0x58>
 8006496:	462a      	mov	r2, r5
 8006498:	f000 f92b 	bl	80066f2 <_realloc_r>
 800649c:	4606      	mov	r6, r0
 800649e:	2800      	cmp	r0, #0
 80064a0:	d1e2      	bne.n	8006468 <__ssputs_r+0x70>
 80064a2:	6921      	ldr	r1, [r4, #16]
 80064a4:	4650      	mov	r0, sl
 80064a6:	f7fe f8f7 	bl	8004698 <_free_r>
 80064aa:	e7c8      	b.n	800643e <__ssputs_r+0x46>

080064ac <_svfiprintf_r>:
 80064ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b0:	461d      	mov	r5, r3
 80064b2:	898b      	ldrh	r3, [r1, #12]
 80064b4:	061f      	lsls	r7, r3, #24
 80064b6:	b09d      	sub	sp, #116	; 0x74
 80064b8:	4680      	mov	r8, r0
 80064ba:	460c      	mov	r4, r1
 80064bc:	4616      	mov	r6, r2
 80064be:	d50f      	bpl.n	80064e0 <_svfiprintf_r+0x34>
 80064c0:	690b      	ldr	r3, [r1, #16]
 80064c2:	b96b      	cbnz	r3, 80064e0 <_svfiprintf_r+0x34>
 80064c4:	2140      	movs	r1, #64	; 0x40
 80064c6:	f7fe f935 	bl	8004734 <_malloc_r>
 80064ca:	6020      	str	r0, [r4, #0]
 80064cc:	6120      	str	r0, [r4, #16]
 80064ce:	b928      	cbnz	r0, 80064dc <_svfiprintf_r+0x30>
 80064d0:	230c      	movs	r3, #12
 80064d2:	f8c8 3000 	str.w	r3, [r8]
 80064d6:	f04f 30ff 	mov.w	r0, #4294967295
 80064da:	e0c8      	b.n	800666e <_svfiprintf_r+0x1c2>
 80064dc:	2340      	movs	r3, #64	; 0x40
 80064de:	6163      	str	r3, [r4, #20]
 80064e0:	2300      	movs	r3, #0
 80064e2:	9309      	str	r3, [sp, #36]	; 0x24
 80064e4:	2320      	movs	r3, #32
 80064e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064ea:	2330      	movs	r3, #48	; 0x30
 80064ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064f0:	9503      	str	r5, [sp, #12]
 80064f2:	f04f 0b01 	mov.w	fp, #1
 80064f6:	4637      	mov	r7, r6
 80064f8:	463d      	mov	r5, r7
 80064fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80064fe:	b10b      	cbz	r3, 8006504 <_svfiprintf_r+0x58>
 8006500:	2b25      	cmp	r3, #37	; 0x25
 8006502:	d13e      	bne.n	8006582 <_svfiprintf_r+0xd6>
 8006504:	ebb7 0a06 	subs.w	sl, r7, r6
 8006508:	d00b      	beq.n	8006522 <_svfiprintf_r+0x76>
 800650a:	4653      	mov	r3, sl
 800650c:	4632      	mov	r2, r6
 800650e:	4621      	mov	r1, r4
 8006510:	4640      	mov	r0, r8
 8006512:	f7ff ff71 	bl	80063f8 <__ssputs_r>
 8006516:	3001      	adds	r0, #1
 8006518:	f000 80a4 	beq.w	8006664 <_svfiprintf_r+0x1b8>
 800651c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800651e:	4453      	add	r3, sl
 8006520:	9309      	str	r3, [sp, #36]	; 0x24
 8006522:	783b      	ldrb	r3, [r7, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 809d 	beq.w	8006664 <_svfiprintf_r+0x1b8>
 800652a:	2300      	movs	r3, #0
 800652c:	f04f 32ff 	mov.w	r2, #4294967295
 8006530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006534:	9304      	str	r3, [sp, #16]
 8006536:	9307      	str	r3, [sp, #28]
 8006538:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800653c:	931a      	str	r3, [sp, #104]	; 0x68
 800653e:	462f      	mov	r7, r5
 8006540:	2205      	movs	r2, #5
 8006542:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006546:	4850      	ldr	r0, [pc, #320]	; (8006688 <_svfiprintf_r+0x1dc>)
 8006548:	f7f9 fe4a 	bl	80001e0 <memchr>
 800654c:	9b04      	ldr	r3, [sp, #16]
 800654e:	b9d0      	cbnz	r0, 8006586 <_svfiprintf_r+0xda>
 8006550:	06d9      	lsls	r1, r3, #27
 8006552:	bf44      	itt	mi
 8006554:	2220      	movmi	r2, #32
 8006556:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800655a:	071a      	lsls	r2, r3, #28
 800655c:	bf44      	itt	mi
 800655e:	222b      	movmi	r2, #43	; 0x2b
 8006560:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006564:	782a      	ldrb	r2, [r5, #0]
 8006566:	2a2a      	cmp	r2, #42	; 0x2a
 8006568:	d015      	beq.n	8006596 <_svfiprintf_r+0xea>
 800656a:	9a07      	ldr	r2, [sp, #28]
 800656c:	462f      	mov	r7, r5
 800656e:	2000      	movs	r0, #0
 8006570:	250a      	movs	r5, #10
 8006572:	4639      	mov	r1, r7
 8006574:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006578:	3b30      	subs	r3, #48	; 0x30
 800657a:	2b09      	cmp	r3, #9
 800657c:	d94d      	bls.n	800661a <_svfiprintf_r+0x16e>
 800657e:	b1b8      	cbz	r0, 80065b0 <_svfiprintf_r+0x104>
 8006580:	e00f      	b.n	80065a2 <_svfiprintf_r+0xf6>
 8006582:	462f      	mov	r7, r5
 8006584:	e7b8      	b.n	80064f8 <_svfiprintf_r+0x4c>
 8006586:	4a40      	ldr	r2, [pc, #256]	; (8006688 <_svfiprintf_r+0x1dc>)
 8006588:	1a80      	subs	r0, r0, r2
 800658a:	fa0b f000 	lsl.w	r0, fp, r0
 800658e:	4318      	orrs	r0, r3
 8006590:	9004      	str	r0, [sp, #16]
 8006592:	463d      	mov	r5, r7
 8006594:	e7d3      	b.n	800653e <_svfiprintf_r+0x92>
 8006596:	9a03      	ldr	r2, [sp, #12]
 8006598:	1d11      	adds	r1, r2, #4
 800659a:	6812      	ldr	r2, [r2, #0]
 800659c:	9103      	str	r1, [sp, #12]
 800659e:	2a00      	cmp	r2, #0
 80065a0:	db01      	blt.n	80065a6 <_svfiprintf_r+0xfa>
 80065a2:	9207      	str	r2, [sp, #28]
 80065a4:	e004      	b.n	80065b0 <_svfiprintf_r+0x104>
 80065a6:	4252      	negs	r2, r2
 80065a8:	f043 0302 	orr.w	r3, r3, #2
 80065ac:	9207      	str	r2, [sp, #28]
 80065ae:	9304      	str	r3, [sp, #16]
 80065b0:	783b      	ldrb	r3, [r7, #0]
 80065b2:	2b2e      	cmp	r3, #46	; 0x2e
 80065b4:	d10c      	bne.n	80065d0 <_svfiprintf_r+0x124>
 80065b6:	787b      	ldrb	r3, [r7, #1]
 80065b8:	2b2a      	cmp	r3, #42	; 0x2a
 80065ba:	d133      	bne.n	8006624 <_svfiprintf_r+0x178>
 80065bc:	9b03      	ldr	r3, [sp, #12]
 80065be:	1d1a      	adds	r2, r3, #4
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	9203      	str	r2, [sp, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	bfb8      	it	lt
 80065c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80065cc:	3702      	adds	r7, #2
 80065ce:	9305      	str	r3, [sp, #20]
 80065d0:	4d2e      	ldr	r5, [pc, #184]	; (800668c <_svfiprintf_r+0x1e0>)
 80065d2:	7839      	ldrb	r1, [r7, #0]
 80065d4:	2203      	movs	r2, #3
 80065d6:	4628      	mov	r0, r5
 80065d8:	f7f9 fe02 	bl	80001e0 <memchr>
 80065dc:	b138      	cbz	r0, 80065ee <_svfiprintf_r+0x142>
 80065de:	2340      	movs	r3, #64	; 0x40
 80065e0:	1b40      	subs	r0, r0, r5
 80065e2:	fa03 f000 	lsl.w	r0, r3, r0
 80065e6:	9b04      	ldr	r3, [sp, #16]
 80065e8:	4303      	orrs	r3, r0
 80065ea:	3701      	adds	r7, #1
 80065ec:	9304      	str	r3, [sp, #16]
 80065ee:	7839      	ldrb	r1, [r7, #0]
 80065f0:	4827      	ldr	r0, [pc, #156]	; (8006690 <_svfiprintf_r+0x1e4>)
 80065f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065f6:	2206      	movs	r2, #6
 80065f8:	1c7e      	adds	r6, r7, #1
 80065fa:	f7f9 fdf1 	bl	80001e0 <memchr>
 80065fe:	2800      	cmp	r0, #0
 8006600:	d038      	beq.n	8006674 <_svfiprintf_r+0x1c8>
 8006602:	4b24      	ldr	r3, [pc, #144]	; (8006694 <_svfiprintf_r+0x1e8>)
 8006604:	bb13      	cbnz	r3, 800664c <_svfiprintf_r+0x1a0>
 8006606:	9b03      	ldr	r3, [sp, #12]
 8006608:	3307      	adds	r3, #7
 800660a:	f023 0307 	bic.w	r3, r3, #7
 800660e:	3308      	adds	r3, #8
 8006610:	9303      	str	r3, [sp, #12]
 8006612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006614:	444b      	add	r3, r9
 8006616:	9309      	str	r3, [sp, #36]	; 0x24
 8006618:	e76d      	b.n	80064f6 <_svfiprintf_r+0x4a>
 800661a:	fb05 3202 	mla	r2, r5, r2, r3
 800661e:	2001      	movs	r0, #1
 8006620:	460f      	mov	r7, r1
 8006622:	e7a6      	b.n	8006572 <_svfiprintf_r+0xc6>
 8006624:	2300      	movs	r3, #0
 8006626:	3701      	adds	r7, #1
 8006628:	9305      	str	r3, [sp, #20]
 800662a:	4619      	mov	r1, r3
 800662c:	250a      	movs	r5, #10
 800662e:	4638      	mov	r0, r7
 8006630:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006634:	3a30      	subs	r2, #48	; 0x30
 8006636:	2a09      	cmp	r2, #9
 8006638:	d903      	bls.n	8006642 <_svfiprintf_r+0x196>
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0c8      	beq.n	80065d0 <_svfiprintf_r+0x124>
 800663e:	9105      	str	r1, [sp, #20]
 8006640:	e7c6      	b.n	80065d0 <_svfiprintf_r+0x124>
 8006642:	fb05 2101 	mla	r1, r5, r1, r2
 8006646:	2301      	movs	r3, #1
 8006648:	4607      	mov	r7, r0
 800664a:	e7f0      	b.n	800662e <_svfiprintf_r+0x182>
 800664c:	ab03      	add	r3, sp, #12
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	4622      	mov	r2, r4
 8006652:	4b11      	ldr	r3, [pc, #68]	; (8006698 <_svfiprintf_r+0x1ec>)
 8006654:	a904      	add	r1, sp, #16
 8006656:	4640      	mov	r0, r8
 8006658:	f7fe f95a 	bl	8004910 <_printf_float>
 800665c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006660:	4681      	mov	r9, r0
 8006662:	d1d6      	bne.n	8006612 <_svfiprintf_r+0x166>
 8006664:	89a3      	ldrh	r3, [r4, #12]
 8006666:	065b      	lsls	r3, r3, #25
 8006668:	f53f af35 	bmi.w	80064d6 <_svfiprintf_r+0x2a>
 800666c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800666e:	b01d      	add	sp, #116	; 0x74
 8006670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006674:	ab03      	add	r3, sp, #12
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	4622      	mov	r2, r4
 800667a:	4b07      	ldr	r3, [pc, #28]	; (8006698 <_svfiprintf_r+0x1ec>)
 800667c:	a904      	add	r1, sp, #16
 800667e:	4640      	mov	r0, r8
 8006680:	f7fe fbfc 	bl	8004e7c <_printf_i>
 8006684:	e7ea      	b.n	800665c <_svfiprintf_r+0x1b0>
 8006686:	bf00      	nop
 8006688:	08007eb4 	.word	0x08007eb4
 800668c:	08007eba 	.word	0x08007eba
 8006690:	08007ebe 	.word	0x08007ebe
 8006694:	08004911 	.word	0x08004911
 8006698:	080063f9 	.word	0x080063f9

0800669c <__ascii_mbtowc>:
 800669c:	b082      	sub	sp, #8
 800669e:	b901      	cbnz	r1, 80066a2 <__ascii_mbtowc+0x6>
 80066a0:	a901      	add	r1, sp, #4
 80066a2:	b142      	cbz	r2, 80066b6 <__ascii_mbtowc+0x1a>
 80066a4:	b14b      	cbz	r3, 80066ba <__ascii_mbtowc+0x1e>
 80066a6:	7813      	ldrb	r3, [r2, #0]
 80066a8:	600b      	str	r3, [r1, #0]
 80066aa:	7812      	ldrb	r2, [r2, #0]
 80066ac:	1c10      	adds	r0, r2, #0
 80066ae:	bf18      	it	ne
 80066b0:	2001      	movne	r0, #1
 80066b2:	b002      	add	sp, #8
 80066b4:	4770      	bx	lr
 80066b6:	4610      	mov	r0, r2
 80066b8:	e7fb      	b.n	80066b2 <__ascii_mbtowc+0x16>
 80066ba:	f06f 0001 	mvn.w	r0, #1
 80066be:	e7f8      	b.n	80066b2 <__ascii_mbtowc+0x16>

080066c0 <memmove>:
 80066c0:	4288      	cmp	r0, r1
 80066c2:	b510      	push	{r4, lr}
 80066c4:	eb01 0302 	add.w	r3, r1, r2
 80066c8:	d807      	bhi.n	80066da <memmove+0x1a>
 80066ca:	1e42      	subs	r2, r0, #1
 80066cc:	4299      	cmp	r1, r3
 80066ce:	d00a      	beq.n	80066e6 <memmove+0x26>
 80066d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80066d8:	e7f8      	b.n	80066cc <memmove+0xc>
 80066da:	4283      	cmp	r3, r0
 80066dc:	d9f5      	bls.n	80066ca <memmove+0xa>
 80066de:	1881      	adds	r1, r0, r2
 80066e0:	1ad2      	subs	r2, r2, r3
 80066e2:	42d3      	cmn	r3, r2
 80066e4:	d100      	bne.n	80066e8 <memmove+0x28>
 80066e6:	bd10      	pop	{r4, pc}
 80066e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066ec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80066f0:	e7f7      	b.n	80066e2 <memmove+0x22>

080066f2 <_realloc_r>:
 80066f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f4:	4607      	mov	r7, r0
 80066f6:	4614      	mov	r4, r2
 80066f8:	460e      	mov	r6, r1
 80066fa:	b921      	cbnz	r1, 8006706 <_realloc_r+0x14>
 80066fc:	4611      	mov	r1, r2
 80066fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006702:	f7fe b817 	b.w	8004734 <_malloc_r>
 8006706:	b922      	cbnz	r2, 8006712 <_realloc_r+0x20>
 8006708:	f7fd ffc6 	bl	8004698 <_free_r>
 800670c:	4625      	mov	r5, r4
 800670e:	4628      	mov	r0, r5
 8006710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006712:	f000 f821 	bl	8006758 <_malloc_usable_size_r>
 8006716:	42a0      	cmp	r0, r4
 8006718:	d20f      	bcs.n	800673a <_realloc_r+0x48>
 800671a:	4621      	mov	r1, r4
 800671c:	4638      	mov	r0, r7
 800671e:	f7fe f809 	bl	8004734 <_malloc_r>
 8006722:	4605      	mov	r5, r0
 8006724:	2800      	cmp	r0, #0
 8006726:	d0f2      	beq.n	800670e <_realloc_r+0x1c>
 8006728:	4631      	mov	r1, r6
 800672a:	4622      	mov	r2, r4
 800672c:	f7ff fb6e 	bl	8005e0c <memcpy>
 8006730:	4631      	mov	r1, r6
 8006732:	4638      	mov	r0, r7
 8006734:	f7fd ffb0 	bl	8004698 <_free_r>
 8006738:	e7e9      	b.n	800670e <_realloc_r+0x1c>
 800673a:	4635      	mov	r5, r6
 800673c:	e7e7      	b.n	800670e <_realloc_r+0x1c>

0800673e <__ascii_wctomb>:
 800673e:	b149      	cbz	r1, 8006754 <__ascii_wctomb+0x16>
 8006740:	2aff      	cmp	r2, #255	; 0xff
 8006742:	bf85      	ittet	hi
 8006744:	238a      	movhi	r3, #138	; 0x8a
 8006746:	6003      	strhi	r3, [r0, #0]
 8006748:	700a      	strbls	r2, [r1, #0]
 800674a:	f04f 30ff 	movhi.w	r0, #4294967295
 800674e:	bf98      	it	ls
 8006750:	2001      	movls	r0, #1
 8006752:	4770      	bx	lr
 8006754:	4608      	mov	r0, r1
 8006756:	4770      	bx	lr

08006758 <_malloc_usable_size_r>:
 8006758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800675c:	1f18      	subs	r0, r3, #4
 800675e:	2b00      	cmp	r3, #0
 8006760:	bfbc      	itt	lt
 8006762:	580b      	ldrlt	r3, [r1, r0]
 8006764:	18c0      	addlt	r0, r0, r3
 8006766:	4770      	bx	lr

08006768 <atan2>:
 8006768:	f000 b972 	b.w	8006a50 <__ieee754_atan2>

0800676c <pow>:
 800676c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006770:	ed2d 8b04 	vpush	{d8-d9}
 8006774:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8006a48 <pow+0x2dc>
 8006778:	b08d      	sub	sp, #52	; 0x34
 800677a:	ec57 6b10 	vmov	r6, r7, d0
 800677e:	ec55 4b11 	vmov	r4, r5, d1
 8006782:	f000 fa45 	bl	8006c10 <__ieee754_pow>
 8006786:	f999 3000 	ldrsb.w	r3, [r9]
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	3301      	adds	r3, #1
 800678e:	eeb0 8a40 	vmov.f32	s16, s0
 8006792:	eef0 8a60 	vmov.f32	s17, s1
 8006796:	46c8      	mov	r8, r9
 8006798:	d05f      	beq.n	800685a <pow+0xee>
 800679a:	4622      	mov	r2, r4
 800679c:	462b      	mov	r3, r5
 800679e:	4620      	mov	r0, r4
 80067a0:	4629      	mov	r1, r5
 80067a2:	f7fa f9c3 	bl	8000b2c <__aeabi_dcmpun>
 80067a6:	4683      	mov	fp, r0
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d156      	bne.n	800685a <pow+0xee>
 80067ac:	4632      	mov	r2, r6
 80067ae:	463b      	mov	r3, r7
 80067b0:	4630      	mov	r0, r6
 80067b2:	4639      	mov	r1, r7
 80067b4:	f7fa f9ba 	bl	8000b2c <__aeabi_dcmpun>
 80067b8:	9001      	str	r0, [sp, #4]
 80067ba:	b1e8      	cbz	r0, 80067f8 <pow+0x8c>
 80067bc:	2200      	movs	r2, #0
 80067be:	2300      	movs	r3, #0
 80067c0:	4620      	mov	r0, r4
 80067c2:	4629      	mov	r1, r5
 80067c4:	f7fa f980 	bl	8000ac8 <__aeabi_dcmpeq>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d046      	beq.n	800685a <pow+0xee>
 80067cc:	2301      	movs	r3, #1
 80067ce:	9302      	str	r3, [sp, #8]
 80067d0:	4b96      	ldr	r3, [pc, #600]	; (8006a2c <pow+0x2c0>)
 80067d2:	9303      	str	r3, [sp, #12]
 80067d4:	4b96      	ldr	r3, [pc, #600]	; (8006a30 <pow+0x2c4>)
 80067d6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80067da:	2200      	movs	r2, #0
 80067dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80067e0:	9b00      	ldr	r3, [sp, #0]
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80067e8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80067ec:	d033      	beq.n	8006856 <pow+0xea>
 80067ee:	a802      	add	r0, sp, #8
 80067f0:	f001 f97f 	bl	8007af2 <matherr>
 80067f4:	bb48      	cbnz	r0, 800684a <pow+0xde>
 80067f6:	e05d      	b.n	80068b4 <pow+0x148>
 80067f8:	f04f 0a00 	mov.w	sl, #0
 80067fc:	f04f 0b00 	mov.w	fp, #0
 8006800:	4652      	mov	r2, sl
 8006802:	465b      	mov	r3, fp
 8006804:	4630      	mov	r0, r6
 8006806:	4639      	mov	r1, r7
 8006808:	f7fa f95e 	bl	8000ac8 <__aeabi_dcmpeq>
 800680c:	ec4b ab19 	vmov	d9, sl, fp
 8006810:	2800      	cmp	r0, #0
 8006812:	d054      	beq.n	80068be <pow+0x152>
 8006814:	4652      	mov	r2, sl
 8006816:	465b      	mov	r3, fp
 8006818:	4620      	mov	r0, r4
 800681a:	4629      	mov	r1, r5
 800681c:	f7fa f954 	bl	8000ac8 <__aeabi_dcmpeq>
 8006820:	4680      	mov	r8, r0
 8006822:	b318      	cbz	r0, 800686c <pow+0x100>
 8006824:	2301      	movs	r3, #1
 8006826:	9302      	str	r3, [sp, #8]
 8006828:	4b80      	ldr	r3, [pc, #512]	; (8006a2c <pow+0x2c0>)
 800682a:	9303      	str	r3, [sp, #12]
 800682c:	9b01      	ldr	r3, [sp, #4]
 800682e:	930a      	str	r3, [sp, #40]	; 0x28
 8006830:	9b00      	ldr	r3, [sp, #0]
 8006832:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006836:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800683a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0d5      	beq.n	80067ee <pow+0x82>
 8006842:	4b7b      	ldr	r3, [pc, #492]	; (8006a30 <pow+0x2c4>)
 8006844:	2200      	movs	r2, #0
 8006846:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800684a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800684c:	b11b      	cbz	r3, 8006856 <pow+0xea>
 800684e:	f7fd fee9 	bl	8004624 <__errno>
 8006852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006854:	6003      	str	r3, [r0, #0]
 8006856:	ed9d 8b08 	vldr	d8, [sp, #32]
 800685a:	eeb0 0a48 	vmov.f32	s0, s16
 800685e:	eef0 0a68 	vmov.f32	s1, s17
 8006862:	b00d      	add	sp, #52	; 0x34
 8006864:	ecbd 8b04 	vpop	{d8-d9}
 8006868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686c:	ec45 4b10 	vmov	d0, r4, r5
 8006870:	f001 f937 	bl	8007ae2 <finite>
 8006874:	2800      	cmp	r0, #0
 8006876:	d0f0      	beq.n	800685a <pow+0xee>
 8006878:	4652      	mov	r2, sl
 800687a:	465b      	mov	r3, fp
 800687c:	4620      	mov	r0, r4
 800687e:	4629      	mov	r1, r5
 8006880:	f7fa f92c 	bl	8000adc <__aeabi_dcmplt>
 8006884:	2800      	cmp	r0, #0
 8006886:	d0e8      	beq.n	800685a <pow+0xee>
 8006888:	2301      	movs	r3, #1
 800688a:	9302      	str	r3, [sp, #8]
 800688c:	4b67      	ldr	r3, [pc, #412]	; (8006a2c <pow+0x2c0>)
 800688e:	9303      	str	r3, [sp, #12]
 8006890:	f999 3000 	ldrsb.w	r3, [r9]
 8006894:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006898:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800689c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80068a0:	b913      	cbnz	r3, 80068a8 <pow+0x13c>
 80068a2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80068a6:	e7a2      	b.n	80067ee <pow+0x82>
 80068a8:	4962      	ldr	r1, [pc, #392]	; (8006a34 <pow+0x2c8>)
 80068aa:	2000      	movs	r0, #0
 80068ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d19c      	bne.n	80067ee <pow+0x82>
 80068b4:	f7fd feb6 	bl	8004624 <__errno>
 80068b8:	2321      	movs	r3, #33	; 0x21
 80068ba:	6003      	str	r3, [r0, #0]
 80068bc:	e7c5      	b.n	800684a <pow+0xde>
 80068be:	eeb0 0a48 	vmov.f32	s0, s16
 80068c2:	eef0 0a68 	vmov.f32	s1, s17
 80068c6:	f001 f90c 	bl	8007ae2 <finite>
 80068ca:	9000      	str	r0, [sp, #0]
 80068cc:	2800      	cmp	r0, #0
 80068ce:	f040 8081 	bne.w	80069d4 <pow+0x268>
 80068d2:	ec47 6b10 	vmov	d0, r6, r7
 80068d6:	f001 f904 	bl	8007ae2 <finite>
 80068da:	2800      	cmp	r0, #0
 80068dc:	d07a      	beq.n	80069d4 <pow+0x268>
 80068de:	ec45 4b10 	vmov	d0, r4, r5
 80068e2:	f001 f8fe 	bl	8007ae2 <finite>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	d074      	beq.n	80069d4 <pow+0x268>
 80068ea:	ec53 2b18 	vmov	r2, r3, d8
 80068ee:	ee18 0a10 	vmov	r0, s16
 80068f2:	4619      	mov	r1, r3
 80068f4:	f7fa f91a 	bl	8000b2c <__aeabi_dcmpun>
 80068f8:	f999 9000 	ldrsb.w	r9, [r9]
 80068fc:	4b4b      	ldr	r3, [pc, #300]	; (8006a2c <pow+0x2c0>)
 80068fe:	b1b0      	cbz	r0, 800692e <pow+0x1c2>
 8006900:	2201      	movs	r2, #1
 8006902:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006906:	9b00      	ldr	r3, [sp, #0]
 8006908:	930a      	str	r3, [sp, #40]	; 0x28
 800690a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800690e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006912:	f1b9 0f00 	cmp.w	r9, #0
 8006916:	d0c4      	beq.n	80068a2 <pow+0x136>
 8006918:	4652      	mov	r2, sl
 800691a:	465b      	mov	r3, fp
 800691c:	4650      	mov	r0, sl
 800691e:	4659      	mov	r1, fp
 8006920:	f7f9 ff94 	bl	800084c <__aeabi_ddiv>
 8006924:	f1b9 0f02 	cmp.w	r9, #2
 8006928:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800692c:	e7c1      	b.n	80068b2 <pow+0x146>
 800692e:	2203      	movs	r2, #3
 8006930:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006934:	900a      	str	r0, [sp, #40]	; 0x28
 8006936:	4629      	mov	r1, r5
 8006938:	4620      	mov	r0, r4
 800693a:	2200      	movs	r2, #0
 800693c:	4b3e      	ldr	r3, [pc, #248]	; (8006a38 <pow+0x2cc>)
 800693e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006942:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006946:	f7f9 fe57 	bl	80005f8 <__aeabi_dmul>
 800694a:	4604      	mov	r4, r0
 800694c:	460d      	mov	r5, r1
 800694e:	f1b9 0f00 	cmp.w	r9, #0
 8006952:	d124      	bne.n	800699e <pow+0x232>
 8006954:	4b39      	ldr	r3, [pc, #228]	; (8006a3c <pow+0x2d0>)
 8006956:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800695a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800695e:	4630      	mov	r0, r6
 8006960:	4652      	mov	r2, sl
 8006962:	465b      	mov	r3, fp
 8006964:	4639      	mov	r1, r7
 8006966:	f7fa f8b9 	bl	8000adc <__aeabi_dcmplt>
 800696a:	2800      	cmp	r0, #0
 800696c:	d056      	beq.n	8006a1c <pow+0x2b0>
 800696e:	ec45 4b10 	vmov	d0, r4, r5
 8006972:	f001 f8c9 	bl	8007b08 <rint>
 8006976:	4622      	mov	r2, r4
 8006978:	462b      	mov	r3, r5
 800697a:	ec51 0b10 	vmov	r0, r1, d0
 800697e:	f7fa f8a3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006982:	b920      	cbnz	r0, 800698e <pow+0x222>
 8006984:	4b2e      	ldr	r3, [pc, #184]	; (8006a40 <pow+0x2d4>)
 8006986:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800698a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800698e:	f998 3000 	ldrsb.w	r3, [r8]
 8006992:	2b02      	cmp	r3, #2
 8006994:	d142      	bne.n	8006a1c <pow+0x2b0>
 8006996:	f7fd fe45 	bl	8004624 <__errno>
 800699a:	2322      	movs	r3, #34	; 0x22
 800699c:	e78d      	b.n	80068ba <pow+0x14e>
 800699e:	4b29      	ldr	r3, [pc, #164]	; (8006a44 <pow+0x2d8>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80069a6:	4630      	mov	r0, r6
 80069a8:	4652      	mov	r2, sl
 80069aa:	465b      	mov	r3, fp
 80069ac:	4639      	mov	r1, r7
 80069ae:	f7fa f895 	bl	8000adc <__aeabi_dcmplt>
 80069b2:	2800      	cmp	r0, #0
 80069b4:	d0eb      	beq.n	800698e <pow+0x222>
 80069b6:	ec45 4b10 	vmov	d0, r4, r5
 80069ba:	f001 f8a5 	bl	8007b08 <rint>
 80069be:	4622      	mov	r2, r4
 80069c0:	462b      	mov	r3, r5
 80069c2:	ec51 0b10 	vmov	r0, r1, d0
 80069c6:	f7fa f87f 	bl	8000ac8 <__aeabi_dcmpeq>
 80069ca:	2800      	cmp	r0, #0
 80069cc:	d1df      	bne.n	800698e <pow+0x222>
 80069ce:	2200      	movs	r2, #0
 80069d0:	4b18      	ldr	r3, [pc, #96]	; (8006a34 <pow+0x2c8>)
 80069d2:	e7da      	b.n	800698a <pow+0x21e>
 80069d4:	2200      	movs	r2, #0
 80069d6:	2300      	movs	r3, #0
 80069d8:	ec51 0b18 	vmov	r0, r1, d8
 80069dc:	f7fa f874 	bl	8000ac8 <__aeabi_dcmpeq>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	f43f af3a 	beq.w	800685a <pow+0xee>
 80069e6:	ec47 6b10 	vmov	d0, r6, r7
 80069ea:	f001 f87a 	bl	8007ae2 <finite>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	f43f af33 	beq.w	800685a <pow+0xee>
 80069f4:	ec45 4b10 	vmov	d0, r4, r5
 80069f8:	f001 f873 	bl	8007ae2 <finite>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	f43f af2c 	beq.w	800685a <pow+0xee>
 8006a02:	2304      	movs	r3, #4
 8006a04:	9302      	str	r3, [sp, #8]
 8006a06:	4b09      	ldr	r3, [pc, #36]	; (8006a2c <pow+0x2c0>)
 8006a08:	9303      	str	r3, [sp, #12]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	930a      	str	r3, [sp, #40]	; 0x28
 8006a0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006a12:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006a16:	ed8d 9b08 	vstr	d9, [sp, #32]
 8006a1a:	e7b8      	b.n	800698e <pow+0x222>
 8006a1c:	a802      	add	r0, sp, #8
 8006a1e:	f001 f868 	bl	8007af2 <matherr>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	f47f af11 	bne.w	800684a <pow+0xde>
 8006a28:	e7b5      	b.n	8006996 <pow+0x22a>
 8006a2a:	bf00      	nop
 8006a2c:	08007fd0 	.word	0x08007fd0
 8006a30:	3ff00000 	.word	0x3ff00000
 8006a34:	fff00000 	.word	0xfff00000
 8006a38:	3fe00000 	.word	0x3fe00000
 8006a3c:	47efffff 	.word	0x47efffff
 8006a40:	c7efffff 	.word	0xc7efffff
 8006a44:	7ff00000 	.word	0x7ff00000
 8006a48:	200001dc 	.word	0x200001dc
 8006a4c:	00000000 	.word	0x00000000

08006a50 <__ieee754_atan2>:
 8006a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a54:	ec57 6b11 	vmov	r6, r7, d1
 8006a58:	4273      	negs	r3, r6
 8006a5a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006a5e:	4333      	orrs	r3, r6
 8006a60:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8006c08 <__ieee754_atan2+0x1b8>
 8006a64:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006a68:	4573      	cmp	r3, lr
 8006a6a:	ec51 0b10 	vmov	r0, r1, d0
 8006a6e:	ee11 8a10 	vmov	r8, s2
 8006a72:	d80a      	bhi.n	8006a8a <__ieee754_atan2+0x3a>
 8006a74:	4244      	negs	r4, r0
 8006a76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a7a:	4304      	orrs	r4, r0
 8006a7c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006a80:	4574      	cmp	r4, lr
 8006a82:	468c      	mov	ip, r1
 8006a84:	ee10 9a10 	vmov	r9, s0
 8006a88:	d907      	bls.n	8006a9a <__ieee754_atan2+0x4a>
 8006a8a:	4632      	mov	r2, r6
 8006a8c:	463b      	mov	r3, r7
 8006a8e:	f7f9 fbfd 	bl	800028c <__adddf3>
 8006a92:	ec41 0b10 	vmov	d0, r0, r1
 8006a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a9a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006a9e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006aa2:	4334      	orrs	r4, r6
 8006aa4:	d103      	bne.n	8006aae <__ieee754_atan2+0x5e>
 8006aa6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aaa:	f000 be71 	b.w	8007790 <atan>
 8006aae:	17bc      	asrs	r4, r7, #30
 8006ab0:	f004 0402 	and.w	r4, r4, #2
 8006ab4:	ea53 0909 	orrs.w	r9, r3, r9
 8006ab8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006abc:	d107      	bne.n	8006ace <__ieee754_atan2+0x7e>
 8006abe:	2c02      	cmp	r4, #2
 8006ac0:	d073      	beq.n	8006baa <__ieee754_atan2+0x15a>
 8006ac2:	2c03      	cmp	r4, #3
 8006ac4:	d1e5      	bne.n	8006a92 <__ieee754_atan2+0x42>
 8006ac6:	a13e      	add	r1, pc, #248	; (adr r1, 8006bc0 <__ieee754_atan2+0x170>)
 8006ac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006acc:	e7e1      	b.n	8006a92 <__ieee754_atan2+0x42>
 8006ace:	ea52 0808 	orrs.w	r8, r2, r8
 8006ad2:	d106      	bne.n	8006ae2 <__ieee754_atan2+0x92>
 8006ad4:	f1bc 0f00 	cmp.w	ip, #0
 8006ad8:	da6b      	bge.n	8006bb2 <__ieee754_atan2+0x162>
 8006ada:	a13b      	add	r1, pc, #236	; (adr r1, 8006bc8 <__ieee754_atan2+0x178>)
 8006adc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ae0:	e7d7      	b.n	8006a92 <__ieee754_atan2+0x42>
 8006ae2:	4572      	cmp	r2, lr
 8006ae4:	d120      	bne.n	8006b28 <__ieee754_atan2+0xd8>
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d111      	bne.n	8006b0e <__ieee754_atan2+0xbe>
 8006aea:	2c02      	cmp	r4, #2
 8006aec:	d007      	beq.n	8006afe <__ieee754_atan2+0xae>
 8006aee:	2c03      	cmp	r4, #3
 8006af0:	d009      	beq.n	8006b06 <__ieee754_atan2+0xb6>
 8006af2:	2c01      	cmp	r4, #1
 8006af4:	d155      	bne.n	8006ba2 <__ieee754_atan2+0x152>
 8006af6:	a136      	add	r1, pc, #216	; (adr r1, 8006bd0 <__ieee754_atan2+0x180>)
 8006af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006afc:	e7c9      	b.n	8006a92 <__ieee754_atan2+0x42>
 8006afe:	a136      	add	r1, pc, #216	; (adr r1, 8006bd8 <__ieee754_atan2+0x188>)
 8006b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b04:	e7c5      	b.n	8006a92 <__ieee754_atan2+0x42>
 8006b06:	a136      	add	r1, pc, #216	; (adr r1, 8006be0 <__ieee754_atan2+0x190>)
 8006b08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b0c:	e7c1      	b.n	8006a92 <__ieee754_atan2+0x42>
 8006b0e:	2c02      	cmp	r4, #2
 8006b10:	d04b      	beq.n	8006baa <__ieee754_atan2+0x15a>
 8006b12:	2c03      	cmp	r4, #3
 8006b14:	d0d7      	beq.n	8006ac6 <__ieee754_atan2+0x76>
 8006b16:	2c01      	cmp	r4, #1
 8006b18:	f04f 0000 	mov.w	r0, #0
 8006b1c:	d102      	bne.n	8006b24 <__ieee754_atan2+0xd4>
 8006b1e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006b22:	e7b6      	b.n	8006a92 <__ieee754_atan2+0x42>
 8006b24:	2100      	movs	r1, #0
 8006b26:	e7b4      	b.n	8006a92 <__ieee754_atan2+0x42>
 8006b28:	4573      	cmp	r3, lr
 8006b2a:	d0d3      	beq.n	8006ad4 <__ieee754_atan2+0x84>
 8006b2c:	1a9b      	subs	r3, r3, r2
 8006b2e:	151b      	asrs	r3, r3, #20
 8006b30:	2b3c      	cmp	r3, #60	; 0x3c
 8006b32:	dc1e      	bgt.n	8006b72 <__ieee754_atan2+0x122>
 8006b34:	2f00      	cmp	r7, #0
 8006b36:	da01      	bge.n	8006b3c <__ieee754_atan2+0xec>
 8006b38:	333c      	adds	r3, #60	; 0x3c
 8006b3a:	db1e      	blt.n	8006b7a <__ieee754_atan2+0x12a>
 8006b3c:	4632      	mov	r2, r6
 8006b3e:	463b      	mov	r3, r7
 8006b40:	f7f9 fe84 	bl	800084c <__aeabi_ddiv>
 8006b44:	ec41 0b10 	vmov	d0, r0, r1
 8006b48:	f000 ffc2 	bl	8007ad0 <fabs>
 8006b4c:	f000 fe20 	bl	8007790 <atan>
 8006b50:	ec51 0b10 	vmov	r0, r1, d0
 8006b54:	2c01      	cmp	r4, #1
 8006b56:	d013      	beq.n	8006b80 <__ieee754_atan2+0x130>
 8006b58:	2c02      	cmp	r4, #2
 8006b5a:	d015      	beq.n	8006b88 <__ieee754_atan2+0x138>
 8006b5c:	2c00      	cmp	r4, #0
 8006b5e:	d098      	beq.n	8006a92 <__ieee754_atan2+0x42>
 8006b60:	a321      	add	r3, pc, #132	; (adr r3, 8006be8 <__ieee754_atan2+0x198>)
 8006b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b66:	f7f9 fb8f 	bl	8000288 <__aeabi_dsub>
 8006b6a:	a321      	add	r3, pc, #132	; (adr r3, 8006bf0 <__ieee754_atan2+0x1a0>)
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	e014      	b.n	8006b9c <__ieee754_atan2+0x14c>
 8006b72:	a121      	add	r1, pc, #132	; (adr r1, 8006bf8 <__ieee754_atan2+0x1a8>)
 8006b74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b78:	e7ec      	b.n	8006b54 <__ieee754_atan2+0x104>
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	e7e9      	b.n	8006b54 <__ieee754_atan2+0x104>
 8006b80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b84:	4619      	mov	r1, r3
 8006b86:	e784      	b.n	8006a92 <__ieee754_atan2+0x42>
 8006b88:	a317      	add	r3, pc, #92	; (adr r3, 8006be8 <__ieee754_atan2+0x198>)
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	f7f9 fb7b 	bl	8000288 <__aeabi_dsub>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	a116      	add	r1, pc, #88	; (adr r1, 8006bf0 <__ieee754_atan2+0x1a0>)
 8006b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b9c:	f7f9 fb74 	bl	8000288 <__aeabi_dsub>
 8006ba0:	e777      	b.n	8006a92 <__ieee754_atan2+0x42>
 8006ba2:	a117      	add	r1, pc, #92	; (adr r1, 8006c00 <__ieee754_atan2+0x1b0>)
 8006ba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ba8:	e773      	b.n	8006a92 <__ieee754_atan2+0x42>
 8006baa:	a111      	add	r1, pc, #68	; (adr r1, 8006bf0 <__ieee754_atan2+0x1a0>)
 8006bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bb0:	e76f      	b.n	8006a92 <__ieee754_atan2+0x42>
 8006bb2:	a111      	add	r1, pc, #68	; (adr r1, 8006bf8 <__ieee754_atan2+0x1a8>)
 8006bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bb8:	e76b      	b.n	8006a92 <__ieee754_atan2+0x42>
 8006bba:	bf00      	nop
 8006bbc:	f3af 8000 	nop.w
 8006bc0:	54442d18 	.word	0x54442d18
 8006bc4:	c00921fb 	.word	0xc00921fb
 8006bc8:	54442d18 	.word	0x54442d18
 8006bcc:	bff921fb 	.word	0xbff921fb
 8006bd0:	54442d18 	.word	0x54442d18
 8006bd4:	bfe921fb 	.word	0xbfe921fb
 8006bd8:	7f3321d2 	.word	0x7f3321d2
 8006bdc:	4002d97c 	.word	0x4002d97c
 8006be0:	7f3321d2 	.word	0x7f3321d2
 8006be4:	c002d97c 	.word	0xc002d97c
 8006be8:	33145c07 	.word	0x33145c07
 8006bec:	3ca1a626 	.word	0x3ca1a626
 8006bf0:	54442d18 	.word	0x54442d18
 8006bf4:	400921fb 	.word	0x400921fb
 8006bf8:	54442d18 	.word	0x54442d18
 8006bfc:	3ff921fb 	.word	0x3ff921fb
 8006c00:	54442d18 	.word	0x54442d18
 8006c04:	3fe921fb 	.word	0x3fe921fb
 8006c08:	7ff00000 	.word	0x7ff00000
 8006c0c:	00000000 	.word	0x00000000

08006c10 <__ieee754_pow>:
 8006c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c14:	b091      	sub	sp, #68	; 0x44
 8006c16:	ed8d 1b00 	vstr	d1, [sp]
 8006c1a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006c1e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006c22:	ea58 0302 	orrs.w	r3, r8, r2
 8006c26:	ec57 6b10 	vmov	r6, r7, d0
 8006c2a:	f000 84be 	beq.w	80075aa <__ieee754_pow+0x99a>
 8006c2e:	4b7a      	ldr	r3, [pc, #488]	; (8006e18 <__ieee754_pow+0x208>)
 8006c30:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006c34:	429c      	cmp	r4, r3
 8006c36:	463d      	mov	r5, r7
 8006c38:	ee10 aa10 	vmov	sl, s0
 8006c3c:	dc09      	bgt.n	8006c52 <__ieee754_pow+0x42>
 8006c3e:	d103      	bne.n	8006c48 <__ieee754_pow+0x38>
 8006c40:	b93e      	cbnz	r6, 8006c52 <__ieee754_pow+0x42>
 8006c42:	45a0      	cmp	r8, r4
 8006c44:	dc0d      	bgt.n	8006c62 <__ieee754_pow+0x52>
 8006c46:	e001      	b.n	8006c4c <__ieee754_pow+0x3c>
 8006c48:	4598      	cmp	r8, r3
 8006c4a:	dc02      	bgt.n	8006c52 <__ieee754_pow+0x42>
 8006c4c:	4598      	cmp	r8, r3
 8006c4e:	d10e      	bne.n	8006c6e <__ieee754_pow+0x5e>
 8006c50:	b16a      	cbz	r2, 8006c6e <__ieee754_pow+0x5e>
 8006c52:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006c56:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006c5a:	ea54 030a 	orrs.w	r3, r4, sl
 8006c5e:	f000 84a4 	beq.w	80075aa <__ieee754_pow+0x99a>
 8006c62:	486e      	ldr	r0, [pc, #440]	; (8006e1c <__ieee754_pow+0x20c>)
 8006c64:	b011      	add	sp, #68	; 0x44
 8006c66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6a:	f000 bf45 	b.w	8007af8 <nan>
 8006c6e:	2d00      	cmp	r5, #0
 8006c70:	da53      	bge.n	8006d1a <__ieee754_pow+0x10a>
 8006c72:	4b6b      	ldr	r3, [pc, #428]	; (8006e20 <__ieee754_pow+0x210>)
 8006c74:	4598      	cmp	r8, r3
 8006c76:	dc4d      	bgt.n	8006d14 <__ieee754_pow+0x104>
 8006c78:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006c7c:	4598      	cmp	r8, r3
 8006c7e:	dd4c      	ble.n	8006d1a <__ieee754_pow+0x10a>
 8006c80:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006c84:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006c88:	2b14      	cmp	r3, #20
 8006c8a:	dd26      	ble.n	8006cda <__ieee754_pow+0xca>
 8006c8c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006c90:	fa22 f103 	lsr.w	r1, r2, r3
 8006c94:	fa01 f303 	lsl.w	r3, r1, r3
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d13e      	bne.n	8006d1a <__ieee754_pow+0x10a>
 8006c9c:	f001 0101 	and.w	r1, r1, #1
 8006ca0:	f1c1 0b02 	rsb	fp, r1, #2
 8006ca4:	2a00      	cmp	r2, #0
 8006ca6:	d15b      	bne.n	8006d60 <__ieee754_pow+0x150>
 8006ca8:	4b5b      	ldr	r3, [pc, #364]	; (8006e18 <__ieee754_pow+0x208>)
 8006caa:	4598      	cmp	r8, r3
 8006cac:	d124      	bne.n	8006cf8 <__ieee754_pow+0xe8>
 8006cae:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006cb2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006cb6:	ea53 030a 	orrs.w	r3, r3, sl
 8006cba:	f000 8476 	beq.w	80075aa <__ieee754_pow+0x99a>
 8006cbe:	4b59      	ldr	r3, [pc, #356]	; (8006e24 <__ieee754_pow+0x214>)
 8006cc0:	429c      	cmp	r4, r3
 8006cc2:	dd2d      	ble.n	8006d20 <__ieee754_pow+0x110>
 8006cc4:	f1b9 0f00 	cmp.w	r9, #0
 8006cc8:	f280 8473 	bge.w	80075b2 <__ieee754_pow+0x9a2>
 8006ccc:	2000      	movs	r0, #0
 8006cce:	2100      	movs	r1, #0
 8006cd0:	ec41 0b10 	vmov	d0, r0, r1
 8006cd4:	b011      	add	sp, #68	; 0x44
 8006cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cda:	2a00      	cmp	r2, #0
 8006cdc:	d13e      	bne.n	8006d5c <__ieee754_pow+0x14c>
 8006cde:	f1c3 0314 	rsb	r3, r3, #20
 8006ce2:	fa48 f103 	asr.w	r1, r8, r3
 8006ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cea:	4543      	cmp	r3, r8
 8006cec:	f040 8469 	bne.w	80075c2 <__ieee754_pow+0x9b2>
 8006cf0:	f001 0101 	and.w	r1, r1, #1
 8006cf4:	f1c1 0b02 	rsb	fp, r1, #2
 8006cf8:	4b4b      	ldr	r3, [pc, #300]	; (8006e28 <__ieee754_pow+0x218>)
 8006cfa:	4598      	cmp	r8, r3
 8006cfc:	d118      	bne.n	8006d30 <__ieee754_pow+0x120>
 8006cfe:	f1b9 0f00 	cmp.w	r9, #0
 8006d02:	f280 845a 	bge.w	80075ba <__ieee754_pow+0x9aa>
 8006d06:	4948      	ldr	r1, [pc, #288]	; (8006e28 <__ieee754_pow+0x218>)
 8006d08:	4632      	mov	r2, r6
 8006d0a:	463b      	mov	r3, r7
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	f7f9 fd9d 	bl	800084c <__aeabi_ddiv>
 8006d12:	e7dd      	b.n	8006cd0 <__ieee754_pow+0xc0>
 8006d14:	f04f 0b02 	mov.w	fp, #2
 8006d18:	e7c4      	b.n	8006ca4 <__ieee754_pow+0x94>
 8006d1a:	f04f 0b00 	mov.w	fp, #0
 8006d1e:	e7c1      	b.n	8006ca4 <__ieee754_pow+0x94>
 8006d20:	f1b9 0f00 	cmp.w	r9, #0
 8006d24:	dad2      	bge.n	8006ccc <__ieee754_pow+0xbc>
 8006d26:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006d2a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006d2e:	e7cf      	b.n	8006cd0 <__ieee754_pow+0xc0>
 8006d30:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006d34:	d106      	bne.n	8006d44 <__ieee754_pow+0x134>
 8006d36:	4632      	mov	r2, r6
 8006d38:	463b      	mov	r3, r7
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	f7f9 fc5b 	bl	80005f8 <__aeabi_dmul>
 8006d42:	e7c5      	b.n	8006cd0 <__ieee754_pow+0xc0>
 8006d44:	4b39      	ldr	r3, [pc, #228]	; (8006e2c <__ieee754_pow+0x21c>)
 8006d46:	4599      	cmp	r9, r3
 8006d48:	d10a      	bne.n	8006d60 <__ieee754_pow+0x150>
 8006d4a:	2d00      	cmp	r5, #0
 8006d4c:	db08      	blt.n	8006d60 <__ieee754_pow+0x150>
 8006d4e:	ec47 6b10 	vmov	d0, r6, r7
 8006d52:	b011      	add	sp, #68	; 0x44
 8006d54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d58:	f000 bc68 	b.w	800762c <__ieee754_sqrt>
 8006d5c:	f04f 0b00 	mov.w	fp, #0
 8006d60:	ec47 6b10 	vmov	d0, r6, r7
 8006d64:	f000 feb4 	bl	8007ad0 <fabs>
 8006d68:	ec51 0b10 	vmov	r0, r1, d0
 8006d6c:	f1ba 0f00 	cmp.w	sl, #0
 8006d70:	d127      	bne.n	8006dc2 <__ieee754_pow+0x1b2>
 8006d72:	b124      	cbz	r4, 8006d7e <__ieee754_pow+0x16e>
 8006d74:	4b2c      	ldr	r3, [pc, #176]	; (8006e28 <__ieee754_pow+0x218>)
 8006d76:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d121      	bne.n	8006dc2 <__ieee754_pow+0x1b2>
 8006d7e:	f1b9 0f00 	cmp.w	r9, #0
 8006d82:	da05      	bge.n	8006d90 <__ieee754_pow+0x180>
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	2000      	movs	r0, #0
 8006d8a:	4927      	ldr	r1, [pc, #156]	; (8006e28 <__ieee754_pow+0x218>)
 8006d8c:	f7f9 fd5e 	bl	800084c <__aeabi_ddiv>
 8006d90:	2d00      	cmp	r5, #0
 8006d92:	da9d      	bge.n	8006cd0 <__ieee754_pow+0xc0>
 8006d94:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006d98:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006d9c:	ea54 030b 	orrs.w	r3, r4, fp
 8006da0:	d108      	bne.n	8006db4 <__ieee754_pow+0x1a4>
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
 8006da6:	4610      	mov	r0, r2
 8006da8:	4619      	mov	r1, r3
 8006daa:	f7f9 fa6d 	bl	8000288 <__aeabi_dsub>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	e7ac      	b.n	8006d0e <__ieee754_pow+0xfe>
 8006db4:	f1bb 0f01 	cmp.w	fp, #1
 8006db8:	d18a      	bne.n	8006cd0 <__ieee754_pow+0xc0>
 8006dba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	e786      	b.n	8006cd0 <__ieee754_pow+0xc0>
 8006dc2:	0fed      	lsrs	r5, r5, #31
 8006dc4:	1e6b      	subs	r3, r5, #1
 8006dc6:	930d      	str	r3, [sp, #52]	; 0x34
 8006dc8:	ea5b 0303 	orrs.w	r3, fp, r3
 8006dcc:	d102      	bne.n	8006dd4 <__ieee754_pow+0x1c4>
 8006dce:	4632      	mov	r2, r6
 8006dd0:	463b      	mov	r3, r7
 8006dd2:	e7e8      	b.n	8006da6 <__ieee754_pow+0x196>
 8006dd4:	4b16      	ldr	r3, [pc, #88]	; (8006e30 <__ieee754_pow+0x220>)
 8006dd6:	4598      	cmp	r8, r3
 8006dd8:	f340 80fe 	ble.w	8006fd8 <__ieee754_pow+0x3c8>
 8006ddc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006de0:	4598      	cmp	r8, r3
 8006de2:	dd0a      	ble.n	8006dfa <__ieee754_pow+0x1ea>
 8006de4:	4b0f      	ldr	r3, [pc, #60]	; (8006e24 <__ieee754_pow+0x214>)
 8006de6:	429c      	cmp	r4, r3
 8006de8:	dc0d      	bgt.n	8006e06 <__ieee754_pow+0x1f6>
 8006dea:	f1b9 0f00 	cmp.w	r9, #0
 8006dee:	f6bf af6d 	bge.w	8006ccc <__ieee754_pow+0xbc>
 8006df2:	a307      	add	r3, pc, #28	; (adr r3, 8006e10 <__ieee754_pow+0x200>)
 8006df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df8:	e79f      	b.n	8006d3a <__ieee754_pow+0x12a>
 8006dfa:	4b0e      	ldr	r3, [pc, #56]	; (8006e34 <__ieee754_pow+0x224>)
 8006dfc:	429c      	cmp	r4, r3
 8006dfe:	ddf4      	ble.n	8006dea <__ieee754_pow+0x1da>
 8006e00:	4b09      	ldr	r3, [pc, #36]	; (8006e28 <__ieee754_pow+0x218>)
 8006e02:	429c      	cmp	r4, r3
 8006e04:	dd18      	ble.n	8006e38 <__ieee754_pow+0x228>
 8006e06:	f1b9 0f00 	cmp.w	r9, #0
 8006e0a:	dcf2      	bgt.n	8006df2 <__ieee754_pow+0x1e2>
 8006e0c:	e75e      	b.n	8006ccc <__ieee754_pow+0xbc>
 8006e0e:	bf00      	nop
 8006e10:	8800759c 	.word	0x8800759c
 8006e14:	7e37e43c 	.word	0x7e37e43c
 8006e18:	7ff00000 	.word	0x7ff00000
 8006e1c:	08007eb9 	.word	0x08007eb9
 8006e20:	433fffff 	.word	0x433fffff
 8006e24:	3fefffff 	.word	0x3fefffff
 8006e28:	3ff00000 	.word	0x3ff00000
 8006e2c:	3fe00000 	.word	0x3fe00000
 8006e30:	41e00000 	.word	0x41e00000
 8006e34:	3feffffe 	.word	0x3feffffe
 8006e38:	2200      	movs	r2, #0
 8006e3a:	4b63      	ldr	r3, [pc, #396]	; (8006fc8 <__ieee754_pow+0x3b8>)
 8006e3c:	f7f9 fa24 	bl	8000288 <__aeabi_dsub>
 8006e40:	a355      	add	r3, pc, #340	; (adr r3, 8006f98 <__ieee754_pow+0x388>)
 8006e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e46:	4604      	mov	r4, r0
 8006e48:	460d      	mov	r5, r1
 8006e4a:	f7f9 fbd5 	bl	80005f8 <__aeabi_dmul>
 8006e4e:	a354      	add	r3, pc, #336	; (adr r3, 8006fa0 <__ieee754_pow+0x390>)
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	4606      	mov	r6, r0
 8006e56:	460f      	mov	r7, r1
 8006e58:	4620      	mov	r0, r4
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	f7f9 fbcc 	bl	80005f8 <__aeabi_dmul>
 8006e60:	2200      	movs	r2, #0
 8006e62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e66:	4b59      	ldr	r3, [pc, #356]	; (8006fcc <__ieee754_pow+0x3bc>)
 8006e68:	4620      	mov	r0, r4
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	f7f9 fbc4 	bl	80005f8 <__aeabi_dmul>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	a14c      	add	r1, pc, #304	; (adr r1, 8006fa8 <__ieee754_pow+0x398>)
 8006e76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e7a:	f7f9 fa05 	bl	8000288 <__aeabi_dsub>
 8006e7e:	4622      	mov	r2, r4
 8006e80:	462b      	mov	r3, r5
 8006e82:	f7f9 fbb9 	bl	80005f8 <__aeabi_dmul>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	4950      	ldr	r1, [pc, #320]	; (8006fd0 <__ieee754_pow+0x3c0>)
 8006e8e:	f7f9 f9fb 	bl	8000288 <__aeabi_dsub>
 8006e92:	4622      	mov	r2, r4
 8006e94:	462b      	mov	r3, r5
 8006e96:	4680      	mov	r8, r0
 8006e98:	4689      	mov	r9, r1
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	f7f9 fbab 	bl	80005f8 <__aeabi_dmul>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4640      	mov	r0, r8
 8006ea8:	4649      	mov	r1, r9
 8006eaa:	f7f9 fba5 	bl	80005f8 <__aeabi_dmul>
 8006eae:	a340      	add	r3, pc, #256	; (adr r3, 8006fb0 <__ieee754_pow+0x3a0>)
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	f7f9 fba0 	bl	80005f8 <__aeabi_dmul>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ec0:	f7f9 f9e2 	bl	8000288 <__aeabi_dsub>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4604      	mov	r4, r0
 8006eca:	460d      	mov	r5, r1
 8006ecc:	4630      	mov	r0, r6
 8006ece:	4639      	mov	r1, r7
 8006ed0:	f7f9 f9dc 	bl	800028c <__adddf3>
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006eda:	4632      	mov	r2, r6
 8006edc:	463b      	mov	r3, r7
 8006ede:	f7f9 f9d3 	bl	8000288 <__aeabi_dsub>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	4629      	mov	r1, r5
 8006eea:	f7f9 f9cd 	bl	8000288 <__aeabi_dsub>
 8006eee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ef0:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	460f      	mov	r7, r1
 8006efa:	f040 81eb 	bne.w	80072d4 <__ieee754_pow+0x6c4>
 8006efe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006fb8 <__ieee754_pow+0x3a8>
 8006f02:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006f06:	2400      	movs	r4, #0
 8006f08:	4622      	mov	r2, r4
 8006f0a:	462b      	mov	r3, r5
 8006f0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006f14:	f7f9 f9b8 	bl	8000288 <__aeabi_dsub>
 8006f18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f1c:	f7f9 fb6c 	bl	80005f8 <__aeabi_dmul>
 8006f20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f24:	4680      	mov	r8, r0
 8006f26:	4689      	mov	r9, r1
 8006f28:	4630      	mov	r0, r6
 8006f2a:	4639      	mov	r1, r7
 8006f2c:	f7f9 fb64 	bl	80005f8 <__aeabi_dmul>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4640      	mov	r0, r8
 8006f36:	4649      	mov	r1, r9
 8006f38:	f7f9 f9a8 	bl	800028c <__adddf3>
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	462b      	mov	r3, r5
 8006f40:	4680      	mov	r8, r0
 8006f42:	4689      	mov	r9, r1
 8006f44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f48:	f7f9 fb56 	bl	80005f8 <__aeabi_dmul>
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4604      	mov	r4, r0
 8006f50:	460d      	mov	r5, r1
 8006f52:	4602      	mov	r2, r0
 8006f54:	4649      	mov	r1, r9
 8006f56:	4640      	mov	r0, r8
 8006f58:	e9cd 4500 	strd	r4, r5, [sp]
 8006f5c:	f7f9 f996 	bl	800028c <__adddf3>
 8006f60:	4b1c      	ldr	r3, [pc, #112]	; (8006fd4 <__ieee754_pow+0x3c4>)
 8006f62:	4299      	cmp	r1, r3
 8006f64:	4606      	mov	r6, r0
 8006f66:	460f      	mov	r7, r1
 8006f68:	468b      	mov	fp, r1
 8006f6a:	f340 82f7 	ble.w	800755c <__ieee754_pow+0x94c>
 8006f6e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006f72:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006f76:	4303      	orrs	r3, r0
 8006f78:	f000 81ea 	beq.w	8007350 <__ieee754_pow+0x740>
 8006f7c:	a310      	add	r3, pc, #64	; (adr r3, 8006fc0 <__ieee754_pow+0x3b0>)
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f86:	f7f9 fb37 	bl	80005f8 <__aeabi_dmul>
 8006f8a:	a30d      	add	r3, pc, #52	; (adr r3, 8006fc0 <__ieee754_pow+0x3b0>)
 8006f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f90:	e6d5      	b.n	8006d3e <__ieee754_pow+0x12e>
 8006f92:	bf00      	nop
 8006f94:	f3af 8000 	nop.w
 8006f98:	60000000 	.word	0x60000000
 8006f9c:	3ff71547 	.word	0x3ff71547
 8006fa0:	f85ddf44 	.word	0xf85ddf44
 8006fa4:	3e54ae0b 	.word	0x3e54ae0b
 8006fa8:	55555555 	.word	0x55555555
 8006fac:	3fd55555 	.word	0x3fd55555
 8006fb0:	652b82fe 	.word	0x652b82fe
 8006fb4:	3ff71547 	.word	0x3ff71547
 8006fb8:	00000000 	.word	0x00000000
 8006fbc:	bff00000 	.word	0xbff00000
 8006fc0:	8800759c 	.word	0x8800759c
 8006fc4:	7e37e43c 	.word	0x7e37e43c
 8006fc8:	3ff00000 	.word	0x3ff00000
 8006fcc:	3fd00000 	.word	0x3fd00000
 8006fd0:	3fe00000 	.word	0x3fe00000
 8006fd4:	408fffff 	.word	0x408fffff
 8006fd8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006fdc:	f04f 0200 	mov.w	r2, #0
 8006fe0:	da05      	bge.n	8006fee <__ieee754_pow+0x3de>
 8006fe2:	4bd3      	ldr	r3, [pc, #844]	; (8007330 <__ieee754_pow+0x720>)
 8006fe4:	f7f9 fb08 	bl	80005f8 <__aeabi_dmul>
 8006fe8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006fec:	460c      	mov	r4, r1
 8006fee:	1523      	asrs	r3, r4, #20
 8006ff0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006ff4:	4413      	add	r3, r2
 8006ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff8:	4bce      	ldr	r3, [pc, #824]	; (8007334 <__ieee754_pow+0x724>)
 8006ffa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006ffe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007002:	429c      	cmp	r4, r3
 8007004:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007008:	dd08      	ble.n	800701c <__ieee754_pow+0x40c>
 800700a:	4bcb      	ldr	r3, [pc, #812]	; (8007338 <__ieee754_pow+0x728>)
 800700c:	429c      	cmp	r4, r3
 800700e:	f340 815e 	ble.w	80072ce <__ieee754_pow+0x6be>
 8007012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007014:	3301      	adds	r3, #1
 8007016:	9309      	str	r3, [sp, #36]	; 0x24
 8007018:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800701c:	f04f 0a00 	mov.w	sl, #0
 8007020:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007024:	930c      	str	r3, [sp, #48]	; 0x30
 8007026:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007028:	4bc4      	ldr	r3, [pc, #784]	; (800733c <__ieee754_pow+0x72c>)
 800702a:	4413      	add	r3, r2
 800702c:	ed93 7b00 	vldr	d7, [r3]
 8007030:	4629      	mov	r1, r5
 8007032:	ec53 2b17 	vmov	r2, r3, d7
 8007036:	ed8d 7b06 	vstr	d7, [sp, #24]
 800703a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800703e:	f7f9 f923 	bl	8000288 <__aeabi_dsub>
 8007042:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007046:	4606      	mov	r6, r0
 8007048:	460f      	mov	r7, r1
 800704a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800704e:	f7f9 f91d 	bl	800028c <__adddf3>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	2000      	movs	r0, #0
 8007058:	49b9      	ldr	r1, [pc, #740]	; (8007340 <__ieee754_pow+0x730>)
 800705a:	f7f9 fbf7 	bl	800084c <__aeabi_ddiv>
 800705e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4630      	mov	r0, r6
 8007068:	4639      	mov	r1, r7
 800706a:	f7f9 fac5 	bl	80005f8 <__aeabi_dmul>
 800706e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007072:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007076:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800707a:	2300      	movs	r3, #0
 800707c:	9302      	str	r3, [sp, #8]
 800707e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007082:	106d      	asrs	r5, r5, #1
 8007084:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007088:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800708c:	2200      	movs	r2, #0
 800708e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007092:	4640      	mov	r0, r8
 8007094:	4649      	mov	r1, r9
 8007096:	4614      	mov	r4, r2
 8007098:	461d      	mov	r5, r3
 800709a:	f7f9 faad 	bl	80005f8 <__aeabi_dmul>
 800709e:	4602      	mov	r2, r0
 80070a0:	460b      	mov	r3, r1
 80070a2:	4630      	mov	r0, r6
 80070a4:	4639      	mov	r1, r7
 80070a6:	f7f9 f8ef 	bl	8000288 <__aeabi_dsub>
 80070aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070ae:	4606      	mov	r6, r0
 80070b0:	460f      	mov	r7, r1
 80070b2:	4620      	mov	r0, r4
 80070b4:	4629      	mov	r1, r5
 80070b6:	f7f9 f8e7 	bl	8000288 <__aeabi_dsub>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80070c2:	f7f9 f8e1 	bl	8000288 <__aeabi_dsub>
 80070c6:	4642      	mov	r2, r8
 80070c8:	464b      	mov	r3, r9
 80070ca:	f7f9 fa95 	bl	80005f8 <__aeabi_dmul>
 80070ce:	4602      	mov	r2, r0
 80070d0:	460b      	mov	r3, r1
 80070d2:	4630      	mov	r0, r6
 80070d4:	4639      	mov	r1, r7
 80070d6:	f7f9 f8d7 	bl	8000288 <__aeabi_dsub>
 80070da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80070de:	f7f9 fa8b 	bl	80005f8 <__aeabi_dmul>
 80070e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80070ea:	4610      	mov	r0, r2
 80070ec:	4619      	mov	r1, r3
 80070ee:	f7f9 fa83 	bl	80005f8 <__aeabi_dmul>
 80070f2:	a37b      	add	r3, pc, #492	; (adr r3, 80072e0 <__ieee754_pow+0x6d0>)
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	4604      	mov	r4, r0
 80070fa:	460d      	mov	r5, r1
 80070fc:	f7f9 fa7c 	bl	80005f8 <__aeabi_dmul>
 8007100:	a379      	add	r3, pc, #484	; (adr r3, 80072e8 <__ieee754_pow+0x6d8>)
 8007102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007106:	f7f9 f8c1 	bl	800028c <__adddf3>
 800710a:	4622      	mov	r2, r4
 800710c:	462b      	mov	r3, r5
 800710e:	f7f9 fa73 	bl	80005f8 <__aeabi_dmul>
 8007112:	a377      	add	r3, pc, #476	; (adr r3, 80072f0 <__ieee754_pow+0x6e0>)
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f7f9 f8b8 	bl	800028c <__adddf3>
 800711c:	4622      	mov	r2, r4
 800711e:	462b      	mov	r3, r5
 8007120:	f7f9 fa6a 	bl	80005f8 <__aeabi_dmul>
 8007124:	a374      	add	r3, pc, #464	; (adr r3, 80072f8 <__ieee754_pow+0x6e8>)
 8007126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712a:	f7f9 f8af 	bl	800028c <__adddf3>
 800712e:	4622      	mov	r2, r4
 8007130:	462b      	mov	r3, r5
 8007132:	f7f9 fa61 	bl	80005f8 <__aeabi_dmul>
 8007136:	a372      	add	r3, pc, #456	; (adr r3, 8007300 <__ieee754_pow+0x6f0>)
 8007138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713c:	f7f9 f8a6 	bl	800028c <__adddf3>
 8007140:	4622      	mov	r2, r4
 8007142:	462b      	mov	r3, r5
 8007144:	f7f9 fa58 	bl	80005f8 <__aeabi_dmul>
 8007148:	a36f      	add	r3, pc, #444	; (adr r3, 8007308 <__ieee754_pow+0x6f8>)
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	f7f9 f89d 	bl	800028c <__adddf3>
 8007152:	4622      	mov	r2, r4
 8007154:	4606      	mov	r6, r0
 8007156:	460f      	mov	r7, r1
 8007158:	462b      	mov	r3, r5
 800715a:	4620      	mov	r0, r4
 800715c:	4629      	mov	r1, r5
 800715e:	f7f9 fa4b 	bl	80005f8 <__aeabi_dmul>
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	4630      	mov	r0, r6
 8007168:	4639      	mov	r1, r7
 800716a:	f7f9 fa45 	bl	80005f8 <__aeabi_dmul>
 800716e:	4642      	mov	r2, r8
 8007170:	4604      	mov	r4, r0
 8007172:	460d      	mov	r5, r1
 8007174:	464b      	mov	r3, r9
 8007176:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800717a:	f7f9 f887 	bl	800028c <__adddf3>
 800717e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007182:	f7f9 fa39 	bl	80005f8 <__aeabi_dmul>
 8007186:	4622      	mov	r2, r4
 8007188:	462b      	mov	r3, r5
 800718a:	f7f9 f87f 	bl	800028c <__adddf3>
 800718e:	4642      	mov	r2, r8
 8007190:	4606      	mov	r6, r0
 8007192:	460f      	mov	r7, r1
 8007194:	464b      	mov	r3, r9
 8007196:	4640      	mov	r0, r8
 8007198:	4649      	mov	r1, r9
 800719a:	f7f9 fa2d 	bl	80005f8 <__aeabi_dmul>
 800719e:	2200      	movs	r2, #0
 80071a0:	4b68      	ldr	r3, [pc, #416]	; (8007344 <__ieee754_pow+0x734>)
 80071a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80071a6:	f7f9 f871 	bl	800028c <__adddf3>
 80071aa:	4632      	mov	r2, r6
 80071ac:	463b      	mov	r3, r7
 80071ae:	f7f9 f86d 	bl	800028c <__adddf3>
 80071b2:	9802      	ldr	r0, [sp, #8]
 80071b4:	460d      	mov	r5, r1
 80071b6:	4604      	mov	r4, r0
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	4640      	mov	r0, r8
 80071be:	4649      	mov	r1, r9
 80071c0:	f7f9 fa1a 	bl	80005f8 <__aeabi_dmul>
 80071c4:	2200      	movs	r2, #0
 80071c6:	4680      	mov	r8, r0
 80071c8:	4689      	mov	r9, r1
 80071ca:	4b5e      	ldr	r3, [pc, #376]	; (8007344 <__ieee754_pow+0x734>)
 80071cc:	4620      	mov	r0, r4
 80071ce:	4629      	mov	r1, r5
 80071d0:	f7f9 f85a 	bl	8000288 <__aeabi_dsub>
 80071d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80071d8:	f7f9 f856 	bl	8000288 <__aeabi_dsub>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	4630      	mov	r0, r6
 80071e2:	4639      	mov	r1, r7
 80071e4:	f7f9 f850 	bl	8000288 <__aeabi_dsub>
 80071e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071ec:	f7f9 fa04 	bl	80005f8 <__aeabi_dmul>
 80071f0:	4622      	mov	r2, r4
 80071f2:	4606      	mov	r6, r0
 80071f4:	460f      	mov	r7, r1
 80071f6:	462b      	mov	r3, r5
 80071f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071fc:	f7f9 f9fc 	bl	80005f8 <__aeabi_dmul>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4630      	mov	r0, r6
 8007206:	4639      	mov	r1, r7
 8007208:	f7f9 f840 	bl	800028c <__adddf3>
 800720c:	4606      	mov	r6, r0
 800720e:	460f      	mov	r7, r1
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	4640      	mov	r0, r8
 8007216:	4649      	mov	r1, r9
 8007218:	f7f9 f838 	bl	800028c <__adddf3>
 800721c:	9802      	ldr	r0, [sp, #8]
 800721e:	a33c      	add	r3, pc, #240	; (adr r3, 8007310 <__ieee754_pow+0x700>)
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	4604      	mov	r4, r0
 8007226:	460d      	mov	r5, r1
 8007228:	f7f9 f9e6 	bl	80005f8 <__aeabi_dmul>
 800722c:	4642      	mov	r2, r8
 800722e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007232:	464b      	mov	r3, r9
 8007234:	4620      	mov	r0, r4
 8007236:	4629      	mov	r1, r5
 8007238:	f7f9 f826 	bl	8000288 <__aeabi_dsub>
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	4630      	mov	r0, r6
 8007242:	4639      	mov	r1, r7
 8007244:	f7f9 f820 	bl	8000288 <__aeabi_dsub>
 8007248:	a333      	add	r3, pc, #204	; (adr r3, 8007318 <__ieee754_pow+0x708>)
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	f7f9 f9d3 	bl	80005f8 <__aeabi_dmul>
 8007252:	a333      	add	r3, pc, #204	; (adr r3, 8007320 <__ieee754_pow+0x710>)
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	4606      	mov	r6, r0
 800725a:	460f      	mov	r7, r1
 800725c:	4620      	mov	r0, r4
 800725e:	4629      	mov	r1, r5
 8007260:	f7f9 f9ca 	bl	80005f8 <__aeabi_dmul>
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	4630      	mov	r0, r6
 800726a:	4639      	mov	r1, r7
 800726c:	f7f9 f80e 	bl	800028c <__adddf3>
 8007270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007272:	4b35      	ldr	r3, [pc, #212]	; (8007348 <__ieee754_pow+0x738>)
 8007274:	4413      	add	r3, r2
 8007276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727a:	f7f9 f807 	bl	800028c <__adddf3>
 800727e:	4604      	mov	r4, r0
 8007280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007282:	460d      	mov	r5, r1
 8007284:	f7f9 f94e 	bl	8000524 <__aeabi_i2d>
 8007288:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800728a:	4b30      	ldr	r3, [pc, #192]	; (800734c <__ieee754_pow+0x73c>)
 800728c:	4413      	add	r3, r2
 800728e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007292:	4606      	mov	r6, r0
 8007294:	460f      	mov	r7, r1
 8007296:	4622      	mov	r2, r4
 8007298:	462b      	mov	r3, r5
 800729a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800729e:	f7f8 fff5 	bl	800028c <__adddf3>
 80072a2:	4642      	mov	r2, r8
 80072a4:	464b      	mov	r3, r9
 80072a6:	f7f8 fff1 	bl	800028c <__adddf3>
 80072aa:	4632      	mov	r2, r6
 80072ac:	463b      	mov	r3, r7
 80072ae:	f7f8 ffed 	bl	800028c <__adddf3>
 80072b2:	9802      	ldr	r0, [sp, #8]
 80072b4:	4632      	mov	r2, r6
 80072b6:	463b      	mov	r3, r7
 80072b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072bc:	f7f8 ffe4 	bl	8000288 <__aeabi_dsub>
 80072c0:	4642      	mov	r2, r8
 80072c2:	464b      	mov	r3, r9
 80072c4:	f7f8 ffe0 	bl	8000288 <__aeabi_dsub>
 80072c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072cc:	e607      	b.n	8006ede <__ieee754_pow+0x2ce>
 80072ce:	f04f 0a01 	mov.w	sl, #1
 80072d2:	e6a5      	b.n	8007020 <__ieee754_pow+0x410>
 80072d4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007328 <__ieee754_pow+0x718>
 80072d8:	e613      	b.n	8006f02 <__ieee754_pow+0x2f2>
 80072da:	bf00      	nop
 80072dc:	f3af 8000 	nop.w
 80072e0:	4a454eef 	.word	0x4a454eef
 80072e4:	3fca7e28 	.word	0x3fca7e28
 80072e8:	93c9db65 	.word	0x93c9db65
 80072ec:	3fcd864a 	.word	0x3fcd864a
 80072f0:	a91d4101 	.word	0xa91d4101
 80072f4:	3fd17460 	.word	0x3fd17460
 80072f8:	518f264d 	.word	0x518f264d
 80072fc:	3fd55555 	.word	0x3fd55555
 8007300:	db6fabff 	.word	0xdb6fabff
 8007304:	3fdb6db6 	.word	0x3fdb6db6
 8007308:	33333303 	.word	0x33333303
 800730c:	3fe33333 	.word	0x3fe33333
 8007310:	e0000000 	.word	0xe0000000
 8007314:	3feec709 	.word	0x3feec709
 8007318:	dc3a03fd 	.word	0xdc3a03fd
 800731c:	3feec709 	.word	0x3feec709
 8007320:	145b01f5 	.word	0x145b01f5
 8007324:	be3e2fe0 	.word	0xbe3e2fe0
 8007328:	00000000 	.word	0x00000000
 800732c:	3ff00000 	.word	0x3ff00000
 8007330:	43400000 	.word	0x43400000
 8007334:	0003988e 	.word	0x0003988e
 8007338:	000bb679 	.word	0x000bb679
 800733c:	08007fd8 	.word	0x08007fd8
 8007340:	3ff00000 	.word	0x3ff00000
 8007344:	40080000 	.word	0x40080000
 8007348:	08007ff8 	.word	0x08007ff8
 800734c:	08007fe8 	.word	0x08007fe8
 8007350:	a3b4      	add	r3, pc, #720	; (adr r3, 8007624 <__ieee754_pow+0xa14>)
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	4640      	mov	r0, r8
 8007358:	4649      	mov	r1, r9
 800735a:	f7f8 ff97 	bl	800028c <__adddf3>
 800735e:	4622      	mov	r2, r4
 8007360:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007364:	462b      	mov	r3, r5
 8007366:	4630      	mov	r0, r6
 8007368:	4639      	mov	r1, r7
 800736a:	f7f8 ff8d 	bl	8000288 <__aeabi_dsub>
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007376:	f7f9 fbcf 	bl	8000b18 <__aeabi_dcmpgt>
 800737a:	2800      	cmp	r0, #0
 800737c:	f47f adfe 	bne.w	8006f7c <__ieee754_pow+0x36c>
 8007380:	4aa3      	ldr	r2, [pc, #652]	; (8007610 <__ieee754_pow+0xa00>)
 8007382:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007386:	4293      	cmp	r3, r2
 8007388:	f340 810a 	ble.w	80075a0 <__ieee754_pow+0x990>
 800738c:	151b      	asrs	r3, r3, #20
 800738e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007392:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007396:	fa4a f303 	asr.w	r3, sl, r3
 800739a:	445b      	add	r3, fp
 800739c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80073a0:	4e9c      	ldr	r6, [pc, #624]	; (8007614 <__ieee754_pow+0xa04>)
 80073a2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80073a6:	4116      	asrs	r6, r2
 80073a8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80073ac:	2000      	movs	r0, #0
 80073ae:	ea23 0106 	bic.w	r1, r3, r6
 80073b2:	f1c2 0214 	rsb	r2, r2, #20
 80073b6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80073ba:	fa4a fa02 	asr.w	sl, sl, r2
 80073be:	f1bb 0f00 	cmp.w	fp, #0
 80073c2:	4602      	mov	r2, r0
 80073c4:	460b      	mov	r3, r1
 80073c6:	4620      	mov	r0, r4
 80073c8:	4629      	mov	r1, r5
 80073ca:	bfb8      	it	lt
 80073cc:	f1ca 0a00 	rsblt	sl, sl, #0
 80073d0:	f7f8 ff5a 	bl	8000288 <__aeabi_dsub>
 80073d4:	e9cd 0100 	strd	r0, r1, [sp]
 80073d8:	4642      	mov	r2, r8
 80073da:	464b      	mov	r3, r9
 80073dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073e0:	f7f8 ff54 	bl	800028c <__adddf3>
 80073e4:	2000      	movs	r0, #0
 80073e6:	a378      	add	r3, pc, #480	; (adr r3, 80075c8 <__ieee754_pow+0x9b8>)
 80073e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ec:	4604      	mov	r4, r0
 80073ee:	460d      	mov	r5, r1
 80073f0:	f7f9 f902 	bl	80005f8 <__aeabi_dmul>
 80073f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073f8:	4606      	mov	r6, r0
 80073fa:	460f      	mov	r7, r1
 80073fc:	4620      	mov	r0, r4
 80073fe:	4629      	mov	r1, r5
 8007400:	f7f8 ff42 	bl	8000288 <__aeabi_dsub>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	4640      	mov	r0, r8
 800740a:	4649      	mov	r1, r9
 800740c:	f7f8 ff3c 	bl	8000288 <__aeabi_dsub>
 8007410:	a36f      	add	r3, pc, #444	; (adr r3, 80075d0 <__ieee754_pow+0x9c0>)
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	f7f9 f8ef 	bl	80005f8 <__aeabi_dmul>
 800741a:	a36f      	add	r3, pc, #444	; (adr r3, 80075d8 <__ieee754_pow+0x9c8>)
 800741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007420:	4680      	mov	r8, r0
 8007422:	4689      	mov	r9, r1
 8007424:	4620      	mov	r0, r4
 8007426:	4629      	mov	r1, r5
 8007428:	f7f9 f8e6 	bl	80005f8 <__aeabi_dmul>
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	4640      	mov	r0, r8
 8007432:	4649      	mov	r1, r9
 8007434:	f7f8 ff2a 	bl	800028c <__adddf3>
 8007438:	4604      	mov	r4, r0
 800743a:	460d      	mov	r5, r1
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	4630      	mov	r0, r6
 8007442:	4639      	mov	r1, r7
 8007444:	f7f8 ff22 	bl	800028c <__adddf3>
 8007448:	4632      	mov	r2, r6
 800744a:	463b      	mov	r3, r7
 800744c:	4680      	mov	r8, r0
 800744e:	4689      	mov	r9, r1
 8007450:	f7f8 ff1a 	bl	8000288 <__aeabi_dsub>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	4620      	mov	r0, r4
 800745a:	4629      	mov	r1, r5
 800745c:	f7f8 ff14 	bl	8000288 <__aeabi_dsub>
 8007460:	4642      	mov	r2, r8
 8007462:	4606      	mov	r6, r0
 8007464:	460f      	mov	r7, r1
 8007466:	464b      	mov	r3, r9
 8007468:	4640      	mov	r0, r8
 800746a:	4649      	mov	r1, r9
 800746c:	f7f9 f8c4 	bl	80005f8 <__aeabi_dmul>
 8007470:	a35b      	add	r3, pc, #364	; (adr r3, 80075e0 <__ieee754_pow+0x9d0>)
 8007472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007476:	4604      	mov	r4, r0
 8007478:	460d      	mov	r5, r1
 800747a:	f7f9 f8bd 	bl	80005f8 <__aeabi_dmul>
 800747e:	a35a      	add	r3, pc, #360	; (adr r3, 80075e8 <__ieee754_pow+0x9d8>)
 8007480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007484:	f7f8 ff00 	bl	8000288 <__aeabi_dsub>
 8007488:	4622      	mov	r2, r4
 800748a:	462b      	mov	r3, r5
 800748c:	f7f9 f8b4 	bl	80005f8 <__aeabi_dmul>
 8007490:	a357      	add	r3, pc, #348	; (adr r3, 80075f0 <__ieee754_pow+0x9e0>)
 8007492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007496:	f7f8 fef9 	bl	800028c <__adddf3>
 800749a:	4622      	mov	r2, r4
 800749c:	462b      	mov	r3, r5
 800749e:	f7f9 f8ab 	bl	80005f8 <__aeabi_dmul>
 80074a2:	a355      	add	r3, pc, #340	; (adr r3, 80075f8 <__ieee754_pow+0x9e8>)
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	f7f8 feee 	bl	8000288 <__aeabi_dsub>
 80074ac:	4622      	mov	r2, r4
 80074ae:	462b      	mov	r3, r5
 80074b0:	f7f9 f8a2 	bl	80005f8 <__aeabi_dmul>
 80074b4:	a352      	add	r3, pc, #328	; (adr r3, 8007600 <__ieee754_pow+0x9f0>)
 80074b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ba:	f7f8 fee7 	bl	800028c <__adddf3>
 80074be:	4622      	mov	r2, r4
 80074c0:	462b      	mov	r3, r5
 80074c2:	f7f9 f899 	bl	80005f8 <__aeabi_dmul>
 80074c6:	4602      	mov	r2, r0
 80074c8:	460b      	mov	r3, r1
 80074ca:	4640      	mov	r0, r8
 80074cc:	4649      	mov	r1, r9
 80074ce:	f7f8 fedb 	bl	8000288 <__aeabi_dsub>
 80074d2:	4604      	mov	r4, r0
 80074d4:	460d      	mov	r5, r1
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4640      	mov	r0, r8
 80074dc:	4649      	mov	r1, r9
 80074de:	f7f9 f88b 	bl	80005f8 <__aeabi_dmul>
 80074e2:	2200      	movs	r2, #0
 80074e4:	e9cd 0100 	strd	r0, r1, [sp]
 80074e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80074ec:	4620      	mov	r0, r4
 80074ee:	4629      	mov	r1, r5
 80074f0:	f7f8 feca 	bl	8000288 <__aeabi_dsub>
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074fc:	f7f9 f9a6 	bl	800084c <__aeabi_ddiv>
 8007500:	4632      	mov	r2, r6
 8007502:	4604      	mov	r4, r0
 8007504:	460d      	mov	r5, r1
 8007506:	463b      	mov	r3, r7
 8007508:	4640      	mov	r0, r8
 800750a:	4649      	mov	r1, r9
 800750c:	f7f9 f874 	bl	80005f8 <__aeabi_dmul>
 8007510:	4632      	mov	r2, r6
 8007512:	463b      	mov	r3, r7
 8007514:	f7f8 feba 	bl	800028c <__adddf3>
 8007518:	4602      	mov	r2, r0
 800751a:	460b      	mov	r3, r1
 800751c:	4620      	mov	r0, r4
 800751e:	4629      	mov	r1, r5
 8007520:	f7f8 feb2 	bl	8000288 <__aeabi_dsub>
 8007524:	4642      	mov	r2, r8
 8007526:	464b      	mov	r3, r9
 8007528:	f7f8 feae 	bl	8000288 <__aeabi_dsub>
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	2000      	movs	r0, #0
 8007532:	4939      	ldr	r1, [pc, #228]	; (8007618 <__ieee754_pow+0xa08>)
 8007534:	f7f8 fea8 	bl	8000288 <__aeabi_dsub>
 8007538:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800753c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	da2f      	bge.n	80075a6 <__ieee754_pow+0x996>
 8007546:	4650      	mov	r0, sl
 8007548:	ec43 2b10 	vmov	d0, r2, r3
 800754c:	f000 fb60 	bl	8007c10 <scalbn>
 8007550:	ec51 0b10 	vmov	r0, r1, d0
 8007554:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007558:	f7ff bbf1 	b.w	8006d3e <__ieee754_pow+0x12e>
 800755c:	4b2f      	ldr	r3, [pc, #188]	; (800761c <__ieee754_pow+0xa0c>)
 800755e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007562:	429e      	cmp	r6, r3
 8007564:	f77f af0c 	ble.w	8007380 <__ieee754_pow+0x770>
 8007568:	4b2d      	ldr	r3, [pc, #180]	; (8007620 <__ieee754_pow+0xa10>)
 800756a:	440b      	add	r3, r1
 800756c:	4303      	orrs	r3, r0
 800756e:	d00b      	beq.n	8007588 <__ieee754_pow+0x978>
 8007570:	a325      	add	r3, pc, #148	; (adr r3, 8007608 <__ieee754_pow+0x9f8>)
 8007572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800757a:	f7f9 f83d 	bl	80005f8 <__aeabi_dmul>
 800757e:	a322      	add	r3, pc, #136	; (adr r3, 8007608 <__ieee754_pow+0x9f8>)
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	f7ff bbdb 	b.w	8006d3e <__ieee754_pow+0x12e>
 8007588:	4622      	mov	r2, r4
 800758a:	462b      	mov	r3, r5
 800758c:	f7f8 fe7c 	bl	8000288 <__aeabi_dsub>
 8007590:	4642      	mov	r2, r8
 8007592:	464b      	mov	r3, r9
 8007594:	f7f9 fab6 	bl	8000b04 <__aeabi_dcmpge>
 8007598:	2800      	cmp	r0, #0
 800759a:	f43f aef1 	beq.w	8007380 <__ieee754_pow+0x770>
 800759e:	e7e7      	b.n	8007570 <__ieee754_pow+0x960>
 80075a0:	f04f 0a00 	mov.w	sl, #0
 80075a4:	e718      	b.n	80073d8 <__ieee754_pow+0x7c8>
 80075a6:	4621      	mov	r1, r4
 80075a8:	e7d4      	b.n	8007554 <__ieee754_pow+0x944>
 80075aa:	2000      	movs	r0, #0
 80075ac:	491a      	ldr	r1, [pc, #104]	; (8007618 <__ieee754_pow+0xa08>)
 80075ae:	f7ff bb8f 	b.w	8006cd0 <__ieee754_pow+0xc0>
 80075b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075b6:	f7ff bb8b 	b.w	8006cd0 <__ieee754_pow+0xc0>
 80075ba:	4630      	mov	r0, r6
 80075bc:	4639      	mov	r1, r7
 80075be:	f7ff bb87 	b.w	8006cd0 <__ieee754_pow+0xc0>
 80075c2:	4693      	mov	fp, r2
 80075c4:	f7ff bb98 	b.w	8006cf8 <__ieee754_pow+0xe8>
 80075c8:	00000000 	.word	0x00000000
 80075cc:	3fe62e43 	.word	0x3fe62e43
 80075d0:	fefa39ef 	.word	0xfefa39ef
 80075d4:	3fe62e42 	.word	0x3fe62e42
 80075d8:	0ca86c39 	.word	0x0ca86c39
 80075dc:	be205c61 	.word	0xbe205c61
 80075e0:	72bea4d0 	.word	0x72bea4d0
 80075e4:	3e663769 	.word	0x3e663769
 80075e8:	c5d26bf1 	.word	0xc5d26bf1
 80075ec:	3ebbbd41 	.word	0x3ebbbd41
 80075f0:	af25de2c 	.word	0xaf25de2c
 80075f4:	3f11566a 	.word	0x3f11566a
 80075f8:	16bebd93 	.word	0x16bebd93
 80075fc:	3f66c16c 	.word	0x3f66c16c
 8007600:	5555553e 	.word	0x5555553e
 8007604:	3fc55555 	.word	0x3fc55555
 8007608:	c2f8f359 	.word	0xc2f8f359
 800760c:	01a56e1f 	.word	0x01a56e1f
 8007610:	3fe00000 	.word	0x3fe00000
 8007614:	000fffff 	.word	0x000fffff
 8007618:	3ff00000 	.word	0x3ff00000
 800761c:	4090cbff 	.word	0x4090cbff
 8007620:	3f6f3400 	.word	0x3f6f3400
 8007624:	652b82fe 	.word	0x652b82fe
 8007628:	3c971547 	.word	0x3c971547

0800762c <__ieee754_sqrt>:
 800762c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007630:	4955      	ldr	r1, [pc, #340]	; (8007788 <__ieee754_sqrt+0x15c>)
 8007632:	ec55 4b10 	vmov	r4, r5, d0
 8007636:	43a9      	bics	r1, r5
 8007638:	462b      	mov	r3, r5
 800763a:	462a      	mov	r2, r5
 800763c:	d112      	bne.n	8007664 <__ieee754_sqrt+0x38>
 800763e:	ee10 2a10 	vmov	r2, s0
 8007642:	ee10 0a10 	vmov	r0, s0
 8007646:	4629      	mov	r1, r5
 8007648:	f7f8 ffd6 	bl	80005f8 <__aeabi_dmul>
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	4620      	mov	r0, r4
 8007652:	4629      	mov	r1, r5
 8007654:	f7f8 fe1a 	bl	800028c <__adddf3>
 8007658:	4604      	mov	r4, r0
 800765a:	460d      	mov	r5, r1
 800765c:	ec45 4b10 	vmov	d0, r4, r5
 8007660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007664:	2d00      	cmp	r5, #0
 8007666:	ee10 0a10 	vmov	r0, s0
 800766a:	4621      	mov	r1, r4
 800766c:	dc0f      	bgt.n	800768e <__ieee754_sqrt+0x62>
 800766e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007672:	4330      	orrs	r0, r6
 8007674:	d0f2      	beq.n	800765c <__ieee754_sqrt+0x30>
 8007676:	b155      	cbz	r5, 800768e <__ieee754_sqrt+0x62>
 8007678:	ee10 2a10 	vmov	r2, s0
 800767c:	4620      	mov	r0, r4
 800767e:	4629      	mov	r1, r5
 8007680:	f7f8 fe02 	bl	8000288 <__aeabi_dsub>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	f7f9 f8e0 	bl	800084c <__aeabi_ddiv>
 800768c:	e7e4      	b.n	8007658 <__ieee754_sqrt+0x2c>
 800768e:	151b      	asrs	r3, r3, #20
 8007690:	d073      	beq.n	800777a <__ieee754_sqrt+0x14e>
 8007692:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007696:	07dd      	lsls	r5, r3, #31
 8007698:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800769c:	bf48      	it	mi
 800769e:	0fc8      	lsrmi	r0, r1, #31
 80076a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80076a4:	bf44      	itt	mi
 80076a6:	0049      	lslmi	r1, r1, #1
 80076a8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80076ac:	2500      	movs	r5, #0
 80076ae:	1058      	asrs	r0, r3, #1
 80076b0:	0fcb      	lsrs	r3, r1, #31
 80076b2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80076b6:	0049      	lsls	r1, r1, #1
 80076b8:	2316      	movs	r3, #22
 80076ba:	462c      	mov	r4, r5
 80076bc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80076c0:	19a7      	adds	r7, r4, r6
 80076c2:	4297      	cmp	r7, r2
 80076c4:	bfde      	ittt	le
 80076c6:	19bc      	addle	r4, r7, r6
 80076c8:	1bd2      	suble	r2, r2, r7
 80076ca:	19ad      	addle	r5, r5, r6
 80076cc:	0fcf      	lsrs	r7, r1, #31
 80076ce:	3b01      	subs	r3, #1
 80076d0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80076d4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80076d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80076dc:	d1f0      	bne.n	80076c0 <__ieee754_sqrt+0x94>
 80076de:	f04f 0c20 	mov.w	ip, #32
 80076e2:	469e      	mov	lr, r3
 80076e4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80076e8:	42a2      	cmp	r2, r4
 80076ea:	eb06 070e 	add.w	r7, r6, lr
 80076ee:	dc02      	bgt.n	80076f6 <__ieee754_sqrt+0xca>
 80076f0:	d112      	bne.n	8007718 <__ieee754_sqrt+0xec>
 80076f2:	428f      	cmp	r7, r1
 80076f4:	d810      	bhi.n	8007718 <__ieee754_sqrt+0xec>
 80076f6:	2f00      	cmp	r7, #0
 80076f8:	eb07 0e06 	add.w	lr, r7, r6
 80076fc:	da42      	bge.n	8007784 <__ieee754_sqrt+0x158>
 80076fe:	f1be 0f00 	cmp.w	lr, #0
 8007702:	db3f      	blt.n	8007784 <__ieee754_sqrt+0x158>
 8007704:	f104 0801 	add.w	r8, r4, #1
 8007708:	1b12      	subs	r2, r2, r4
 800770a:	428f      	cmp	r7, r1
 800770c:	bf88      	it	hi
 800770e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007712:	1bc9      	subs	r1, r1, r7
 8007714:	4433      	add	r3, r6
 8007716:	4644      	mov	r4, r8
 8007718:	0052      	lsls	r2, r2, #1
 800771a:	f1bc 0c01 	subs.w	ip, ip, #1
 800771e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007722:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007726:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800772a:	d1dd      	bne.n	80076e8 <__ieee754_sqrt+0xbc>
 800772c:	430a      	orrs	r2, r1
 800772e:	d006      	beq.n	800773e <__ieee754_sqrt+0x112>
 8007730:	1c5c      	adds	r4, r3, #1
 8007732:	bf13      	iteet	ne
 8007734:	3301      	addne	r3, #1
 8007736:	3501      	addeq	r5, #1
 8007738:	4663      	moveq	r3, ip
 800773a:	f023 0301 	bicne.w	r3, r3, #1
 800773e:	106a      	asrs	r2, r5, #1
 8007740:	085b      	lsrs	r3, r3, #1
 8007742:	07e9      	lsls	r1, r5, #31
 8007744:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007748:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800774c:	bf48      	it	mi
 800774e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007752:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007756:	461c      	mov	r4, r3
 8007758:	e780      	b.n	800765c <__ieee754_sqrt+0x30>
 800775a:	0aca      	lsrs	r2, r1, #11
 800775c:	3815      	subs	r0, #21
 800775e:	0549      	lsls	r1, r1, #21
 8007760:	2a00      	cmp	r2, #0
 8007762:	d0fa      	beq.n	800775a <__ieee754_sqrt+0x12e>
 8007764:	02d6      	lsls	r6, r2, #11
 8007766:	d50a      	bpl.n	800777e <__ieee754_sqrt+0x152>
 8007768:	f1c3 0420 	rsb	r4, r3, #32
 800776c:	fa21 f404 	lsr.w	r4, r1, r4
 8007770:	1e5d      	subs	r5, r3, #1
 8007772:	4099      	lsls	r1, r3
 8007774:	4322      	orrs	r2, r4
 8007776:	1b43      	subs	r3, r0, r5
 8007778:	e78b      	b.n	8007692 <__ieee754_sqrt+0x66>
 800777a:	4618      	mov	r0, r3
 800777c:	e7f0      	b.n	8007760 <__ieee754_sqrt+0x134>
 800777e:	0052      	lsls	r2, r2, #1
 8007780:	3301      	adds	r3, #1
 8007782:	e7ef      	b.n	8007764 <__ieee754_sqrt+0x138>
 8007784:	46a0      	mov	r8, r4
 8007786:	e7bf      	b.n	8007708 <__ieee754_sqrt+0xdc>
 8007788:	7ff00000 	.word	0x7ff00000
 800778c:	00000000 	.word	0x00000000

08007790 <atan>:
 8007790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007794:	ec55 4b10 	vmov	r4, r5, d0
 8007798:	4bc3      	ldr	r3, [pc, #780]	; (8007aa8 <atan+0x318>)
 800779a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800779e:	429e      	cmp	r6, r3
 80077a0:	46ab      	mov	fp, r5
 80077a2:	dd18      	ble.n	80077d6 <atan+0x46>
 80077a4:	4bc1      	ldr	r3, [pc, #772]	; (8007aac <atan+0x31c>)
 80077a6:	429e      	cmp	r6, r3
 80077a8:	dc01      	bgt.n	80077ae <atan+0x1e>
 80077aa:	d109      	bne.n	80077c0 <atan+0x30>
 80077ac:	b144      	cbz	r4, 80077c0 <atan+0x30>
 80077ae:	4622      	mov	r2, r4
 80077b0:	462b      	mov	r3, r5
 80077b2:	4620      	mov	r0, r4
 80077b4:	4629      	mov	r1, r5
 80077b6:	f7f8 fd69 	bl	800028c <__adddf3>
 80077ba:	4604      	mov	r4, r0
 80077bc:	460d      	mov	r5, r1
 80077be:	e006      	b.n	80077ce <atan+0x3e>
 80077c0:	f1bb 0f00 	cmp.w	fp, #0
 80077c4:	f340 8131 	ble.w	8007a2a <atan+0x29a>
 80077c8:	a59b      	add	r5, pc, #620	; (adr r5, 8007a38 <atan+0x2a8>)
 80077ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80077ce:	ec45 4b10 	vmov	d0, r4, r5
 80077d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d6:	4bb6      	ldr	r3, [pc, #728]	; (8007ab0 <atan+0x320>)
 80077d8:	429e      	cmp	r6, r3
 80077da:	dc14      	bgt.n	8007806 <atan+0x76>
 80077dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80077e0:	429e      	cmp	r6, r3
 80077e2:	dc0d      	bgt.n	8007800 <atan+0x70>
 80077e4:	a396      	add	r3, pc, #600	; (adr r3, 8007a40 <atan+0x2b0>)
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	ee10 0a10 	vmov	r0, s0
 80077ee:	4629      	mov	r1, r5
 80077f0:	f7f8 fd4c 	bl	800028c <__adddf3>
 80077f4:	2200      	movs	r2, #0
 80077f6:	4baf      	ldr	r3, [pc, #700]	; (8007ab4 <atan+0x324>)
 80077f8:	f7f9 f98e 	bl	8000b18 <__aeabi_dcmpgt>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d1e6      	bne.n	80077ce <atan+0x3e>
 8007800:	f04f 3aff 	mov.w	sl, #4294967295
 8007804:	e02b      	b.n	800785e <atan+0xce>
 8007806:	f000 f963 	bl	8007ad0 <fabs>
 800780a:	4bab      	ldr	r3, [pc, #684]	; (8007ab8 <atan+0x328>)
 800780c:	429e      	cmp	r6, r3
 800780e:	ec55 4b10 	vmov	r4, r5, d0
 8007812:	f300 80bf 	bgt.w	8007994 <atan+0x204>
 8007816:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800781a:	429e      	cmp	r6, r3
 800781c:	f300 80a0 	bgt.w	8007960 <atan+0x1d0>
 8007820:	ee10 2a10 	vmov	r2, s0
 8007824:	ee10 0a10 	vmov	r0, s0
 8007828:	462b      	mov	r3, r5
 800782a:	4629      	mov	r1, r5
 800782c:	f7f8 fd2e 	bl	800028c <__adddf3>
 8007830:	2200      	movs	r2, #0
 8007832:	4ba0      	ldr	r3, [pc, #640]	; (8007ab4 <atan+0x324>)
 8007834:	f7f8 fd28 	bl	8000288 <__aeabi_dsub>
 8007838:	2200      	movs	r2, #0
 800783a:	4606      	mov	r6, r0
 800783c:	460f      	mov	r7, r1
 800783e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007842:	4620      	mov	r0, r4
 8007844:	4629      	mov	r1, r5
 8007846:	f7f8 fd21 	bl	800028c <__adddf3>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	4630      	mov	r0, r6
 8007850:	4639      	mov	r1, r7
 8007852:	f7f8 fffb 	bl	800084c <__aeabi_ddiv>
 8007856:	f04f 0a00 	mov.w	sl, #0
 800785a:	4604      	mov	r4, r0
 800785c:	460d      	mov	r5, r1
 800785e:	4622      	mov	r2, r4
 8007860:	462b      	mov	r3, r5
 8007862:	4620      	mov	r0, r4
 8007864:	4629      	mov	r1, r5
 8007866:	f7f8 fec7 	bl	80005f8 <__aeabi_dmul>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	4680      	mov	r8, r0
 8007870:	4689      	mov	r9, r1
 8007872:	f7f8 fec1 	bl	80005f8 <__aeabi_dmul>
 8007876:	a374      	add	r3, pc, #464	; (adr r3, 8007a48 <atan+0x2b8>)
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	4606      	mov	r6, r0
 800787e:	460f      	mov	r7, r1
 8007880:	f7f8 feba 	bl	80005f8 <__aeabi_dmul>
 8007884:	a372      	add	r3, pc, #456	; (adr r3, 8007a50 <atan+0x2c0>)
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	f7f8 fcff 	bl	800028c <__adddf3>
 800788e:	4632      	mov	r2, r6
 8007890:	463b      	mov	r3, r7
 8007892:	f7f8 feb1 	bl	80005f8 <__aeabi_dmul>
 8007896:	a370      	add	r3, pc, #448	; (adr r3, 8007a58 <atan+0x2c8>)
 8007898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789c:	f7f8 fcf6 	bl	800028c <__adddf3>
 80078a0:	4632      	mov	r2, r6
 80078a2:	463b      	mov	r3, r7
 80078a4:	f7f8 fea8 	bl	80005f8 <__aeabi_dmul>
 80078a8:	a36d      	add	r3, pc, #436	; (adr r3, 8007a60 <atan+0x2d0>)
 80078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ae:	f7f8 fced 	bl	800028c <__adddf3>
 80078b2:	4632      	mov	r2, r6
 80078b4:	463b      	mov	r3, r7
 80078b6:	f7f8 fe9f 	bl	80005f8 <__aeabi_dmul>
 80078ba:	a36b      	add	r3, pc, #428	; (adr r3, 8007a68 <atan+0x2d8>)
 80078bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c0:	f7f8 fce4 	bl	800028c <__adddf3>
 80078c4:	4632      	mov	r2, r6
 80078c6:	463b      	mov	r3, r7
 80078c8:	f7f8 fe96 	bl	80005f8 <__aeabi_dmul>
 80078cc:	a368      	add	r3, pc, #416	; (adr r3, 8007a70 <atan+0x2e0>)
 80078ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d2:	f7f8 fcdb 	bl	800028c <__adddf3>
 80078d6:	4642      	mov	r2, r8
 80078d8:	464b      	mov	r3, r9
 80078da:	f7f8 fe8d 	bl	80005f8 <__aeabi_dmul>
 80078de:	a366      	add	r3, pc, #408	; (adr r3, 8007a78 <atan+0x2e8>)
 80078e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e4:	4680      	mov	r8, r0
 80078e6:	4689      	mov	r9, r1
 80078e8:	4630      	mov	r0, r6
 80078ea:	4639      	mov	r1, r7
 80078ec:	f7f8 fe84 	bl	80005f8 <__aeabi_dmul>
 80078f0:	a363      	add	r3, pc, #396	; (adr r3, 8007a80 <atan+0x2f0>)
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	f7f8 fcc7 	bl	8000288 <__aeabi_dsub>
 80078fa:	4632      	mov	r2, r6
 80078fc:	463b      	mov	r3, r7
 80078fe:	f7f8 fe7b 	bl	80005f8 <__aeabi_dmul>
 8007902:	a361      	add	r3, pc, #388	; (adr r3, 8007a88 <atan+0x2f8>)
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	f7f8 fcbe 	bl	8000288 <__aeabi_dsub>
 800790c:	4632      	mov	r2, r6
 800790e:	463b      	mov	r3, r7
 8007910:	f7f8 fe72 	bl	80005f8 <__aeabi_dmul>
 8007914:	a35e      	add	r3, pc, #376	; (adr r3, 8007a90 <atan+0x300>)
 8007916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791a:	f7f8 fcb5 	bl	8000288 <__aeabi_dsub>
 800791e:	4632      	mov	r2, r6
 8007920:	463b      	mov	r3, r7
 8007922:	f7f8 fe69 	bl	80005f8 <__aeabi_dmul>
 8007926:	a35c      	add	r3, pc, #368	; (adr r3, 8007a98 <atan+0x308>)
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	f7f8 fcac 	bl	8000288 <__aeabi_dsub>
 8007930:	4632      	mov	r2, r6
 8007932:	463b      	mov	r3, r7
 8007934:	f7f8 fe60 	bl	80005f8 <__aeabi_dmul>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	4640      	mov	r0, r8
 800793e:	4649      	mov	r1, r9
 8007940:	f7f8 fca4 	bl	800028c <__adddf3>
 8007944:	4622      	mov	r2, r4
 8007946:	462b      	mov	r3, r5
 8007948:	f7f8 fe56 	bl	80005f8 <__aeabi_dmul>
 800794c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	d14b      	bne.n	80079ee <atan+0x25e>
 8007956:	4620      	mov	r0, r4
 8007958:	4629      	mov	r1, r5
 800795a:	f7f8 fc95 	bl	8000288 <__aeabi_dsub>
 800795e:	e72c      	b.n	80077ba <atan+0x2a>
 8007960:	ee10 0a10 	vmov	r0, s0
 8007964:	2200      	movs	r2, #0
 8007966:	4b53      	ldr	r3, [pc, #332]	; (8007ab4 <atan+0x324>)
 8007968:	4629      	mov	r1, r5
 800796a:	f7f8 fc8d 	bl	8000288 <__aeabi_dsub>
 800796e:	2200      	movs	r2, #0
 8007970:	4606      	mov	r6, r0
 8007972:	460f      	mov	r7, r1
 8007974:	4b4f      	ldr	r3, [pc, #316]	; (8007ab4 <atan+0x324>)
 8007976:	4620      	mov	r0, r4
 8007978:	4629      	mov	r1, r5
 800797a:	f7f8 fc87 	bl	800028c <__adddf3>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4630      	mov	r0, r6
 8007984:	4639      	mov	r1, r7
 8007986:	f7f8 ff61 	bl	800084c <__aeabi_ddiv>
 800798a:	f04f 0a01 	mov.w	sl, #1
 800798e:	4604      	mov	r4, r0
 8007990:	460d      	mov	r5, r1
 8007992:	e764      	b.n	800785e <atan+0xce>
 8007994:	4b49      	ldr	r3, [pc, #292]	; (8007abc <atan+0x32c>)
 8007996:	429e      	cmp	r6, r3
 8007998:	dc1d      	bgt.n	80079d6 <atan+0x246>
 800799a:	ee10 0a10 	vmov	r0, s0
 800799e:	2200      	movs	r2, #0
 80079a0:	4b47      	ldr	r3, [pc, #284]	; (8007ac0 <atan+0x330>)
 80079a2:	4629      	mov	r1, r5
 80079a4:	f7f8 fc70 	bl	8000288 <__aeabi_dsub>
 80079a8:	2200      	movs	r2, #0
 80079aa:	4606      	mov	r6, r0
 80079ac:	460f      	mov	r7, r1
 80079ae:	4b44      	ldr	r3, [pc, #272]	; (8007ac0 <atan+0x330>)
 80079b0:	4620      	mov	r0, r4
 80079b2:	4629      	mov	r1, r5
 80079b4:	f7f8 fe20 	bl	80005f8 <__aeabi_dmul>
 80079b8:	2200      	movs	r2, #0
 80079ba:	4b3e      	ldr	r3, [pc, #248]	; (8007ab4 <atan+0x324>)
 80079bc:	f7f8 fc66 	bl	800028c <__adddf3>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4630      	mov	r0, r6
 80079c6:	4639      	mov	r1, r7
 80079c8:	f7f8 ff40 	bl	800084c <__aeabi_ddiv>
 80079cc:	f04f 0a02 	mov.w	sl, #2
 80079d0:	4604      	mov	r4, r0
 80079d2:	460d      	mov	r5, r1
 80079d4:	e743      	b.n	800785e <atan+0xce>
 80079d6:	462b      	mov	r3, r5
 80079d8:	ee10 2a10 	vmov	r2, s0
 80079dc:	2000      	movs	r0, #0
 80079de:	4939      	ldr	r1, [pc, #228]	; (8007ac4 <atan+0x334>)
 80079e0:	f7f8 ff34 	bl	800084c <__aeabi_ddiv>
 80079e4:	f04f 0a03 	mov.w	sl, #3
 80079e8:	4604      	mov	r4, r0
 80079ea:	460d      	mov	r5, r1
 80079ec:	e737      	b.n	800785e <atan+0xce>
 80079ee:	4b36      	ldr	r3, [pc, #216]	; (8007ac8 <atan+0x338>)
 80079f0:	4e36      	ldr	r6, [pc, #216]	; (8007acc <atan+0x33c>)
 80079f2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80079f6:	4456      	add	r6, sl
 80079f8:	449a      	add	sl, r3
 80079fa:	e9da 2300 	ldrd	r2, r3, [sl]
 80079fe:	f7f8 fc43 	bl	8000288 <__aeabi_dsub>
 8007a02:	4622      	mov	r2, r4
 8007a04:	462b      	mov	r3, r5
 8007a06:	f7f8 fc3f 	bl	8000288 <__aeabi_dsub>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007a12:	f7f8 fc39 	bl	8000288 <__aeabi_dsub>
 8007a16:	f1bb 0f00 	cmp.w	fp, #0
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	460d      	mov	r5, r1
 8007a1e:	f6bf aed6 	bge.w	80077ce <atan+0x3e>
 8007a22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a26:	461d      	mov	r5, r3
 8007a28:	e6d1      	b.n	80077ce <atan+0x3e>
 8007a2a:	a51d      	add	r5, pc, #116	; (adr r5, 8007aa0 <atan+0x310>)
 8007a2c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007a30:	e6cd      	b.n	80077ce <atan+0x3e>
 8007a32:	bf00      	nop
 8007a34:	f3af 8000 	nop.w
 8007a38:	54442d18 	.word	0x54442d18
 8007a3c:	3ff921fb 	.word	0x3ff921fb
 8007a40:	8800759c 	.word	0x8800759c
 8007a44:	7e37e43c 	.word	0x7e37e43c
 8007a48:	e322da11 	.word	0xe322da11
 8007a4c:	3f90ad3a 	.word	0x3f90ad3a
 8007a50:	24760deb 	.word	0x24760deb
 8007a54:	3fa97b4b 	.word	0x3fa97b4b
 8007a58:	a0d03d51 	.word	0xa0d03d51
 8007a5c:	3fb10d66 	.word	0x3fb10d66
 8007a60:	c54c206e 	.word	0xc54c206e
 8007a64:	3fb745cd 	.word	0x3fb745cd
 8007a68:	920083ff 	.word	0x920083ff
 8007a6c:	3fc24924 	.word	0x3fc24924
 8007a70:	5555550d 	.word	0x5555550d
 8007a74:	3fd55555 	.word	0x3fd55555
 8007a78:	2c6a6c2f 	.word	0x2c6a6c2f
 8007a7c:	bfa2b444 	.word	0xbfa2b444
 8007a80:	52defd9a 	.word	0x52defd9a
 8007a84:	3fadde2d 	.word	0x3fadde2d
 8007a88:	af749a6d 	.word	0xaf749a6d
 8007a8c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007a90:	fe231671 	.word	0xfe231671
 8007a94:	3fbc71c6 	.word	0x3fbc71c6
 8007a98:	9998ebc4 	.word	0x9998ebc4
 8007a9c:	3fc99999 	.word	0x3fc99999
 8007aa0:	54442d18 	.word	0x54442d18
 8007aa4:	bff921fb 	.word	0xbff921fb
 8007aa8:	440fffff 	.word	0x440fffff
 8007aac:	7ff00000 	.word	0x7ff00000
 8007ab0:	3fdbffff 	.word	0x3fdbffff
 8007ab4:	3ff00000 	.word	0x3ff00000
 8007ab8:	3ff2ffff 	.word	0x3ff2ffff
 8007abc:	40037fff 	.word	0x40037fff
 8007ac0:	3ff80000 	.word	0x3ff80000
 8007ac4:	bff00000 	.word	0xbff00000
 8007ac8:	08008028 	.word	0x08008028
 8007acc:	08008008 	.word	0x08008008

08007ad0 <fabs>:
 8007ad0:	ec51 0b10 	vmov	r0, r1, d0
 8007ad4:	ee10 2a10 	vmov	r2, s0
 8007ad8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007adc:	ec43 2b10 	vmov	d0, r2, r3
 8007ae0:	4770      	bx	lr

08007ae2 <finite>:
 8007ae2:	ee10 3a90 	vmov	r3, s1
 8007ae6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8007aea:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007aee:	0fc0      	lsrs	r0, r0, #31
 8007af0:	4770      	bx	lr

08007af2 <matherr>:
 8007af2:	2000      	movs	r0, #0
 8007af4:	4770      	bx	lr
	...

08007af8 <nan>:
 8007af8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007b00 <nan+0x8>
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	00000000 	.word	0x00000000
 8007b04:	7ff80000 	.word	0x7ff80000

08007b08 <rint>:
 8007b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b0a:	ec51 0b10 	vmov	r0, r1, d0
 8007b0e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007b12:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007b16:	2e13      	cmp	r6, #19
 8007b18:	460b      	mov	r3, r1
 8007b1a:	ee10 4a10 	vmov	r4, s0
 8007b1e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007b22:	dc56      	bgt.n	8007bd2 <rint+0xca>
 8007b24:	2e00      	cmp	r6, #0
 8007b26:	da2b      	bge.n	8007b80 <rint+0x78>
 8007b28:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007b2c:	4302      	orrs	r2, r0
 8007b2e:	d023      	beq.n	8007b78 <rint+0x70>
 8007b30:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007b34:	4302      	orrs	r2, r0
 8007b36:	4254      	negs	r4, r2
 8007b38:	4314      	orrs	r4, r2
 8007b3a:	0c4b      	lsrs	r3, r1, #17
 8007b3c:	0b24      	lsrs	r4, r4, #12
 8007b3e:	045b      	lsls	r3, r3, #17
 8007b40:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007b44:	ea44 0103 	orr.w	r1, r4, r3
 8007b48:	460b      	mov	r3, r1
 8007b4a:	492f      	ldr	r1, [pc, #188]	; (8007c08 <rint+0x100>)
 8007b4c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8007b50:	e9d1 6700 	ldrd	r6, r7, [r1]
 8007b54:	4602      	mov	r2, r0
 8007b56:	4639      	mov	r1, r7
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f7f8 fb97 	bl	800028c <__adddf3>
 8007b5e:	e9cd 0100 	strd	r0, r1, [sp]
 8007b62:	463b      	mov	r3, r7
 8007b64:	4632      	mov	r2, r6
 8007b66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b6a:	f7f8 fb8d 	bl	8000288 <__aeabi_dsub>
 8007b6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b72:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007b76:	4639      	mov	r1, r7
 8007b78:	ec41 0b10 	vmov	d0, r0, r1
 8007b7c:	b003      	add	sp, #12
 8007b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b80:	4a22      	ldr	r2, [pc, #136]	; (8007c0c <rint+0x104>)
 8007b82:	4132      	asrs	r2, r6
 8007b84:	ea01 0702 	and.w	r7, r1, r2
 8007b88:	4307      	orrs	r7, r0
 8007b8a:	d0f5      	beq.n	8007b78 <rint+0x70>
 8007b8c:	0852      	lsrs	r2, r2, #1
 8007b8e:	4011      	ands	r1, r2
 8007b90:	430c      	orrs	r4, r1
 8007b92:	d00b      	beq.n	8007bac <rint+0xa4>
 8007b94:	ea23 0202 	bic.w	r2, r3, r2
 8007b98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007b9c:	2e13      	cmp	r6, #19
 8007b9e:	fa43 f306 	asr.w	r3, r3, r6
 8007ba2:	bf0c      	ite	eq
 8007ba4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007ba8:	2400      	movne	r4, #0
 8007baa:	4313      	orrs	r3, r2
 8007bac:	4916      	ldr	r1, [pc, #88]	; (8007c08 <rint+0x100>)
 8007bae:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007bb2:	4622      	mov	r2, r4
 8007bb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007bb8:	4620      	mov	r0, r4
 8007bba:	4629      	mov	r1, r5
 8007bbc:	f7f8 fb66 	bl	800028c <__adddf3>
 8007bc0:	e9cd 0100 	strd	r0, r1, [sp]
 8007bc4:	4622      	mov	r2, r4
 8007bc6:	462b      	mov	r3, r5
 8007bc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bcc:	f7f8 fb5c 	bl	8000288 <__aeabi_dsub>
 8007bd0:	e7d2      	b.n	8007b78 <rint+0x70>
 8007bd2:	2e33      	cmp	r6, #51	; 0x33
 8007bd4:	dd07      	ble.n	8007be6 <rint+0xde>
 8007bd6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007bda:	d1cd      	bne.n	8007b78 <rint+0x70>
 8007bdc:	ee10 2a10 	vmov	r2, s0
 8007be0:	f7f8 fb54 	bl	800028c <__adddf3>
 8007be4:	e7c8      	b.n	8007b78 <rint+0x70>
 8007be6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8007bea:	f04f 32ff 	mov.w	r2, #4294967295
 8007bee:	40f2      	lsrs	r2, r6
 8007bf0:	4210      	tst	r0, r2
 8007bf2:	d0c1      	beq.n	8007b78 <rint+0x70>
 8007bf4:	0852      	lsrs	r2, r2, #1
 8007bf6:	4210      	tst	r0, r2
 8007bf8:	bf1f      	itttt	ne
 8007bfa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007bfe:	ea20 0202 	bicne.w	r2, r0, r2
 8007c02:	4134      	asrne	r4, r6
 8007c04:	4314      	orrne	r4, r2
 8007c06:	e7d1      	b.n	8007bac <rint+0xa4>
 8007c08:	08008048 	.word	0x08008048
 8007c0c:	000fffff 	.word	0x000fffff

08007c10 <scalbn>:
 8007c10:	b570      	push	{r4, r5, r6, lr}
 8007c12:	ec55 4b10 	vmov	r4, r5, d0
 8007c16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	462b      	mov	r3, r5
 8007c1e:	b9aa      	cbnz	r2, 8007c4c <scalbn+0x3c>
 8007c20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007c24:	4323      	orrs	r3, r4
 8007c26:	d03b      	beq.n	8007ca0 <scalbn+0x90>
 8007c28:	4b31      	ldr	r3, [pc, #196]	; (8007cf0 <scalbn+0xe0>)
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	ee10 0a10 	vmov	r0, s0
 8007c32:	f7f8 fce1 	bl	80005f8 <__aeabi_dmul>
 8007c36:	4b2f      	ldr	r3, [pc, #188]	; (8007cf4 <scalbn+0xe4>)
 8007c38:	429e      	cmp	r6, r3
 8007c3a:	4604      	mov	r4, r0
 8007c3c:	460d      	mov	r5, r1
 8007c3e:	da12      	bge.n	8007c66 <scalbn+0x56>
 8007c40:	a327      	add	r3, pc, #156	; (adr r3, 8007ce0 <scalbn+0xd0>)
 8007c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c46:	f7f8 fcd7 	bl	80005f8 <__aeabi_dmul>
 8007c4a:	e009      	b.n	8007c60 <scalbn+0x50>
 8007c4c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007c50:	428a      	cmp	r2, r1
 8007c52:	d10c      	bne.n	8007c6e <scalbn+0x5e>
 8007c54:	ee10 2a10 	vmov	r2, s0
 8007c58:	4620      	mov	r0, r4
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	f7f8 fb16 	bl	800028c <__adddf3>
 8007c60:	4604      	mov	r4, r0
 8007c62:	460d      	mov	r5, r1
 8007c64:	e01c      	b.n	8007ca0 <scalbn+0x90>
 8007c66:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	3a36      	subs	r2, #54	; 0x36
 8007c6e:	4432      	add	r2, r6
 8007c70:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007c74:	428a      	cmp	r2, r1
 8007c76:	dd0b      	ble.n	8007c90 <scalbn+0x80>
 8007c78:	ec45 4b11 	vmov	d1, r4, r5
 8007c7c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007ce8 <scalbn+0xd8>
 8007c80:	f000 f83c 	bl	8007cfc <copysign>
 8007c84:	a318      	add	r3, pc, #96	; (adr r3, 8007ce8 <scalbn+0xd8>)
 8007c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8a:	ec51 0b10 	vmov	r0, r1, d0
 8007c8e:	e7da      	b.n	8007c46 <scalbn+0x36>
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	dd08      	ble.n	8007ca6 <scalbn+0x96>
 8007c94:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007ca0:	ec45 4b10 	vmov	d0, r4, r5
 8007ca4:	bd70      	pop	{r4, r5, r6, pc}
 8007ca6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007caa:	da0d      	bge.n	8007cc8 <scalbn+0xb8>
 8007cac:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007cb0:	429e      	cmp	r6, r3
 8007cb2:	ec45 4b11 	vmov	d1, r4, r5
 8007cb6:	dce1      	bgt.n	8007c7c <scalbn+0x6c>
 8007cb8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007ce0 <scalbn+0xd0>
 8007cbc:	f000 f81e 	bl	8007cfc <copysign>
 8007cc0:	a307      	add	r3, pc, #28	; (adr r3, 8007ce0 <scalbn+0xd0>)
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	e7e0      	b.n	8007c8a <scalbn+0x7a>
 8007cc8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007ccc:	3236      	adds	r2, #54	; 0x36
 8007cce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007cd2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	4629      	mov	r1, r5
 8007cda:	2200      	movs	r2, #0
 8007cdc:	4b06      	ldr	r3, [pc, #24]	; (8007cf8 <scalbn+0xe8>)
 8007cde:	e7b2      	b.n	8007c46 <scalbn+0x36>
 8007ce0:	c2f8f359 	.word	0xc2f8f359
 8007ce4:	01a56e1f 	.word	0x01a56e1f
 8007ce8:	8800759c 	.word	0x8800759c
 8007cec:	7e37e43c 	.word	0x7e37e43c
 8007cf0:	43500000 	.word	0x43500000
 8007cf4:	ffff3cb0 	.word	0xffff3cb0
 8007cf8:	3c900000 	.word	0x3c900000

08007cfc <copysign>:
 8007cfc:	ec51 0b10 	vmov	r0, r1, d0
 8007d00:	ee11 0a90 	vmov	r0, s3
 8007d04:	ee10 2a10 	vmov	r2, s0
 8007d08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007d0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007d10:	ea41 0300 	orr.w	r3, r1, r0
 8007d14:	ec43 2b10 	vmov	d0, r2, r3
 8007d18:	4770      	bx	lr
	...

08007d1c <_init>:
 8007d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1e:	bf00      	nop
 8007d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d22:	bc08      	pop	{r3}
 8007d24:	469e      	mov	lr, r3
 8007d26:	4770      	bx	lr

08007d28 <_fini>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	bf00      	nop
 8007d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2e:	bc08      	pop	{r3}
 8007d30:	469e      	mov	lr, r3
 8007d32:	4770      	bx	lr
